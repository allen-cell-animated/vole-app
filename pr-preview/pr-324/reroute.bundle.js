(()=>{"use strict";var __webpack_modules__={904:()=>{eval('\n;// CONCATENATED MODULE: ./website/utils/gh_route_utils.ts\nvar ESCAPED_AMPERSAND = "~and~";\n\n/**\n * Converts the path component of a URL into a query string. Used to redirect the browser\n * for single-page apps when the server is not configured to serve the app for all paths,\n * e.g. GitHub pages.\n *\n * Adapted from https://github.com/rafgraph/spa-github-pages.\n *\n * The original path will be converted into a query string, and the original query string will be\n * escaped and separated with an `&` character.\n *\n * @example\n * ```\n * const url = "https://www.example.com/one/two?a=b&c=d#qwe";\n * //                               Original: "https://www.example.com/one/two?a=b&c=d#qwe"\n * convertUrlToQueryStringPath(url, 0); // => "https://www.example.com/?/one/two&a=b~and~c=d#qwe"\n * convertUrlToQueryStringPath(url, 1); // => "https://www.example.com/one/?/two&a=b~and~c=d#qwe"\n * ```\n *\n * @param url - The URL to convert.\n * @param basePathSegments - The number of path segments to keep in the URL. 0 by default.\n *\n * @returns The URL with the path converted to a query string, and the original query string escaped.\n */\nfunction convertUrlToQueryStringPath(url) {\n  var basePathSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var pathSegments = url.pathname.split("/");\n  var basePath = pathSegments.slice(0, basePathSegments + 1).join("/");\n  var remainingPath = pathSegments.slice(basePathSegments + 1).join("/");\n  // Remove the "?" and replace with an "&" to separate the path from the original query string.\n  // Escape existing ampersands with "~and~" so "&" is preserved as our path/query separator.\n  var queryPath = remainingPath.replace(/&/g, ESCAPED_AMPERSAND);\n  var queryString = url.search ? url.search.slice(1).replace(/&/g, ESCAPED_AMPERSAND) : "";\n  var newUrl = "".concat(url.origin).concat(basePath, "/?/").concat(queryPath);\n  newUrl += queryString ? "&".concat(queryString) : "";\n  newUrl += url.hash;\n  return new URL(newUrl);\n}\nfunction isQueryStringPath(url) {\n  return url.search !== "" && url.search.startsWith("?/");\n}\n\n/**\n * Converts a query string back into a complete URL. Used in combination with `convertUrlToQueryStringPath()`.\n * to redirect the browser for single-page apps when the server cannot be configured, e.g. GitHub pages.\n * Adapted from https://github.com/rafgraph/spa-github-pages.\n *\n * @param url - The URL with a path converted to a query string, and the original query string escaped.\n * @returns The original URL, with path instead of a query string.\n */\nfunction convertQueryStringPathToUrl(url) {\n  if (!url.search || !url.search.startsWith("?/")) {\n    return url;\n  }\n  var newPathAndQueryString = url.search.slice(2) // Remove first ? character and slash\n  .split("&") // Split the original path [idx 0] and query string [idx 1]\n  .map(function (s) {\n    return s.replace(new RegExp(ESCAPED_AMPERSAND, "g"), "&");\n  }) // Restore escaped ampersands\n  .join("?"); // Rejoin the path and query string\n\n  return new URL("".concat(url.origin).concat(url.pathname).concat(newPathAndQueryString).concat(url.hash));\n}\n;// CONCATENATED MODULE: ./public/gh-reroute/index.tsx\n\n\n// Hide the default 404 page content and just show a blank screen.\n// The content should only be shown if the browser doesn\'t support JavaScript.\nwindow.onload = function () {\n  document.body.innerHTML = "";\n};\n\n// This script is used in the 404.html page to redirect the browser to the correct URL.\n// Convert the current URL to a query string path and redirect the browser.\nvar gh_reroute_location = window.location;\nvar locationUrl = new URL(gh_reroute_location.toString());\nvar newUrl = convertUrlToQueryStringPath(locationUrl, 1);\ngh_reroute_location.replace(newUrl);\nconsole.log("Redirecting to " + newUrl.toString());\n\n//# sourceURL=webpack://@aics/web-3d-viewer/./public/gh-reroute/index.tsx_+_1_modules?')}},__webpack_exports__={};__webpack_modules__[904]()})();