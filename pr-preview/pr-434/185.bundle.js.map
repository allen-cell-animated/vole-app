{"version":3,"file":"185.bundle.js","mappings":"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","sources":["webpack://@aics/vole-app/./website/components/Modals/ShareModal.tsx","webpack://@aics/vole-app/./website/components/AppWrapper.tsx"],"sourcesContent":["import { View3d } from \"@aics/vole-core\";\nimport { ShareAltOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Modal, notification } from \"antd\";\nimport React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useShallow } from \"zustand/shallow\";\n\nimport { MultisceneUrls } from \"../../../src/aics-image-viewer/components/App/types\";\nimport { selectViewerSettings, useViewerState, ViewerStore } from \"../../../src/aics-image-viewer/state/store\";\nimport { AppDataProps } from \"../../types\";\nimport { ENCODED_COLON_REGEX, ENCODED_COMMA_REGEX, serializeViewerUrlParams } from \"../../utils/url_utils\";\nimport { FlexRow } from \"../LandingPage/utils\";\n\ntype ShareModalProps = {\n  appProps: AppDataProps;\n  // Used to retrieve the current camera position information\n  view3dRef?: React.RefObject<View3d | null>;\n};\n\nconst ModalContainer = styled.div``;\n\nconst ShareModal: React.FC<ShareModalProps> = (props: ShareModalProps) => {\n  const viewerSettings = useViewerState(useShallow(selectViewerSettings));\n  const channelSettings = useViewerState(useShallow((store: ViewerStore) => store.channelSettings));\n\n  const [showModal, setShowModal] = useState(false);\n  const modalContainerRef = useRef<HTMLDivElement>(null);\n\n  const [notificationApi, notificationContextHolder] = notification.useNotification({\n    getContainer: modalContainerRef.current ? () => modalContainerRef.current! : undefined,\n    placement: \"bottomLeft\",\n    duration: 2,\n  });\n\n  // location.pathname will include up to `.../viewer`\n  const baseUrl = location.protocol + \"//\" + location.host + location.pathname;\n  const paramProps = {\n    ...viewerSettings,\n    channelSettings,\n    cameraState: props.view3dRef?.current?.getCameraState(),\n  };\n\n  const urlParams: string[] = [];\n  const { imageUrl } = props.appProps;\n\n  if (imageUrl) {\n    const urls = (imageUrl as MultisceneUrls).scenes ?? [imageUrl];\n    const serializedUrl = urls\n      .map((scene) => {\n        if (Array.isArray(scene)) {\n          return scene.map((url) => encodeURIComponent(url)).join(\",\");\n        } else {\n          return encodeURIComponent(scene);\n        }\n      })\n      .join(\"+\");\n\n    urlParams.push(`url=${serializedUrl}`);\n  }\n\n  let serializedViewerParams = new URLSearchParams(serializeViewerUrlParams(paramProps) as Record<string, string>);\n  if (serializedViewerParams.size > 0) {\n    // Decode specifically colons and commas for better readability + decreased char count\n    let viewerParamString = serializedViewerParams\n      .toString()\n      .replace(ENCODED_COLON_REGEX, \":\")\n      .replace(ENCODED_COMMA_REGEX, \",\");\n    urlParams.push(viewerParamString);\n  }\n\n  const shareUrl = urlParams.length > 0 ? `${baseUrl}?${urlParams.join(\"&\")}` : baseUrl;\n\n  const onClickCopy = (): void => {\n    navigator.clipboard.writeText(shareUrl);\n    notificationApi.success({\n      message: \"URL copied\",\n    });\n  };\n\n  return (\n    <ModalContainer ref={modalContainerRef}>\n      {notificationContextHolder}\n\n      <Button type=\"link\" onClick={() => setShowModal(!showModal)}>\n        <ShareAltOutlined />\n        Share\n      </Button>\n      <Modal\n        open={showModal}\n        title={\"Share URL\"}\n        onCancel={() => {\n          setShowModal(false);\n        }}\n        getContainer={modalContainerRef.current || undefined}\n        footer={\n          <Button type=\"default\" onClick={() => setShowModal(false)}>\n            Close\n          </Button>\n        }\n        destroyOnClose={true}\n      >\n        <FlexRow $gap={8} style={{ marginTop: \"12px\" }}>\n          <Input value={shareUrl} readOnly={true}></Input>\n          <Button type=\"primary\" onClick={onClickCopy}>\n            Copy URL\n          </Button>\n        </FlexRow>\n      </Modal>\n    </ModalContainer>\n  );\n};\n\nexport default ShareModal;\n","import { View3d } from \"@aics/vole-core\";\nimport { isEqual } from \"lodash\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\n\nimport { ImageViewerApp, ViewerStateProvider } from \"../../src\";\nimport type { ViewerState } from \"../../src/aics-image-viewer/components/ViewerStateProvider/types\";\nimport { getDefaultViewerChannelSettings } from \"../../src/aics-image-viewer/shared/constants\";\nimport { select, useViewerState } from \"../../src/aics-image-viewer/state/store\";\nimport type { AppDataProps } from \"../types\";\nimport { encodeImageUrlProp, parseViewerUrlParams } from \"../utils/url_utils\";\nimport { FlexRowAlignCenter } from \"./LandingPage/utils\";\n\nimport Header, { HEADER_HEIGHT_PX } from \"./Header\";\nimport HelpDropdown from \"./HelpDropdown\";\nimport LoadModal from \"./Modals/LoadModal\";\nimport ShareModal from \"./Modals/ShareModal\";\n\nconst DEFAULT_APP_PROPS: AppDataProps = {\n  imageUrl: \"\",\n  cellId: \"\",\n  imageDownloadHref: \"\",\n  parentImageDownloadHref: \"\",\n  viewerChannelSettings: getDefaultViewerChannelSettings(),\n};\n\n/**\n * Wrapper around the main ImageViewer component. Handles the collection of parameters from the\n * URL and location state (from routing) to pass to the viewer.\n */\nexport default function AppWrapper(): ReactElement {\n  const location = useLocation();\n  const navigation = useNavigate();\n\n  const view3dRef = React.useRef<View3d | null>(null);\n  const prevViewerSettingsRef = React.useRef<Partial<ViewerState> | undefined>(undefined);\n  const mergeViewerSettings = useViewerState(select(\"mergeViewerSettings\"));\n  const [viewerProps, setViewerProps] = useState<AppDataProps | null>(null);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    // On load, fetch parameters from the URL and location state, then merge.\n    const locationArgs = location.state as AppDataProps;\n    parseViewerUrlParams(searchParams).then(\n      ({ args: urlArgs, viewerSettings: urlViewerSettings }) => {\n        setViewerProps({ ...DEFAULT_APP_PROPS, ...urlArgs, ...locationArgs });\n\n        const viewerSettings = { ...urlViewerSettings, ...locationArgs?.viewerSettings };\n        if (viewerSettings && !isEqual(viewerSettings, prevViewerSettingsRef.current)) {\n          mergeViewerSettings(viewerSettings);\n          prevViewerSettingsRef.current = viewerSettings;\n        }\n      },\n      (reason) => {\n        console.warn(\"Failed to parse URL parameters: \", reason);\n        setViewerProps({ ...DEFAULT_APP_PROPS, ...locationArgs });\n      }\n    );\n  }, [location.state, searchParams, mergeViewerSettings]);\n\n  // TODO: Disabled for now, since it only makes sense for Zarr/OME-tiff URLs. Checking for\n  // validity may be more complex. (Also, we could add a callback to `ImageViewerApp` for successful\n  // loading and only save the URL then.)\n  //\n  // Save recent zarr data urls\n  // useEffect(() => {\n  //   if (typeof viewerArgs.imageUrl === \"string\" && isValidZarrUrl(viewerArgs.imageUrl)) {\n  //     // TODO: Handle case where there are multiple URLs?\n  //     // TODO: Save ALL AppProps instead of only the URL? Ignore/handle rawData?\n  //     addRecentDataUrl({ url: viewerArgs.imageUrl as string, label: viewerArgs.imageUrl as string });\n  //   }\n  // }, [viewerArgs]);\n\n  const onLoad = (appProps: AppDataProps): void => {\n    // Force a page reload when loading new data. This prevents a bug where a desync in the number\n    // of channels in the viewer can cause a crash. The root cause is React immediately forcing a\n    // re-render every time `setState` is called in an async function.\n    navigation(`/viewer?url=${encodeImageUrlProp(appProps.imageUrl)}`, {\n      state: appProps,\n    });\n    navigation(0);\n  };\n\n  return (\n    <div>\n      <ViewerStateProvider>\n        <Header noNavigate>\n          <FlexRowAlignCenter $gap={12}>\n            <FlexRowAlignCenter $gap={2}>\n              <LoadModal onLoad={onLoad} />\n              {viewerProps && <ShareModal appProps={viewerProps} view3dRef={view3dRef} />}\n            </FlexRowAlignCenter>\n            <HelpDropdown />\n          </FlexRowAlignCenter>\n        </Header>\n        {viewerProps && (\n          <ImageViewerApp\n            {...viewerProps}\n            appHeight={`calc(100vh - ${HEADER_HEIGHT_PX}px)`}\n            canvasMargin=\"0 0 0 0\"\n            view3dRef={view3dRef}\n          />\n        )}\n      </ViewerStateProvider>\n    </div>\n  );\n}\n"],"names":["ModalContainer","styled","div","_templateObject","props","_props$view3dRef","viewerSettings","useViewerState","useShallow","selectViewerSettings","channelSettings","store","_useState2","_slicedToArray","useState","showModal","setShowModal","modalContainerRef","useRef","_notification$useNoti2","notification","useNotification","getContainer","current","undefined","placement","duration","notificationApi","notificationContextHolder","baseUrl","location","protocol","host","pathname","paramProps","_objectSpread","cameraState","view3dRef","getCameraState","urlParams","imageUrl","appProps","_scenes","serializedUrl","scenes","map","scene","Array","isArray","url","encodeURIComponent","join","push","concat","serializedViewerParams","URLSearchParams","serializeViewerUrlParams","size","viewerParamString","toString","replace","ENCODED_COLON_REGEX","ENCODED_COMMA_REGEX","shareUrl","length","React","ref","Button","type","onClick","ShareAltOutlined","Modal","open","title","onCancel","footer","destroyOnClose","FlexRow","$gap","style","marginTop","Input","value","readOnly","navigator","clipboard","writeText","success","message","DEFAULT_APP_PROPS","cellId","imageDownloadHref","parentImageDownloadHref","viewerChannelSettings","getDefaultViewerChannelSettings","AppWrapper","useLocation","navigation","useNavigate","prevViewerSettingsRef","mergeViewerSettings","select","viewerProps","setViewerProps","searchParams","useSearchParams","useEffect","locationArgs","state","parseViewerUrlParams","then","_ref","urlArgs","args","urlViewerSettings","isEqual","reason","console","warn","ViewerStateProvider","Header","noNavigate","FlexRowAlignCenter","LoadModal","onLoad","encodeImageUrlProp","ShareModal","HelpDropdown","ImageViewerApp","_extends","appHeight","HEADER_HEIGHT_PX","canvasMargin"],"sourceRoot":""}