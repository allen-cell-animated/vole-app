{"version":3,"file":"931.bundle.js","mappings":"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","sources":["webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/viewerChannelSettings.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/viewerState.ts","webpack://@aics/vole-app/./src/aics-image-viewer/state/util.ts","webpack://@aics/vole-app/./src/aics-image-viewer/state/reset.ts","webpack://@aics/vole-app/./src/aics-image-viewer/state/store.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/controlPointsToLut.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/hooks.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/types.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/colorRepresentations.ts","webpack://@aics/vole-app/./src/aics-image-viewer/state/subscribers.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/sliderValuesToImageValues.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/playControls.ts","webpack://@aics/vole-app/./src/aics-image-viewer/shared/utils/sceneStore.ts","webpack://@aics/vole-app/./src/aics-image-viewer/components/useVolume.ts","webpack://@aics/vole-app/./src/aics-image-viewer/components/shared/NumericInput/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/shared/SmarterSlider.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/AxisClipSliders/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/turnTable.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/index.ts","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/axes.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/boundingBox.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/camera.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/channels.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/closePanel.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/download.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/dropdownArrow.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/metadata.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/preferences.svg","webpack://@aics/vole-app/./src/aics-image-viewer/assets/icons/resetView.svg","webpack://@aics/vole-app/./src/aics-image-viewer/components/shared/ViewerIcon.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/BottomPanel/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/CellViewerCanvasWrapper/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ColorPicker.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/shared/SliderRow/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/TfEditor/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ChannelsWidgetRow/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/shared/SharedCheckBox.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ChannelsWidget.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/CustomizeWidget.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/GlobalVolumeControls.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/MetadataViewer/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ControlPanel/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ErrorAlert/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/Toolbar/DownloadButton.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/Toolbar/ViewModeRadioButtons.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/Toolbar/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/App/ChannelUpdater.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/App/index.tsx","webpack://@aics/vole-app/./src/aics-image-viewer/components/ViewerStateProvider/ResetStateProvider.ts","webpack://@aics/vole-app/./src/aics-image-viewer/components/ViewerStateProvider/index.tsx","webpack://@aics/vole-app/./website/components/Buttons/index.tsx","webpack://@aics/vole-app/./website/components/HelpDropdown.tsx","webpack://@aics/vole-app/./website/utils/react_utils.ts","webpack://@aics/vole-app/./website/components/MiddleTruncatedText.tsx","webpack://@aics/vole-app/./website/components/Modals/LoadModal.tsx"],"sourcesContent":["import { ControlPoint } from \"@aics/vole-core\";\n\nimport { OTHER_CHANNEL_KEY, SINGLE_GROUP_CHANNEL_KEY } from \"../constants\";\n\n/** Settings for a single channel, as passed in via props by App users */\nexport interface ViewerChannelSetting {\n  // regex or string or array of regexes or strings or number for raw channel index\n  // if you want to match on channel index, then you must provide the index here.\n  match: (string | number)[] | string | number;\n\n  // name is the display name for this channel.\n  // if name is not given, use raw data channel name for display\n  name?: string;\n\n  // 6 digit hex rrggbb. defaults to auto-assigned by app\n  color?: string;\n  // default to false\n  enabled?: boolean;\n  // default to false\n  surfaceEnabled?: boolean;\n  /**\n   * Min and max values for the intensity lookup table, which maps from raw intensity values\n   * in the volume to opacity and color. Defaults to [0, 255].\n   *\n   * - Plain numbers are indices of histogram bins, in the range [0, 255].\n   * - `v{n}` represents a raw intensity value, where `n` is an integer.\n   * - `p{n}` represents a percentile, where `n` is a percentile in the [0, 100] range.\n   * - `m{n}` represents the median multiplied by `n / 100`.\n   * - `autoij` in either the min or max fields will use the \"auto\" algorithm\n   * from ImageJ to select the min and max.\n   */\n  lut?: [string, string];\n  /**\n   * Whether to show control point controls instead of a simpler ramp control.\n   * Defaults to false.\n   */\n  controlPointsEnabled?: boolean;\n  controlPoints?: ControlPoint[];\n  ramp?: [number, number];\n  // valid when surfaceEnabled = true. default 128 or 0.5 of max intensity range\n  isovalue?: number;\n  // valid when surfaceEnabled = true. default 1.0 fully opaque\n  surfaceOpacity?: number;\n  colorizeEnabled?: boolean;\n  colorizeAlpha?: number;\n}\n\nexport interface ViewerChannelGroup {\n  name: string;\n  channels: ViewerChannelSetting[];\n}\n\nexport interface ViewerChannelSettings {\n  maskChannelName?: string;\n  groups: ViewerChannelGroup[];\n}\n\nexport type ChannelGrouping = { [key: string]: number[] };\n\nexport function matchChannel(channelName: string, channelIndex: number, c: ViewerChannelSetting): boolean {\n  // c could be a number, an array of (strings or numbers), or a single regex\n  if (typeof c.match === \"number\") {\n    if (c.match === channelIndex) {\n      return true;\n    }\n  } else if (Array.isArray(c.match)) {\n    for (const r of c.match) {\n      if (typeof r === \"number\") {\n        if (r === channelIndex) {\n          return true;\n        }\n      } else {\n        const re = new RegExp(r);\n        if (re.test(channelName)) {\n          return true;\n        }\n      }\n    }\n  } else if (typeof c.match === \"string\") {\n    const re = new RegExp(c.match);\n    if (re.test(channelName)) {\n      return true;\n    }\n  } else {\n    throw new Error(\n      \"match is required for channel settings groups, and must be a string, number, or array of strings or numbers\"\n    );\n  }\n  return false;\n}\n\nfunction findFirstChannelMatchOfGroup(\n  channel: string,\n  channelIndex: number,\n  g: ViewerChannelGroup\n): ViewerChannelSetting | undefined {\n  for (const c of g.channels) {\n    if (matchChannel(channel, channelIndex, c)) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\nexport function findFirstChannelMatch(\n  channel: string,\n  channelIndex: number,\n  settings: ViewerChannelSettings\n): ViewerChannelSetting | undefined {\n  if (!settings.groups) {\n    return undefined;\n  }\n  for (const g of settings.groups) {\n    const c = findFirstChannelMatchOfGroup(channel, channelIndex, g);\n    if (c !== undefined) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\nexport function getDisplayName(name: string, index: number, settings?: ViewerChannelSettings): string {\n  if (settings) {\n    const c = findFirstChannelMatch(name, index, settings);\n    if (c) {\n      return c.name || name;\n    }\n  }\n  return name;\n}\n\nexport function makeChannelIndexGrouping(channels: string[], settings?: ViewerChannelSettings): ChannelGrouping {\n  if (!channels) {\n    return {};\n  }\n  if (!settings) {\n    // return all channels\n    return { [SINGLE_GROUP_CHANNEL_KEY]: channels.map((_val, index) => index) };\n  }\n\n  const groups = settings.groups;\n  const grouping: ChannelGrouping = {};\n  const channelsMatched: number[] = [];\n  // this is kinda inefficient but we want to ensure the order as specified in viewerChannelSettings\n  if (groups !== undefined) {\n    for (const g of groups) {\n      grouping[g.name] = [];\n      g.channels.forEach((groupMatch) => {\n        // check all channels against the match\n        channels.forEach((channel, index) => {\n          // make sure channel was not already matched someplace.\n          if (!channelsMatched.includes(index)) {\n            if (matchChannel(channel, index, groupMatch)) {\n              grouping[g.name].push(index);\n              channelsMatched.push(index);\n            }\n          }\n        });\n      });\n    }\n  }\n  // now any channels not still matched go in the catchall group.\n  if (channelsMatched.length < channels.length) {\n    const remainderGroupName = groups.length === 0 ? SINGLE_GROUP_CHANNEL_KEY : OTHER_CHANNEL_KEY;\n    grouping[remainderGroupName] = [];\n    channels.forEach((channel, index) => {\n      // make sure channel was not already matched someplace.\n      if (!channelsMatched.includes(index)) {\n        grouping[remainderGroupName].push(index);\n      }\n    });\n  }\n  return grouping;\n}\n","import { ChannelState, ViewerSettingUpdater, ViewerState } from \"../../components/ViewerStateProvider/types\";\nimport { getDefaultChannelState } from \"../constants\";\nimport { ColorArray } from \"./colorRepresentations\";\nimport {\n  findFirstChannelMatch,\n  getDisplayName,\n  ViewerChannelSetting,\n  ViewerChannelSettings,\n} from \"./viewerChannelSettings\";\n\n/** Sets all fields of the viewer state to the values of the `newState`. */\nexport function overrideViewerState(changeViewerSetting: ViewerSettingUpdater, newState: ViewerState): void {\n  for (const key of Object.keys(newState) as (keyof ViewerState)[]) {\n    changeViewerSetting(key, newState[key] as any);\n  }\n\n  // Pathtrace rendering is not allowed in 2D view mode but is in 3D mode.\n  // Since we're not guaranteed on the order of object keys, apply changes to render mode a second time\n  // in case we were previously in 2D view mode and the change was blocked, but we're now in 3D.\n  changeViewerSetting(\"renderMode\", newState.renderMode);\n}\n\nexport function overrideChannelStates(\n  setChannelSettings: (settings: ChannelState[]) => void,\n  currentStates: ChannelState[],\n  newStates: ChannelState[]\n): void {\n  // Match the names in the new state with the existing state so we do not override the names.\n  // Also don't reset the control points or ramps, since these will be reset in the app.\n  for (let i = 0; i < newStates.length; i++) {\n    newStates[i].name = currentStates[i].name;\n    newStates[i].controlPoints = currentStates[i].controlPoints;\n    newStates[i].ramp = currentStates[i].ramp;\n  }\n  setChannelSettings(newStates);\n}\n\n/** Returns the indices of channels that have either the volume or isosurface enabled. */\nexport function getEnabledChannelIndices(channelSettings: ChannelState[]): number[] {\n  const enabledChannels = [];\n  for (let i = 0; i < channelSettings.length; i++) {\n    if (channelSettings[i].volumeEnabled || channelSettings[i].isosurfaceEnabled) {\n      enabledChannels.push(i);\n    }\n  }\n  return enabledChannels;\n}\n\nexport function colorHexToArray(hex: string): ColorArray | null {\n  // hex is a xxxxxx string. split it into array of rgb ints\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (result) {\n    return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];\n  } else {\n    return null;\n  }\n}\n\nexport function initializeOneChannelSetting(\n  channelName: string,\n  index: number,\n  defaultColor: ColorArray,\n  viewerChannelSettings?: ViewerChannelSettings,\n  defaultChannelState: ChannelState = getDefaultChannelState()\n): ChannelState {\n  let initSettings = {} as Partial<ViewerChannelSetting>;\n  if (viewerChannelSettings) {\n    // search for channel in settings using groups, names and match values\n    initSettings = findFirstChannelMatch(channelName, index, viewerChannelSettings) ?? {};\n  }\n\n  return {\n    name: channelName ?? \"Channel \" + index,\n    displayName: getDisplayName(channelName ?? \"Channel \" + index, index, viewerChannelSettings),\n    volumeEnabled: initSettings.enabled ?? defaultChannelState.volumeEnabled,\n    isosurfaceEnabled: initSettings.surfaceEnabled ?? defaultChannelState.isosurfaceEnabled,\n    colorizeEnabled: initSettings.colorizeEnabled ?? defaultChannelState.colorizeEnabled,\n    colorizeAlpha: initSettings.colorizeAlpha ?? defaultChannelState.colorizeAlpha,\n    isovalue: initSettings.isovalue ?? defaultChannelState.isovalue,\n    opacity: initSettings.surfaceOpacity ?? defaultChannelState.opacity,\n    color: colorHexToArray(initSettings.color ?? \"\") ?? defaultColor,\n    useControlPoints: initSettings.controlPointsEnabled ?? defaultChannelState.useControlPoints,\n    controlPoints: initSettings.controlPoints ?? defaultChannelState.controlPoints,\n    ramp: initSettings.ramp ?? defaultChannelState.ramp,\n    plotMin: defaultChannelState.plotMin,\n    plotMax: defaultChannelState.plotMax,\n  };\n}\n","import { ViewerState } from \"../components/ViewerStateProvider/types\";\nimport { RenderMode, ViewMode } from \"../shared/enums\";\n\n// TODO move back to a new `types` module (?)\ntype ViewerSettingChangeHandlers = {\n  [K in keyof ViewerState]?: (value: Partial<ViewerState[K]>, settings: ViewerState) => Partial<ViewerState>;\n};\n\nconst isRecord = <T>(val: T): val is Extract<T, Record<string, unknown>> =>\n  typeof val === \"object\" && val !== null && !Array.isArray(val);\n\nconst VIEWER_SETTINGS_CHANGE_HANDLERS: ViewerSettingChangeHandlers = {\n  // Do not allow path trace render mode in 2D view modes\n  viewMode: (viewMode, { renderMode }) => {\n    const switchToVolumetric = viewMode !== ViewMode.threeD && renderMode === RenderMode.pathTrace;\n    return {\n      viewMode,\n      renderMode: switchToVolumetric ? RenderMode.volumetric : renderMode,\n    };\n  },\n\n  // Don't switch to path trace rendering in any view mode other than 3d; if we do switch, turn off autorotate\n  renderMode: (renderMode, { viewMode, autorotate }) => {\n    const willPathtrace = renderMode === RenderMode.pathTrace;\n    if (willPathtrace && viewMode === ViewMode.threeD) {\n      return {};\n    }\n\n    return {\n      renderMode,\n      autorotate: autorotate && !willPathtrace,\n    };\n  },\n\n  // Do not allow autorotate while in pathtrace mode (button should be disabled, but this provides extra security)\n  autorotate: (autorotate, { renderMode }) => ({\n    autorotate: autorotate && renderMode !== RenderMode.pathTrace,\n  }),\n};\n\nexport const validateStateValue = <K extends keyof ViewerState>(\n  currentState: ViewerState,\n  key: K,\n  value: Partial<ViewerState[K]>\n): Partial<ViewerState> => {\n  const changeHandler = VIEWER_SETTINGS_CHANGE_HANDLERS[key];\n\n  if (changeHandler) {\n    // some settings have custom change handlers to avoid creating illegal states; if this one has one, call it\n    return changeHandler(value, currentState);\n  } else {\n    // if not, merge the new value to the current one (if applicable) and return\n    const currentValue = currentState[key];\n    const nextValue = isRecord(currentValue) && isRecord(value) ? { ...currentValue, ...value } : value;\n    return { [key]: nextValue };\n  }\n};\n\nexport const validateState = (\n  currentState: ViewerState,\n  newState: Partial<{ [K in keyof ViewerState]: Partial<ViewerState[K]> }>\n): Partial<ViewerState> => {\n  const validated = {};\n\n  for (const key of Object.keys(newState) as (keyof ViewerState)[]) {\n    Object.assign(validated, validateStateValue(currentState, key, newState[key]));\n  }\n\n  return validated;\n};\n","import type { StateCreator } from \"zustand\";\n\nimport { ChannelState, ViewerState } from \"../components/ViewerStateProvider/types\";\nimport {\n  getDefaultCameraState,\n  getDefaultChannelColor,\n  getDefaultChannelState,\n  getDefaultViewerState,\n} from \"../shared/constants\";\nimport { ViewMode } from \"../shared/enums\";\nimport { ViewerChannelSettings } from \"../shared/utils/viewerChannelSettings\";\nimport { getEnabledChannelIndices, initializeOneChannelSetting } from \"../shared/utils/viewerState\";\nimport { ViewerStore } from \"./store\";\nimport { validateState } from \"./util\";\n\n// TODO move to types?\nexport type ResetStateActions = {\n  /**\n   * Removes the channel from the list of channels to be reset (as given by\n   * `getChannelsAwaitingReset()` or `getChannelsAwaitingResetOnLoad()`).\n   */\n  onResetChannel: (channelIndex: number) => void;\n\n  /**\n   * Resets the viewer and all channels to a saved initial state, determined\n   * by viewer props.\n   */\n  resetToSavedViewerState: (savedState?: Partial<ViewerState>, viewerChannelSettings?: ViewerChannelSettings) => void;\n  /**\n   * Resets the viewer and all channels to the default state, as though\n   * loaded from scratch with no initial parameters set.\n   * Uses the default channel settings as given by `getDefaultViewerChannelSettings()`.\n   */\n  resetToDefaultViewerState: () => void;\n};\n\nexport type ResetState = {\n  useDefaultViewerChannelSettings: boolean;\n  channelsToReset: number[];\n  channelsToResetOnLoad: number[];\n};\n\nexport type ResetStateSlice = ResetStateActions & ResetState;\n\nconst resetState = (\n  currentState: ViewerState & { channelSettings: ChannelState[] },\n  newState: ViewerState,\n  newChannelStates: ChannelState[]\n): ViewerState & Partial<ResetState> & { channelSettings: ChannelState[] } => {\n  const { channelSettings, viewMode, time, slice, scene } = currentState;\n\n  // Needs reset on reload if one of the view modes is 2D while the other is 3D,\n  // if the timestamp is different, or if we're on a different z slice.\n  // TODO: Handle stopping playback? Requires playback to be part of ViewerStateContext\n  const isInDifferentViewMode =\n    viewMode !== newState.viewMode && (viewMode === ViewMode.xy || newState.viewMode === ViewMode.xy);\n  const isAtDifferentTime = time !== newState.time;\n  const isAtDifferentZSlice = newState.viewMode === ViewMode.xy && !(newState.slice.z === slice.z);\n  const isAtDifferentScene = newState.scene !== scene;\n  const willNeedResetOnLoad = isInDifferentViewMode || isAtDifferentTime || isAtDifferentZSlice || isAtDifferentScene;\n\n  const viewerState = validateState(currentState, newState);\n  // Match the names in the new state with the existing state so we do not override the names.\n  // Also don't reset the control points or ramps, since these will be reset in the app.\n  const channelState = newChannelStates.map((state, index) => ({\n    ...state,\n    name: channelSettings[index].name,\n    controlPoints: channelSettings[index].controlPoints,\n    ramp: channelSettings[index].ramp,\n  }));\n\n  let channelsToReset = [...Array(newChannelStates.length).keys()];\n  let channelsToResetOnLoad: number[] = [];\n  if (willNeedResetOnLoad) {\n    channelsToResetOnLoad = getEnabledChannelIndices(newChannelStates);\n    channelsToReset = channelsToReset.filter((ch) => !channelsToResetOnLoad.includes(ch));\n  }\n\n  return {\n    ...(viewerState as ViewerState),\n    channelSettings: channelState,\n    channelsToReset,\n    channelsToResetOnLoad,\n  };\n};\n\nexport const createResetSlice: StateCreator<ViewerStore, [], [], ResetStateSlice> = (set) => ({\n  channelsToReset: [],\n  channelsToResetOnLoad: [],\n  savedViewerChannelSettings: undefined,\n  useDefaultViewerChannelSettings: false,\n\n  onResetChannel: (channelIndex) => {\n    set(({ channelsToReset, channelsToResetOnLoad }) => ({\n      channelsToReset: channelsToReset.filter((ch) => ch !== channelIndex),\n      channelsToResetOnLoad: channelsToResetOnLoad.filter((ch) => ch !== channelIndex),\n    }));\n  },\n\n  resetToSavedViewerState: (savedState?: Partial<ViewerState>, viewerChannelSettings?: ViewerChannelSettings) => {\n    set((currentState) => {\n      const { channelSettings } = currentState;\n      const newViewerState = {\n        ...getDefaultViewerState(),\n        cameraState: getDefaultCameraState(savedState?.viewMode ?? ViewMode.threeD),\n        ...savedState,\n      };\n      const newChannelSettings = channelSettings.map((_, index) => {\n        return initializeOneChannelSetting(\n          channelSettings[index].name,\n          index,\n          getDefaultChannelColor(index),\n          viewerChannelSettings\n        );\n      });\n\n      return {\n        ...resetState(currentState, newViewerState, newChannelSettings),\n        useDefaultViewerChannelSettings: true,\n      };\n    });\n  },\n\n  resetToDefaultViewerState: () => {\n    set((currentState) => {\n      const { channelSettings } = currentState;\n      const defaultViewerState = {\n        ...getDefaultViewerState(),\n        cameraState: getDefaultCameraState(ViewMode.threeD),\n      };\n      const defaultChannelStates = channelSettings.map((_, index) => {\n        const defaultState = getDefaultChannelState(index);\n        defaultState.volumeEnabled = index < 3;\n        return defaultState;\n      });\n\n      return {\n        ...resetState(currentState, defaultViewerState, defaultChannelStates),\n        useDefaultViewerChannelSettings: true,\n      };\n    });\n  },\n});\n","import { create, type StateCreator } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nimport { ChannelState, ViewerState } from \"../components/ViewerStateProvider/types\";\nimport { getDefaultViewerState } from \"../shared/constants\";\nimport { ColorArray } from \"../shared/utils/colorRepresentations\";\nimport { createResetSlice, ResetStateSlice } from \"./reset\";\nimport { validateState, validateStateValue } from \"./util\";\n\ntype ViewerStateActions = {\n  changeViewerSetting: <K extends keyof ViewerState>(key: K, value: Partial<ViewerState[K]>) => void;\n  mergeViewerSettings: (value: Partial<{ [K in keyof ViewerState]: Partial<ViewerState[K]> }>) => void;\n  changeChannelSetting: <K extends keyof ChannelState>(\n    index: number | number[],\n    value: Partial<Record<K, ChannelState[K]>>\n  ) => void;\n  initChannelSettings: (channelSettings: ChannelState[]) => void;\n  applyColorPresets: (colors: ColorArray[]) => void;\n};\n\nexport type ViewerStore = ViewerState &\n  ViewerStateActions &\n  ResetStateSlice & {\n    channelSettings: ChannelState[];\n  };\n\nconst createViewerStateStore: StateCreator<ViewerStore> = (set, ...etc) => ({\n  ...createResetSlice(set, ...etc),\n  ...getDefaultViewerState(),\n  channelSettings: [],\n\n  changeViewerSetting: (key, value) => set((state) => validateStateValue(state, key, value)),\n\n  mergeViewerSettings: (settings): void => set((state) => validateState(state, settings)),\n\n  changeChannelSetting: (index, value) => {\n    set(({ channelSettings }) => ({\n      channelSettings: channelSettings.map((channel, channelIndex) => {\n        const changeThisChannel = Array.isArray(index) ? index.includes(channelIndex) : index === channelIndex;\n        return changeThisChannel ? { ...channel, ...value } : channel;\n      }),\n    }));\n  },\n\n  initChannelSettings: (channelSettings) => set({ channelSettings }),\n\n  applyColorPresets: (colors) => {\n    set(({ channelSettings }) => ({\n      channelSettings: channelSettings.map((channel, channelIndex) => ({\n        ...channel,\n        color: colors[channelIndex % colors.length],\n      })),\n    }));\n  },\n});\n\nexport const useViewerState = create<ViewerStore>()(subscribeWithSelector(createViewerStateStore));\n\nexport const selectViewerSettings = (store: ViewerStore): ViewerState => ({\n  viewMode: store.viewMode,\n  renderMode: store.renderMode,\n  imageType: store.imageType,\n  showAxes: store.showAxes,\n  showBoundingBox: store.showBoundingBox,\n  boundingBoxColor: store.boundingBoxColor,\n  backgroundColor: store.backgroundColor,\n  autorotate: store.autorotate,\n  maskAlpha: store.maskAlpha,\n  brightness: store.brightness,\n  density: store.density,\n  levels: store.levels,\n  interpolationEnabled: store.interpolationEnabled,\n  region: store.region,\n  slice: store.slice,\n  time: store.time,\n  scene: store.scene,\n  cameraState: store.cameraState,\n});\n\n/**\n * A small boilerplate-reducer for subscribing to a single state value with `useViewerStore`.\n * Should only be used with string literals for best type-checking results.\n */\nexport const select = <K extends string>(key: K) => {\n  return <V>(settings: Record<K, V>) => settings[key];\n};\n","import { Channel, ControlPoint, Histogram, Lut, remapControlPoints, Volume } from \"@aics/vole-core\";\n\nimport { LUT_MAX_PERCENTILE, LUT_MIN_PERCENTILE, TFEDITOR_DEFAULT_COLOR, TFEDITOR_MAX_BIN } from \"../constants\";\nimport { findFirstChannelMatch, ViewerChannelSetting, ViewerChannelSettings } from \"./viewerChannelSettings\";\n\n// @param {Object[]} controlPoints - array of {x:number, opacity:number, color:string}\n// @return {Uint8Array} array of length 256*4 representing the rgba values of the gradient\nexport function controlPointsToLut(controlPoints: ControlPoint[]): Lut {\n  const lut = new Lut().createFromControlPoints(controlPoints);\n  return lut;\n}\n\n/** Returns a default lookup table based on a min/max percentile of the current volume's data. */\nexport function getDefaultLut(histogram: Histogram): Lut {\n  const hmin = histogram.findBinOfPercentile(LUT_MIN_PERCENTILE);\n  const hmax = histogram.findBinOfPercentile(LUT_MAX_PERCENTILE);\n  return new Lut().createFromMinMax(hmin, hmax);\n}\n\n/**\n * Parses a single LUT value from a string, where the value is either a number, a percentile, or a median multiplier.\n */\nfunction parseLutValue(value: string, histogram: Histogram): number {\n  // look at first char of string.\n  const firstChar = value.charAt(0);\n  if (firstChar === \"m\") {\n    // median\n    const parsedValue = parseFloat(value.substring(1)) / 100.0;\n    return histogram.maxBin * parsedValue;\n  } else if (firstChar === \"p\") {\n    // percentile\n    const parsedValue = parseFloat(value.substring(1)) / 100.0;\n    return histogram.findBinOfPercentile(parsedValue);\n  } else if (firstChar === \"v\") {\n    // value\n    const parsedValue = parseFloat(value.substring(1));\n    return histogram.findFractionalBinOfValue(parsedValue);\n  } else {\n    // plain number\n    return parseFloat(value);\n  }\n}\n\n/**\n * Parses a lookup table (LUT) from a `ViewerChannelSetting` object, where the\n * `lut` field is an array of two alphanumeric strings.\n *\n * @returns a Lut object if the `lut` field is valid; otherwise, returns\n * undefined.\n *\n * Min and max values are determined as following:\n * - Plain numbers are indices of histogram bins, typically in the range [0,\n *   255].\n * - `v{n}` represents a raw intensity value, where `n` is a number.\n * - `p{n}` represents a percentile, where `n` is a percentile in the [0, 100]\n *   range.\n * - `m{n}` represents the median multiplied by `n / 100`.\n * - `autoij` in either the min or max fields will use the \"auto\" algorithm from\n *   ImageJ to select the min and max.\n *\n * @example\n * ```\n * \"0:255\"    // min: bin 0, max: bin 255.\n * \"v100:v150\" // min: intensity 100, max: intensity 150.\n * \"p50:p90\"  // min: 50th percentile, max: 90th percentile.\n * \"m1:p75\"   // min: median, max: 75th percentile.\n * \"autoij:0\" // use Auto-IJ to calculate min and max.\n * ```\n */\nexport function parseLutFromSettings(histogram: Histogram, initSettings: ViewerChannelSetting): Lut | undefined {\n  // TODO: Consider minimizing the types/classes this function is interacting\n  // with, since it is only using `initSettings.lut` and the returned Lut is a\n  // wrapper around the control point array, e.g.\n  // `parseControlPointsFromLutParam(histogram: Histogram, lutParam: [string,\n  // string] | undefined): ControlPoint[] | undefined`\n  if (initSettings.lut === undefined || initSettings.lut.length !== 2) {\n    return undefined;\n  }\n\n  let lutValues: [number, number];\n  if (initSettings.lut[0] === \"autoij\" || initSettings.lut[1] === \"autoij\") {\n    lutValues = histogram.findAutoIJBins();\n  } else {\n    lutValues = [parseLutValue(initSettings.lut[0], histogram), parseLutValue(initSettings.lut[1], histogram)];\n  }\n  if (!Number.isFinite(lutValues[0]) || !Number.isFinite(lutValues[1])) {\n    return undefined;\n  }\n  const sortedLutValues = [Math.min(lutValues[0], lutValues[1]), Math.max(lutValues[0], lutValues[1])];\n  const controlPoints = [\n    {\n      x: sortedLutValues[0],\n      opacity: 0,\n      color: TFEDITOR_DEFAULT_COLOR,\n    },\n    {\n      x: sortedLutValues[1],\n      opacity: 1,\n      color: TFEDITOR_DEFAULT_COLOR,\n    },\n  ];\n  // Create directly from control points instead of using\n  // `Lut.createFromMinMax()` because it applies clamping to the [0, 255] range.\n  return new Lut().createFromControlPoints(controlPoints);\n}\n\n/**\n * Initializes the lookup table (LUT) that maps from volume intensity values to color + opacity and applies the LUT to the volume.\n *\n * @param aimg The loaded volume data.\n * @param channelIndex The index of the channel to initialize the LUT for.\n * @param channelSettings The ViewerChannelSettings object that may contain settings for this channel. If relevant\n * settings are not found, a default LUT will be used.\n * @returns an object containing the retrieved ramp control points and \"advanced mode\" control points.\n *\n * LUT values will be determined using the following rules:\n * - If no `lut` is provided in the `channelSettings`, a default LUT is calculated using min/max percentiles of the data.\n * - Otherwise, `lut` will be parsed as described in `ViewerChannelSettingParams.lut`.\n * - The `controlPoints` and `ramp` fields in the `channelSettings` will be used to override the returned \"advanced mode\"\n * control points and ramp, respectively.\n *\n * If `controlPointsEnabled` is set to true in the `channelSettings`, the \"advanced mode\" control points will be applied\n * to the volume; otherwise, the ramp will be applied.\n */\nexport function initializeLut(\n  aimg: Volume,\n  channelIndex: number,\n  channelSettings?: ViewerChannelSettings\n): { ramp: ControlPoint[]; controlPoints: ControlPoint[] } {\n  const histogram = aimg.getHistogram(channelIndex);\n  const defaultLut = getDefaultLut(histogram);\n\n  let ramp: ControlPoint[] = [];\n  let controlPoints: ControlPoint[] = [];\n  let lut = defaultLut;\n\n  const name = aimg.channelNames[channelIndex];\n  const initSettings = channelSettings && findFirstChannelMatch(name, channelIndex, channelSettings);\n\n  // Attempt to load a LUT from the settings, which will be used to initialize the control points and ramp\n  if (initSettings && initSettings.lut) {\n    lut = parseLutFromSettings(histogram, initSettings) ?? defaultLut;\n  }\n  // Initialize the control points + ramp using the LUT.\n  // Optionally, override the LUT's control points with the provided control points and/or ramp.\n  controlPoints = initSettings?.controlPoints ?? [...lut.controlPoints];\n  ramp = initSettings?.ramp ? rampToControlPoints(initSettings.ramp) : [...lut.controlPoints];\n\n  // Apply whatever lut is currently visible\n  let visibleLut: Lut;\n  if (initSettings?.controlPointsEnabled) {\n    visibleLut = new Lut().createFromControlPoints(controlPoints);\n  } else {\n    visibleLut = new Lut().createFromControlPoints(ramp);\n  }\n\n  aimg.setLut(channelIndex, visibleLut);\n  return { ramp, controlPoints };\n}\n\nexport function controlPointsToRamp(controlPoints: ControlPoint[]): [number, number] {\n  if (controlPoints.length <= 1) {\n    return [0, TFEDITOR_MAX_BIN];\n  } else if (controlPoints.length === 2) {\n    return [controlPoints[0].x, controlPoints[1].x];\n  } else if (controlPoints.length === 3) {\n    if (\n      controlPoints[0].opacity !== controlPoints[1].opacity &&\n      controlPoints[0].opacity !== controlPoints[2].opacity &&\n      controlPoints[1].opacity !== controlPoints[2].opacity\n    ) {\n      // if all 3 are unequal, assume a ramp from first to last\n      return [controlPoints[0].x, controlPoints[2].x];\n    } else if (controlPoints[0].opacity !== controlPoints[1].opacity) {\n      return [controlPoints[0].x, controlPoints[1].x];\n    } else if (controlPoints[1].opacity !== controlPoints[2].opacity) {\n      return [controlPoints[1].x, controlPoints[2].x];\n    }\n  }\n  return [controlPoints[1].x, controlPoints[controlPoints.length - 2].x];\n}\n\nexport function rampToControlPoints([min, max]: [number, number]): ControlPoint[] {\n  return [\n    { x: Math.min(min - 1, 0), opacity: 0, color: TFEDITOR_DEFAULT_COLOR },\n    { x: min, opacity: 0, color: TFEDITOR_DEFAULT_COLOR },\n    { x: max, opacity: 1, color: TFEDITOR_DEFAULT_COLOR },\n    { x: Math.max(max + 1, TFEDITOR_MAX_BIN), opacity: 1, color: TFEDITOR_DEFAULT_COLOR },\n  ];\n}\n\n/** Remaps an array of control points from an old range (as a 2-tuple) to a new one (extracted from a `Channel`) */\nexport function remapControlPointsForChannel(\n  controlPoints: ControlPoint[],\n  oldRange: [number, number] | undefined,\n  { rawMin, rawMax }: Channel\n): ControlPoint[] {\n  if (oldRange === undefined) {\n    return controlPoints;\n  }\n\n  return remapControlPoints(controlPoints, oldRange[0], oldRange[1], rawMin, rawMax);\n}\n","import { MutableRefObject, useCallback, useRef } from \"react\";\n\n/**\n * Wraps a setter function and keeps a ref updated to follow the set value. Useful for making the most up-to-date value\n * of some state accessible to a closure that might be called after the value is updated.\n */\n// TODO should this replace `useStateWithGetter`?\nexport function useRefWithSetter<T>(setter: (value: T) => void): [MutableRefObject<T | undefined>, (value: T) => void];\nexport function useRefWithSetter<T>(setter: (value: T) => void, init: T): [MutableRefObject<T>, (value: T) => void];\nexport function useRefWithSetter<T>(\n  setter: (value: T) => void,\n  init?: T\n): [MutableRefObject<T | undefined>, (value: T) => void] {\n  const value = useRef<T | undefined>(init);\n  const wrappedSetter = useCallback(\n    (newValue: T) => {\n      value.current = newValue;\n      setter(newValue);\n    },\n    [setter, value]\n  );\n  return [value, wrappedSetter];\n}\n\n/**\n * For objects which are persistent for the lifetime of the component, not\n * a member of state, and require a constructor to create. Wraps `useRef`.\n */\nexport function useConstructor<T>(constructor: () => T): T {\n  const value = useRef<T | null>(null);\n  if (value.current === null) {\n    value.current = constructor();\n  }\n  return value.current;\n}\n","import { CSSProperties } from \"react\";\n\nimport { ViewMode } from \"./enums\";\n\nexport type AxisName = \"x\" | \"y\" | \"z\";\nexport type PerAxis<T> = Record<AxisName, T>;\nexport const activeAxisMap: { [A in ViewMode]: AxisName | null } = {\n  [ViewMode.yz]: \"x\",\n  [ViewMode.xz]: \"y\",\n  [ViewMode.xy]: \"z\",\n  [ViewMode.threeD]: null,\n};\n\nexport type IsosurfaceFormat = \"GLTF\" | \"STL\";\n\nexport type Styles = { [key: string]: CSSProperties };\n\nexport type MetadataEntry = string | number | boolean | MetadataRecord | MetadataEntry[] | null | undefined;\nexport type MetadataRecord = { [key: string]: MetadataEntry };\n","export type ColorObject = { r: number; g: number; b: number };\nexport type ColorArray = [number, number, number];\n\nexport const colorObjectToArray = (obj: ColorObject): ColorArray => [obj.r, obj.g, obj.b];\n\nexport const colorArrayToObject = (arr: ColorArray): ColorObject => ({ r: arr[0], g: arr[1], b: arr[2] });\n\nexport const colorArrayToFloats = (arr: ColorArray): ColorArray => [arr[0] / 255, arr[1] / 255, arr[2] / 255];\n\nexport const colorArrayToString = (arr: ColorArray): string => `rgb(${arr[0]}, ${arr[1]}, ${arr[2]})`;\n","import { RENDERMODE_PATHTRACE, RENDERMODE_RAYMARCH, View3d, Volume } from \"@aics/vole-core\";\nimport { shallow } from \"zustand/shallow\";\n\nimport { RenderMode, ViewMode } from \"../shared/enums\";\nimport { activeAxisMap, type AxisName } from \"../shared/types\";\nimport { colorArrayToFloats } from \"../shared/utils/colorRepresentations\";\nimport {\n  alphaSliderToImageValue,\n  brightnessSliderToImageValue,\n  densitySliderToImageValue,\n  gammaSliderToImageValues,\n} from \"../shared/utils/sliderValuesToImageValues\";\nimport { select, type useViewerState, type ViewerStore } from \"./store\";\n\nconst REF_EQ = { fireImmediately: true };\nconst DEEP_EQ = { fireImmediately: true, equalityFn: shallow };\n\nexport const subscribeViewToState = (store: typeof useViewerState, view3d: View3d): (() => void) => {\n  const unsubscribers = [\n    // view mode\n    store.subscribe(\n      select(\"viewMode\"),\n      (viewMode) => {\n        view3d.setCameraMode(viewMode);\n        view3d.resize(null);\n      },\n      REF_EQ\n    ),\n\n    // camera state\n    store.subscribe(\n      select(\"cameraState\"),\n      (cameraState) => {\n        if (cameraState) {\n          view3d.setCameraState(cameraState);\n        }\n      },\n      DEEP_EQ\n    ),\n\n    // autorotate\n    store.subscribe(select(\"autorotate\"), view3d.setAutoRotate.bind(view3d), REF_EQ),\n\n    // show axes\n    store.subscribe(select(\"showAxes\"), view3d.setShowAxis.bind(view3d), REF_EQ),\n\n    // background color\n    store.subscribe(\n      select(\"backgroundColor\"),\n      (backgroundColor) => view3d.setBackgroundColor(colorArrayToFloats(backgroundColor)),\n      REF_EQ\n    ),\n\n    // brightness\n    store.subscribe(\n      select(\"brightness\"),\n      (brightness) => {\n        view3d.updateExposure(brightnessSliderToImageValue(brightness));\n      },\n      REF_EQ\n    ),\n  ];\n\n  return () => unsubscribers.forEach((unsubscribe) => unsubscribe());\n};\n\ntype AxisClipUpdateInfo = {\n  region: [number, number];\n  slice: number;\n  viewMode: ViewMode;\n};\n\nconst selectAxisClipUpdateInfo = (axis: AxisName): ((store: ViewerStore) => AxisClipUpdateInfo) => {\n  return ({ region, slice, viewMode }) => ({ region: region[axis], slice: slice[axis], viewMode });\n};\n\nexport const subscribeImageToState = (store: typeof useViewerState, view3d: View3d, image: Volume): (() => void) => {\n  const axisClipUpdater = (axis: AxisName) => {\n    return ({ region: [minval, maxval], slice, viewMode }: AxisClipUpdateInfo) => {\n      let isOrthoAxis = false;\n      let axismin = 0.0;\n      let axismax = 1.0;\n      if (viewMode === ViewMode.threeD) {\n        // 3d mode: just use the region from state\n        axismin = minval;\n        axismax = maxval;\n      } else {\n        // 2d mode: if this is the looked-down axis...\n        if (activeAxisMap[viewMode] === axis) {\n          // ...show a one-slice region around `slice`\n          const oneSlice = 1 / image.imageInfo.volumeSize[axis];\n          axismin = slice;\n          axismax = slice + oneSlice;\n        } else {\n          // ...otherwise, reset to [0, 1] - we probably just changed `viewMode` to 2d and want to see the whole slice\n          axismin = 0.0;\n          axismax = 1.0;\n        }\n\n        // also, \"look down z\" has a special mode with its own special setting\n        if (axis === \"z\" && viewMode === ViewMode.xy) {\n          view3d.setZSlice(image, Math.floor(slice * image.imageInfo.volumeSize.z));\n        }\n      }\n\n      // view3d wants the coordinates in the -0.5 to 0.5 range\n      view3d.setAxisClip(image, axis, axismin - 0.5, axismax - 0.5, isOrthoAxis);\n      // TODO necessary?\n      // view3d.setCameraMode(viewMode);\n      // TODO under some circumstances, this effect will trigger a load. Ideally, this would be reflected in the load\n      //   state managed by `useVolume`. This is complicated by the fact that the relevant methods (`setAxisClip` and\n      //   `setZSlice`) don't provide a channel load callback like other load-triggering methods (e.g. `setTime`).\n    };\n  };\n\n  const unsubscribers = [\n    // show bounding box\n    store.subscribe(\n      select(\"showBoundingBox\"),\n      (showBoundingBox) => view3d.setShowBoundingBox(image, showBoundingBox),\n      REF_EQ\n    ),\n\n    // bounding box color\n    store.subscribe(\n      select(\"boundingBoxColor\"),\n      (boundingBoxColor) => view3d.setBoundingBoxColor(image, boundingBoxColor),\n      REF_EQ\n    ),\n\n    // render mode\n    store.subscribe(\n      select(\"renderMode\"),\n      (renderMode) => {\n        view3d.setMaxProjectMode(image, renderMode === RenderMode.maxProject);\n        view3d.setVolumeRenderMode(renderMode === RenderMode.pathTrace ? RENDERMODE_PATHTRACE : RENDERMODE_RAYMARCH);\n        view3d.updateActiveChannels(image);\n      },\n      REF_EQ\n    ),\n\n    // mask alpha\n    store.subscribe(\n      select(\"maskAlpha\"),\n      (maskAlpha) => {\n        view3d.updateMaskAlpha(image, alphaSliderToImageValue(maskAlpha));\n        view3d.updateActiveChannels(image);\n      },\n      REF_EQ\n    ),\n\n    // density\n    store.subscribe(\n      select(\"density\"),\n      (density) => view3d.updateDensity(image, densitySliderToImageValue(density)),\n      REF_EQ\n    ),\n\n    // gamma\n    store.subscribe(\n      select(\"levels\"),\n      (levels) => {\n        const { min, max, scale } = gammaSliderToImageValues(levels);\n        view3d.setGamma(image, min, max, scale);\n      },\n      REF_EQ\n    ),\n\n    // interpolation\n    store.subscribe(\n      select(\"interpolationEnabled\"),\n      (enabled) => view3d.setInterpolationEnabled(image, enabled),\n      REF_EQ\n    ),\n\n    // clipping\n    store.subscribe(selectAxisClipUpdateInfo(\"x\"), axisClipUpdater(\"x\"), DEEP_EQ),\n    store.subscribe(selectAxisClipUpdateInfo(\"y\"), axisClipUpdater(\"y\"), DEEP_EQ),\n    store.subscribe(selectAxisClipUpdateInfo(\"z\"), axisClipUpdater(\"z\"), DEEP_EQ),\n\n    // TODO reset channels, time, scene?\n  ];\n\n  return () => unsubscribers.forEach((unsubscribe) => unsubscribe());\n};\n","type ImageValues = {\n  min: number;\n  max: number;\n  scale: number;\n};\n\nexport const gammaSliderToImageValues = (sliderValues: [number, number, number]): ImageValues => {\n  let min = Number(sliderValues[0]);\n  let mid = Number(sliderValues[1]);\n  let max = Number(sliderValues[2]);\n\n  if (mid > max || mid < min) {\n    mid = 0.5 * (min + max);\n  }\n  let div = 255;\n  min /= div;\n  max /= div;\n  mid /= div;\n  let diff = max - min;\n  let x = (mid - min) / diff;\n  let scale = 4 * x * x;\n  if ((mid - 0.5) * (mid - 0.5) < 0.0005) {\n    scale = 1.0;\n  }\n  return {\n    min,\n    max,\n    scale,\n  };\n};\n\n// Density and brightness were once overloaded for the two rendering modes in the volume viewer (raymarch & pathtrace).\n// Now both work the same, and the mapping from slider values to numbers in vole-core is relatively straightforward.\n// But the mapping can still be tweaked here in the future, should we want to.\n\n/** vole-core expects a value from 0..1 for density. */\nexport const densitySliderToImageValue = (sliderValue: number): number => sliderValue / 100.0;\n\n/** vole-core expects a value from 0..1 for brigness. */\nexport const brightnessSliderToImageValue = (sliderValue: number): number => sliderValue / 100.0;\n\n/** vole-core expects a value from 0..1 for alpha, and its scale is inverted from the app's slider. */\nexport const alphaSliderToImageValue = (sliderValue: number): number => 1 - sliderValue / 100.0;\n","import { AxisName } from \"../types\";\n\ntype PlayAxisName = AxisName | \"t\";\n\nconst PLAY_STEP_INTERVAL_MS = 125;\n\nexport default class PlayControls {\n  playingAxis: PlayAxisName | null = null;\n  playWaitingForLoad = false;\n  playHolding = false;\n  playTimeoutId = 0;\n\n  public getVolumeIsLoaded?: () => boolean;\n  public stepAxis?: (axis: PlayAxisName) => void;\n  public onPlayingAxisChanged?: (axis: PlayAxisName | null) => void;\n\n  private setPlayingAxis(axis: PlayAxisName | null): void {\n    this.playingAxis = axis;\n    this.onPlayingAxisChanged?.(axis);\n  }\n\n  private playStep(): void {\n    if (!this.playingAxis || this.playHolding || !this.stepAxis) {\n      return;\n    }\n    // If the volume is not loaded, wait for it to load before continuing\n    if (!this.getVolumeIsLoaded?.()) {\n      this.playWaitingForLoad = true;\n      return;\n    }\n\n    this.stepAxis(this.playingAxis);\n    this.playTimeoutId = window.setTimeout(this.playStep.bind(this), PLAY_STEP_INTERVAL_MS);\n  }\n\n  /** Call whenever new data is loaded to resume playback if it was paused for data loading. */\n  onImageLoaded(): void {\n    if (this.playWaitingForLoad) {\n      this.playWaitingForLoad = false;\n      this.playStep();\n    }\n  }\n\n  /**\n   * Pause playback on the currently playing axis.\n   * `willResume` marks this as a temporary suspension, e.g. while the user is scrubbing along the playing axis.\n   */\n  pause(willResume: boolean = false): void {\n    window.clearTimeout(this.playTimeoutId);\n    this.playTimeoutId = 0;\n    this.playWaitingForLoad = false;\n    if (this.playingAxis !== null && !willResume) {\n      this.playHolding = false;\n      this.setPlayingAxis(null);\n    }\n  }\n\n  /** Begin playback on `axis`. */\n  play(axis: PlayAxisName): void {\n    if (this.playingAxis !== null) {\n      this.pause(true);\n    }\n    this.setPlayingAxis(axis);\n    this.playStep();\n  }\n\n  /** If `axis` is currently playing, begin a temporary hold on playback while other input is pending. */\n  startHold(axis: PlayAxisName): void {\n    this.playHolding = true;\n    this.pause(axis === this.playingAxis);\n  }\n\n  /** If a playback hold is active, end it. */\n  endHold(): void {\n    if (this.playHolding) {\n      this.playHolding = false;\n      this.playStep();\n    }\n  }\n}\n","import {\n  CreateLoaderOptions,\n  LoadSpec,\n  PerChannelCallback,\n  PrefetchDirection,\n  RawArrayLoaderOptions,\n  Volume,\n  VolumeFileFormat,\n  VolumeLoaderContext,\n} from \"@aics/vole-core\";\nimport { ThreadableVolumeLoader } from \"@aics/vole-core/es/types/loaders/IVolumeLoader\";\n\nexport default class SceneStore {\n  context: VolumeLoaderContext;\n  loaders: (ThreadableVolumeLoader | undefined)[];\n  paths: (string | string[] | RawArrayLoaderOptions)[];\n  currentScene: number = 0;\n  syncChannels: boolean = false;\n  prefetchPriority: PrefetchDirection[] = [];\n\n  constructor(context: VolumeLoaderContext, paths: (string | string[] | RawArrayLoaderOptions)[]) {\n    this.paths = paths;\n    this.context = context;\n    this.loaders = new Array(paths.length).fill(undefined);\n  }\n\n  /** Get the loader associated with the given scene index, or create it if it doesn't exist */\n  private async getLoader(scene: number): Promise<ThreadableVolumeLoader> {\n    this.currentScene = scene;\n    let loader = this.loaders[scene];\n\n    if (!loader) {\n      let path = this.paths[scene];\n      let options: Partial<CreateLoaderOptions> = {};\n      if (typeof path === \"object\" && !Array.isArray(path)) {\n        options.rawArrayOptions = path;\n        options.fileType = VolumeFileFormat.DATA;\n        path = \"\";\n      }\n\n      await this.context.onOpen();\n      loader = await this.context.createLoader(path, options);\n      this.loaders[scene] = loader;\n    }\n\n    loader.syncMultichannelLoading(this.syncChannels);\n    loader.setPrefetchPriority(this.prefetchPriority);\n    return loader;\n  }\n\n  public async loadScene(\n    scene: number,\n    image: Volume,\n    loadSpec?: LoadSpec,\n    onChannelLoaded?: PerChannelCallback\n  ): Promise<void> {\n    const loader = await this.getLoader(scene);\n    const spec = loadSpec ?? image.loadSpecRequired;\n\n    image.loader = loader;\n    image.imageInfo.imageInfo = (await loader.createImageInfo(spec)).imageInfo;\n    loader.loadVolumeData(image, spec, onChannelLoaded);\n  }\n\n  public async createVolume(scene: number, loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume> {\n    const loader = await this.getLoader(scene);\n    return loader.createVolume(loadSpec, onChannelLoaded);\n  }\n\n  public syncMultichannelLoading(sync: boolean): void {\n    this.syncChannels = sync;\n    const currentLoader = this.loaders[this.currentScene];\n    if (currentLoader) {\n      currentLoader.syncMultichannelLoading(sync);\n    }\n  }\n\n  public setPrefetchPriority(priority: PrefetchDirection[]): void {\n    this.prefetchPriority = priority;\n    const currentLoader = this.loaders[this.currentScene];\n    if (currentLoader) {\n      currentLoader.setPrefetchPriority(priority);\n    }\n  }\n}\n","import { LoadSpec, RawArrayLoaderOptions, View3d, Volume, VolumeLoaderContext } from \"@aics/vole-core\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Box3, Vector3 } from \"three\";\n\nimport {\n  AXIS_TO_LOADER_PRIORITY,\n  CACHE_MAX_SIZE,\n  getDefaultChannelColor,\n  getDefaultViewerChannelSettings,\n  QUEUE_MAX_LOW_PRIORITY_SIZE,\n  QUEUE_MAX_SIZE,\n} from \"../shared/constants\";\nimport { ViewMode } from \"../shared/enums\";\nimport { AxisName } from \"../shared/types\";\nimport { useConstructor, useRefWithSetter } from \"../shared/utils/hooks\";\nimport PlayControls from \"../shared/utils/playControls\";\nimport SceneStore from \"../shared/utils/sceneStore\";\nimport {\n  ChannelGrouping,\n  getDisplayName,\n  makeChannelIndexGrouping,\n  ViewerChannelSettings,\n} from \"../shared/utils/viewerChannelSettings\";\nimport { initializeOneChannelSetting } from \"../shared/utils/viewerState\";\nimport { select, useViewerState } from \"../state/store\";\nimport { ChannelState } from \"./ViewerStateProvider/types\";\n\nexport type UseVolumeOptions = {\n  viewerChannelSettings?: ViewerChannelSettings;\n  /** Callback for when the volume is created. */\n  onCreateImage?: (image: Volume) => void;\n  /** Callback for when a single channel of the volume has loaded. */\n  onChannelLoaded?: (image: Volume, channelIndex: number, isInitialLoad: boolean) => void;\n  /** Callback for when image loading encounters an error. */\n  onError?: (error: unknown) => void;\n  /** The name of a channel which should be treated as a mask rather than as viewable data. */\n  maskChannelName?: string;\n};\n\nexport const enum ImageLoadStatus {\n  REQUESTED,\n  LOADING,\n  LOADED,\n  ERROR,\n}\n\n// Used by `channelVersions` (see below)\nconst CHANNEL_INITIAL_LOAD = -1;\nconst CHANNEL_RELOAD = 0;\n\nexport type ReactiveVolume = {\n  image: Volume | null;\n  /**\n   * Indicates the load status of each channel:\n   *\n   * - `-1` indicates the channel has not yet loaded and will get some extra initialization (e.g. LUTs) when it loads.\n   * - `0` indicates the channel has been loaded once, but is currently waiting for new data.\n   * - `1` or greater indicates the channel is loaded. Note this is not exactly `1` to handle multiple simultaneous\n   *   loads; if multiple loads are issued before the first one completes, _incrementing_ rather than _setting_ the\n   *   version number means we react to each load when it completes, rather than just the first.\n   */\n  channelVersions: number[];\n  imageLoadStatus: ImageLoadStatus;\n  setTime: (view3d: View3d, time: number) => void;\n  setScene: (scene: number) => void;\n  playControls: PlayControls;\n  playingAxis: AxisName | \"t\" | null;\n  channelGroupedByType: ChannelGrouping;\n};\n\n/**\n * Temporary hack while `useEffectEvent` is still experimental.\n *\n * Some functions play the role of event handlers (called to notify that something has happened) _within_ an effect.\n * Without any intervention, the linter will insist the function needs to be in the effect's dependencies, even though\n * it would make no sense to re-run the effect when the handler changes. So we hide the function behind a stable ref.\n *\n * See https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n */\nconst useEffectEventRef = <T extends undefined | ((...args: any[]) => void)>(\n  callback: T\n): React.MutableRefObject<T> => {\n  const callbackRef = useRef<T>(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  return callbackRef;\n};\n\n/**\n * Hook to open a volume from one or more sources (URLs or raw data) and provide controls for (re)loading and playback.\n *\n * @param scenePaths An array of volume data sources, one per scene. These can be:\n * - a string URL to a single source, or\n * - an array of strings to load multiple sources as a single volume, or\n * - a `RawArrayLoaderOptions` object to load raw data directly.\n * @param options An optional object with callbacks and other info. See docs for `UseVolumeOptions`.\n * @returns An object with the current image, its load status, and controls for playback and loading.\n */\nconst useVolume = (\n  scenePaths: (string | string[] | RawArrayLoaderOptions)[],\n  options?: UseVolumeOptions\n): ReactiveVolume => {\n  const channelSettings = useViewerState(select(\"channelSettings\"));\n  const changeViewerSetting = useViewerState(select(\"changeViewerSetting\"));\n  const initChannelSettings = useViewerState(select(\"initChannelSettings\"));\n\n  const onErrorRef = useEffectEventRef(options?.onError);\n  const onChannelLoadedRef = useEffectEventRef(options?.onChannelLoaded);\n  const onCreateImageRef = useEffectEventRef(options?.onCreateImage);\n  const maskChannelName = options?.maskChannelName;\n\n  // set up our big objects: the image, its loading infrastructure, and controls for playback\n  const [image, setImage] = useState<Volume | null>(null);\n  const loadContext = useConstructor(\n    () => new VolumeLoaderContext(CACHE_MAX_SIZE, QUEUE_MAX_SIZE, QUEUE_MAX_LOW_PRIORITY_SIZE)\n  );\n  const sceneLoader = useMemo(() => new SceneStore(loadContext, scenePaths), [loadContext, scenePaths]);\n  const playControls = useConstructor(() => new PlayControls());\n  const [playingAxis, setPlayingAxis] = useState<AxisName | \"t\" | null>(null);\n  useEffect(() => {\n    playControls.onPlayingAxisChanged = (axis) => {\n      const isPlaying = axis !== null;\n      setPlayingAxis(axis);\n      // prioritize prefetching along the playing axis\n      sceneLoader.setPrefetchPriority(axis ? [AXIS_TO_LOADER_PRIORITY[axis]] : []);\n      // sync multichannel loading so we don't show loaded channels one at a time\n      sceneLoader.syncMultichannelLoading(isPlaying);\n      if (image) {\n        // If we're playing and entire axis is not in memory (T always, Z likely), downlevel to speed things up\n        const { volumeSize, subregionSize } = image.imageInfo;\n        const shouldDownlevel = isPlaying && (axis === \"t\" || volumeSize[axis] !== subregionSize[axis]);\n        image.updateRequiredData({ scaleLevelBias: shouldDownlevel ? 1 : 0 });\n      }\n    };\n  }, [sceneLoader, playControls, image]);\n\n  // track which channels have been loaded\n  const [channelVersions, _setChannelVersions] = useState<number[]>([]);\n  const [channelVersionsRef, setChannelVersions] = useRefWithSetter(_setChannelVersions, channelVersions);\n\n  // Some extra items for tracking load status\n  const [loadThrewError, setLoadThrewError] = useState(false);\n  const inInitialLoadRef = useRef(true);\n\n  // derive whether the image is loaded from whether any and/or all channels are loaded\n  const imageLoadStatus = useMemo(() => {\n    if (loadThrewError) {\n      return ImageLoadStatus.ERROR;\n    }\n\n    const [allLoaded, noneLoaded] = channelVersions.reduce(\n      ([allLoaded, noneLoaded], version, idx) => {\n        const setting = channelSettings[idx];\n        if (setting && (setting.volumeEnabled || setting.isosurfaceEnabled || maskChannelName === setting.name)) {\n          const loaded = version > 0;\n          return [allLoaded && loaded, noneLoaded && !loaded];\n        }\n        return [allLoaded, noneLoaded];\n      },\n      [true, true]\n    );\n\n    if (allLoaded && inInitialLoadRef.current) {\n      inInitialLoadRef.current = false;\n    }\n\n    return noneLoaded ? ImageLoadStatus.REQUESTED : allLoaded ? ImageLoadStatus.LOADED : ImageLoadStatus.LOADING;\n  }, [channelVersions, channelSettings, maskChannelName, loadThrewError]);\n\n  const setIsLoading = useCallback(() => {\n    setLoadThrewError(false);\n    setChannelVersions(channelVersionsRef.current.map((version) => Math.min(version, CHANNEL_RELOAD)));\n  }, [channelVersionsRef, setChannelVersions]);\n\n  const onError = useCallback(\n    (e: unknown): never => {\n      setLoadThrewError(true);\n      onErrorRef.current?.(e);\n      throw e;\n    },\n    [onErrorRef]\n  );\n\n  // channel indexes, sorted by category\n  const [channelGroupedByType, setChannelGroupedByType] = useState<ChannelGrouping>({});\n\n  const onChannelDataLoaded = useCallback(\n    (aimg: Volume, channelIndex: number): void => {\n      // let the hook caller know that this channel has loaded\n      const isInitialLoad = channelVersionsRef.current[channelIndex] === CHANNEL_INITIAL_LOAD;\n      onChannelLoadedRef.current?.(aimg, channelIndex, isInitialLoad);\n\n      // set this channel as loaded\n      const newVersions = channelVersionsRef.current.slice();\n      newVersions[channelIndex] = Math.max(newVersions[channelIndex], CHANNEL_RELOAD) + 1;\n      setChannelVersions(newVersions);\n\n      // if the whole image has loaded, let `playControls` know (if we're playing, it may want to go to the next frame)\n      if (aimg.isLoaded()) {\n        playControls.onImageLoaded();\n      }\n    },\n    [channelVersionsRef, onChannelLoadedRef, playControls, setChannelVersions]\n  );\n\n  // effect to start the initial load of the image\n  useEffect(() => {\n    const channelSettings = useViewerState.getState().channelSettings;\n    setChannelVersions(new Array(channelVersionsRef.current.length).fill(CHANNEL_INITIAL_LOAD));\n    setLoadThrewError(false);\n    inInitialLoadRef.current = true;\n\n    const setChannelStateForNewImage = (channelNames: string[]): ChannelState[] | undefined => {\n      const { useDefaultViewerChannelSettings } = useViewerState.getState();\n      const viewerChannelSettings = useDefaultViewerChannelSettings\n        ? getDefaultViewerChannelSettings()\n        : options?.viewerChannelSettings;\n      const grouping = makeChannelIndexGrouping(channelNames, viewerChannelSettings);\n      setChannelGroupedByType(grouping);\n\n      // compare each channel's new displayName to the old displayNames currently in state:\n      // same number of channels, and each channel has same displayName\n      const allNamesAreEqual = channelNames.every((name, idx) => {\n        const displayName = getDisplayName(name, idx, viewerChannelSettings);\n        return displayName === channelSettings[idx]?.displayName;\n      });\n\n      if (allNamesAreEqual) {\n        const newChannelSettings = channelNames.map((channel, index) => {\n          return { ...channelSettings[index], name: channel };\n        });\n        initChannelSettings(newChannelSettings);\n        return newChannelSettings;\n      }\n\n      const newChannelSettings = channelNames.map((channel, index) => {\n        const color = getDefaultChannelColor(index);\n        return initializeOneChannelSetting(channel, index, color, viewerChannelSettings);\n      });\n      initChannelSettings(newChannelSettings);\n      return newChannelSettings;\n    };\n\n    const openImage = async (): Promise<void> => {\n      const scene = useViewerState.getState().scene;\n      const time = useViewerState.getState().time;\n\n      const loadSpec = new LoadSpec();\n      loadSpec.time = time;\n\n      const aimg = await sceneLoader.createVolume(scene, loadSpec, onChannelDataLoaded).catch(onError);\n\n      const channelNames = aimg.imageInfo.channelNames;\n      const newChannelSettings = setChannelStateForNewImage(channelNames);\n\n      setChannelVersions(new Array(channelNames.length).fill(CHANNEL_INITIAL_LOAD));\n      setImage(aimg);\n\n      onCreateImageRef.current?.(aimg);\n\n      playControls.stepAxis = (axis: AxisName | \"t\") => {\n        const time = useViewerState.getState().time;\n        const slice = useViewerState.getState().slice;\n\n        if (axis === \"t\") {\n          changeViewerSetting(\"time\", (time + 1) % aimg.imageInfo.times);\n        } else {\n          const max = aimg.imageInfo.volumeSize[axis];\n          const current = slice[axis] * max;\n          changeViewerSetting(\"slice\", { ...slice, [axis]: ((current + 1) % max) / max });\n        }\n      };\n      playControls.getVolumeIsLoaded = aimg.isLoaded.bind(aimg);\n\n      const requiredLoadSpec = new LoadSpec();\n      requiredLoadSpec.time = time;\n\n      // make the currently enabled channels \"required\":\n      // find all enabled indices in newChannelSettings:\n      const requiredChannelsToLoad = newChannelSettings\n        ? newChannelSettings.map((channel, index) => (channel.volumeEnabled ? index : -1)).filter((index) => index >= 0)\n        : [];\n\n      // add mask channel to required channels, if specified\n      const { useDefaultViewerChannelSettings } = useViewerState.getState();\n      const viewerChannelSettings = useDefaultViewerChannelSettings\n        ? getDefaultViewerChannelSettings()\n        : options?.viewerChannelSettings;\n      const maskChannelName = viewerChannelSettings?.maskChannelName;\n      if (maskChannelName) {\n        const maskChannelIndex = channelNames.indexOf(maskChannelName);\n        if (maskChannelIndex >= 0 && !requiredChannelsToLoad.includes(maskChannelIndex)) {\n          requiredChannelsToLoad.push(maskChannelIndex);\n        }\n      }\n      requiredLoadSpec.channels = requiredChannelsToLoad;\n\n      const viewMode = useViewerState.getState().viewMode;\n      const slice = useViewerState.getState().slice;\n\n      // When in 2D Z-axis view mode, we restrict the subregion to only the current slice. This is\n      // to match an optimization that volume viewer does by loading Z-slices at a higher resolution,\n      // and ensures the very first volume that is loaded is the same as the one that\n      // will be shown whenever we switch back to the same viewer settings (2D Z-axis view mode).\n      // (We don't do this for ZX and YZ modes because we assume that the data won't be chunked along the\n      // X or Y axes in ways that would improve loading resolution, and we load the full 3D volume instead.)\n      if (viewMode === ViewMode.xy) {\n        requiredLoadSpec.subregion = new Box3(new Vector3(0, 0, slice.z), new Vector3(1, 1, slice.z));\n      }\n\n      // initiate loading only after setting up new channel settings,\n      // in case the loader callback fires before the state is set\n      sceneLoader.loadScene(scene, aimg, requiredLoadSpec).catch(onError);\n    };\n\n    openImage();\n  }, [\n    sceneLoader,\n    onError,\n    onCreateImageRef,\n    onChannelLoadedRef,\n    channelVersionsRef,\n    setChannelVersions,\n    playControls,\n    setIsLoading,\n    onChannelDataLoaded,\n    changeViewerSetting,\n    initChannelSettings,\n    options?.viewerChannelSettings,\n  ]);\n  // of the above dependencies, we expect only `sceneLoader` to change.\n\n  const setTime = useCallback(\n    (view3d: View3d, time: number): void => {\n      if (image && !inInitialLoadRef.current) {\n        view3d.setTime(image, time, onChannelDataLoaded).catch(onError);\n        setIsLoading();\n      }\n    },\n    [image, onError, setIsLoading, inInitialLoadRef, onChannelDataLoaded]\n  );\n\n  const setScene = useCallback(\n    (scene: number): void => {\n      if (image && !inInitialLoadRef.current) {\n        sceneLoader.loadScene(scene, image, undefined, onChannelDataLoaded).catch(onError);\n        setIsLoading();\n      }\n    },\n    [image, onError, sceneLoader, setIsLoading, inInitialLoadRef, onChannelDataLoaded]\n  );\n\n  return useMemo(\n    () => ({\n      image,\n      channelVersions,\n      imageLoadStatus,\n      setTime,\n      setScene,\n      playControls,\n      playingAxis,\n      channelGroupedByType,\n    }),\n    [image, channelVersions, imageLoadStatus, setTime, setScene, playControls, playingAxis, channelGroupedByType]\n  );\n};\n\nexport default useVolume;\n","import React from \"react\";\nimport { CaretDownOutlined, CaretUpOutlined } from \"@ant-design/icons\";\n\nimport { useRefWithSetter } from \"../../../shared/utils/hooks\";\n\nimport \"./styles.css\";\n\ninterface NumericInputProps {\n  value: number;\n  step?: number;\n  precision?: number;\n  min?: number;\n  max?: number;\n  disabled?: boolean;\n  className?: string;\n  onChange: (value: number) => void;\n}\n\n/**\n * Fully-controlled numeric input (value must be supplied from state in parent).\n * Changeable with arrow keys, typing values, or clickable arrows. Inspired by\n * ant's `InputNumber`, but conforms to our style and behavior expectations.\n */\nconst NumericInput: React.FC<NumericInputProps> = ({\n  value,\n  step = 1,\n  precision = step,\n  min = 0,\n  max = Number.MAX_SAFE_INTEGER,\n  disabled = false,\n  className = \"\",\n  onChange,\n}) => {\n  // While the input has focus, allow invalid input, just don't call `onChange` with it\n  const [hasFocus, _setHasFocus] = React.useState(false);\n  // State doesn't update before focus handler runs - keep a ref following focus state\n  const [hasFocusRef, setHasFocus] = useRefWithSetter(_setHasFocus, hasFocus);\n\n  // Hold the potentially invalid contents of the focused input here\n  const [textContent, setTextContent] = React.useState(\"\");\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const clamp = (newValue: number): number => Math.min(Math.max(newValue, min), max);\n  const roundToPrecision = (newValue: number): number => clamp(Math.round(newValue / precision) * precision);\n  const shouldChange = (newValue: number): boolean => !(isNaN(newValue) || newValue === value || disabled);\n\n  const displayedValue = roundToPrecision(value);\n\n  const onFocus = (): void => {\n    if (!hasFocusRef.current) {\n      // propagate current value to `textContent` on focus\n      setTextContent(displayedValue.toString());\n      setHasFocus(true);\n    }\n  };\n\n  const changeByStep = (up: boolean): void => {\n    const delta = up ? step : -step;\n    const newValue = clamp(displayedValue + delta);\n\n    if (shouldChange(newValue)) {\n      onChange(newValue);\n      setTextContent(newValue.toString());\n      // let the focus handler know we've taken care of things, so it won't restore the previous value\n      setHasFocus(true);\n    }\n\n    inputRef.current?.focus();\n  };\n\n  const onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (event) => {\n    const { key } = event;\n\n    if ([\"Up\", \"ArrowUp\", \"Down\", \"ArrowDown\"].includes(key)) {\n      changeByStep(key === \"Up\" || key === \"ArrowUp\");\n      event.preventDefault();\n    } else if (key === \"Enter\") {\n      inputRef.current?.blur();\n    }\n  };\n\n  const handleTyping = (inputStr: string): void => {\n    setTextContent(inputStr);\n\n    // if the user clears all text, assume they mean 0 (or the extremum closest to it)\n    // this is likely not completely general, but should be reasonable for any of our purposes\n    const inputNum = inputStr === \"\" ? 0 : parseFloat(inputStr);\n    const newValue = roundToPrecision(inputNum);\n\n    if (shouldChange(newValue)) {\n      onChange(newValue);\n    }\n  };\n\n  const fullClassName = \"numinput\" + (disabled ? \" numinput-disabled\" : \"\") + (className && ` ${className}`);\n  return (\n    <div className={fullClassName} onKeyDown={onKeyDown}>\n      <input\n        value={hasFocus ? textContent : displayedValue}\n        step={step}\n        min={min}\n        max={max}\n        disabled={disabled}\n        className=\"numinput-input\"\n        autoComplete=\"off\"\n        role=\"spinbutton\"\n        aria-valuenow={displayedValue}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        ref={inputRef}\n        onChange={({ target }) => handleTyping(target.value)}\n        onFocus={onFocus}\n        onBlur={() => setHasFocus(false)}\n      />\n      <div className=\"numinput-controls\">\n        <div\n          className=\"numinput-controls-button numinput-controls-button-up\"\n          role=\"button\"\n          aria-label=\"Increase Value\"\n          aria-disabled={disabled}\n          onClick={() => changeByStep(true)}\n        >\n          <CaretUpOutlined className=\"numinput-controls-button-icon\" />\n        </div>\n        <div\n          className=\"numinput-controls-button numinput-controls-button-down\"\n          role=\"button\"\n          aria-label=\"Decrease Value\"\n          aria-disabled={disabled}\n          onClick={() => changeByStep(false)}\n        >\n          <CaretDownOutlined className=\"numinput-controls-button-icon\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NumericInput;\n","import React from \"react\";\nimport Nouislider, { NouisliderProps } from \"nouislider-react\";\n\ntype CallbackArgs = Parameters<NonNullable<NouisliderProps[\"onStart\"]>>;\n\nconst MemoedNouislider = React.memo(\n  Nouislider as React.ComponentType<NouisliderProps & { noUpdate: boolean }>,\n  (_prevProps, { noUpdate }) => noUpdate\n);\n\n/** A wrapper around `Nouislider` that prevents updates while the slider is being dragged. */\nconst SmarterSlider: React.FC<NouisliderProps> = (props) => {\n  const [noUpdate, setNoUpdate] = React.useState(false);\n  const wrapEventHandler = (shouldNotUpdate: boolean, handler?: (...args: CallbackArgs) => void) => {\n    return (...args: CallbackArgs) => {\n      setNoUpdate(shouldNotUpdate);\n      if (handler) handler(...args);\n    };\n  };\n\n  const onStart = wrapEventHandler(true, props.onStart);\n  const onEnd = wrapEventHandler(false, props.onEnd);\n  return <MemoedNouislider {...{ ...props, noUpdate, onStart, onEnd }} />;\n};\n\nexport default SmarterSlider;\n","import { Volume } from \"@aics/vole-core\";\nimport { CaretRightOutlined, PauseOutlined } from \"@ant-design/icons\";\nimport { Button, Tooltip } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { ViewMode } from \"../../shared/enums\";\nimport { activeAxisMap, AxisName, PerAxis } from \"../../shared/types\";\nimport PlayControls from \"../../shared/utils/playControls\";\nimport { ViewerSettingUpdater } from \"../ViewerStateProvider/types\";\n\nimport NumericInput from \"../shared/NumericInput\";\nimport SmarterSlider from \"../shared/SmarterSlider\";\n\nimport \"./styles.css\";\n\nconst AXES: AxisName[] = [\"x\", \"y\", \"z\"];\n\ntype SliderRowProps = {\n  label: string;\n  vals: number[];\n  valsReadout?: number[];\n  max: number;\n  // These event handlers attach to the events of the same names provided by noUiSlider.\n  // Their behavior is documented at https://refreshless.com/nouislider/events-callbacks/\n  onSlide?: (values: number[]) => void;\n  /** `onChange` is called on the corresponding noUiSlider event AND on interaction with a spinbox. */\n  onChange?: (values: number[]) => void;\n  onStart?: () => void;\n  onEnd?: () => void;\n};\n\n/** A single slider row, with a slider, one or two spinbox inputs, and a max value */\nconst SliderRow: React.FC<SliderRowProps> = ({\n  label,\n  vals,\n  valsReadout = vals,\n  max,\n  onSlide,\n  onChange = onSlide,\n  onStart,\n  onEnd,\n}) => {\n  const isRange = vals.length > 1;\n  // If slider is a range, handles represent slice *edges*: the range around only the 1st slice is [0, 1]; the range\n  // around only the last is [max-1, max].\n  // If slider is not a range, just work with slices, but don't 0-index: 1st slice is 1, last is max\n  const min = isRange ? 0 : 1;\n  const wrappedOnSlide = isRange ? onSlide : (values: number[]) => onSlide?.([values[0] - 1]);\n  const wrappedOnChange = isRange ? onChange : (values: number[]) => onChange?.([values[0] - 1]);\n\n  return (\n    <span className=\"axis-slider-container\">\n      <span className=\"slider-name\">{label}</span>\n      {max <= min ? (\n        <i>No values to adjust</i>\n      ) : (\n        <span className=\"axis-slider\">\n          <SmarterSlider\n            className={isRange ? \"\" : \"slider-single-handle\"}\n            connect={true}\n            range={{ min, max }}\n            start={isRange ? vals : [vals[0] + 1]}\n            step={1}\n            margin={1}\n            behaviour=\"drag\"\n            pips={{\n              mode: \"positions\",\n              values: [25, 50, 75],\n              density: 25,\n              format: {\n                // remove labels from pips\n                to: () => \"\",\n              },\n            }}\n            // round slider output to nearest slice; assume any string inputs represent ints\n            format={{ to: Math.round, from: parseInt }}\n            onSlide={wrappedOnSlide}\n            onChange={wrappedOnChange}\n            onStart={onStart}\n            onEnd={onEnd}\n          />\n        </span>\n      )}\n      {max > min && (\n        <span className=\"slider-values\">\n          <NumericInput\n            min={min}\n            max={max}\n            value={valsReadout[0] + (isRange ? 0 : 1)}\n            onChange={(value) => onChange?.(isRange ? [value, vals[1]] : [value - 1])}\n          />\n          {isRange && (\n            <>\n              {\" , \"}\n              <NumericInput\n                min={min}\n                max={max}\n                value={valsReadout[1]}\n                onChange={(value) => onChange?.([vals[0], value])}\n              />\n            </>\n          )}\n          {\" / \"}\n          {max}\n        </span>\n      )}\n    </span>\n  );\n};\n\ntype PlaySliderRowProps = {\n  label: string;\n  val: number;\n  max: number;\n  playing: boolean;\n  updateWhileSliding?: boolean;\n  onTogglePlayback: (play: boolean) => void;\n  // These event handlers attach to the events of the same names provided by noUiSlider.\n  // Their behavior is documented at https://refreshless.com/nouislider/events-callbacks/\n  /**\n   * `onChange`'s behavior depends on `updateWhileSliding`: if true, it's called on slide and on release;\n   * if false, it's called only on slide.\n   */\n  onChange?: (values: number) => void;\n  onStart?: () => void;\n  onEnd?: () => void;\n};\n\n/** Wrapper around `SliderRow` that adds a play button and accounts for the case where not all of an axis is loaded */\nconst PlaySliderRow: React.FC<PlaySliderRowProps> = (props) => {\n  const { onChange, onStart, onEnd } = props;\n  // In partially-loaded axes, stores the displayed value of the slider while the user is sliding it\n  const [valReadout, setValReadout] = useState(props.val);\n  // Tracks when the user is sliding the slider and `valReadout` may have to sub in for props\n  const [sliderHeld, setSliderHeld] = useState(false);\n\n  const wrappedOnChange = useCallback(([val]: number[]) => onChange?.(val), [onChange]);\n  const wrappedSetValReadout = useCallback(([val]: number[]) => setValReadout(val), []);\n  const wrappedOnStart = useCallback((): void => {\n    setValReadout(props.val);\n    setSliderHeld(true);\n    onStart?.();\n  }, [onStart, props.val]);\n  const wrappedOnEnd = useCallback((): void => {\n    setSliderHeld(false);\n    onEnd?.();\n  }, [onEnd]);\n\n  return (\n    <>\n      <SliderRow\n        label={props.label}\n        vals={[props.val]}\n        valsReadout={props.updateWhileSliding || !sliderHeld ? undefined : [valReadout]}\n        max={props.max}\n        onSlide={props.updateWhileSliding ? wrappedOnChange : wrappedSetValReadout}\n        onChange={props.updateWhileSliding ? undefined : wrappedOnChange}\n        onStart={wrappedOnStart}\n        onEnd={wrappedOnEnd}\n      />\n      {props.max > 1 && (\n        <Tooltip placement=\"top\" title=\"Play through sequence\" trigger={[\"hover\", \"focus\"]}>\n          <Button\n            className=\"slider-play-button\"\n            onClick={() => props.onTogglePlayback(!props.playing)}\n            icon={props.playing ? <PauseOutlined /> : <CaretRightOutlined />}\n            aria-label={(props.playing ? \"Pause \" : \"Play \") + props.label}\n          />\n        </Tooltip>\n      )}\n    </>\n  );\n};\n\ntype AxisClipSlidersProps = {\n  mode: ViewMode;\n  image: Volume | null;\n  changeViewerSetting: ViewerSettingUpdater;\n  numSlices: PerAxis<number>;\n  numSlicesLoaded: PerAxis<number>;\n  numScenes: number;\n  region: PerAxis<[number, number]>;\n  slices: PerAxis<number>;\n  numTimesteps: number;\n  time: number;\n  scene: number;\n  playingAxis: AxisName | \"t\" | null;\n  playControls: PlayControls;\n};\n\nconst AxisClipSliders: React.FC<AxisClipSlidersProps> = (props) => {\n  const activeAxis = activeAxisMap[props.mode];\n\n  const pauseOnInput = (axis: AxisName | \"t\"): void => {\n    // Pause on slider input unless user is scrubbing along the playing axis (playback is held while this is happening)\n    if (!props.playControls.playHolding || props.playingAxis !== axis) {\n      props.playControls.pause();\n    }\n  };\n\n  const updateRegion = (axis: AxisName, minval: number, maxval: number): void => {\n    pauseOnInput(axis);\n\n    const { changeViewerSetting, numSlices } = props;\n    // get a value from 0-1\n    const max = numSlices[axis];\n    const start = minval / max;\n    const end = maxval / max;\n    changeViewerSetting(\"region\", { [axis]: [start, end] });\n  };\n\n  const updateSlice = (axis: AxisName, slice: number): void => {\n    pauseOnInput(axis);\n    props.changeViewerSetting(\"slice\", { [axis]: slice / props.numSlices[axis] });\n  };\n\n  const updateTime = (time: number): void => {\n    pauseOnInput(\"t\");\n    props.changeViewerSetting(\"time\", time);\n  };\n\n  // Pause when view mode or volume size has changed\n  useEffect(() => props.playControls.pause(), [props.mode, props.image, props.playControls]);\n\n  const handlePlayPause = (axis: AxisName | \"t\", willPlay: boolean): void => {\n    if (willPlay) {\n      props.playControls.play(axis);\n    } else {\n      props.playControls.pause();\n    }\n  };\n\n  const create2dAxisSlider = (axis: AxisName): React.ReactNode => {\n    const numSlices = props.numSlices[axis];\n    const numSlicesLoaded = props.numSlicesLoaded[axis];\n\n    return (\n      <div key={axis + numSlices + numSlicesLoaded} className={`slider-row slider-${axis}`}>\n        <PlaySliderRow\n          label={axis.toUpperCase()}\n          val={Math.round(props.slices[axis] * numSlices)}\n          max={numSlices}\n          onChange={(val) => updateSlice(axis, val)}\n          onStart={() => props.playControls.startHold(axis)}\n          onEnd={() => props.playControls.endHold()}\n          playing={props.playingAxis === axis}\n          onTogglePlayback={(willPlay) => handlePlayPause(axis, willPlay)}\n          updateWhileSliding={numSlices === numSlicesLoaded}\n        />\n      </div>\n    );\n  };\n\n  const create3dAxisSlider = (axis: AxisName): React.ReactNode => {\n    const numSlices = props.numSlices[axis];\n    if (numSlices === 1) {\n      return null;\n    }\n    const region = props.region[axis];\n\n    return (\n      <div key={axis + numSlices + \"3d\"} className={`slider-row slider-${axis}`}>\n        <SliderRow\n          label={axis.toUpperCase()}\n          vals={[Math.round(region[0] * numSlices), Math.round(region[1] * numSlices)]}\n          max={numSlices}\n          onSlide={(values) => updateRegion(axis, values[0], values[1])}\n          onStart={() => props.playControls.startHold(axis)}\n          onEnd={() => props.playControls.endHold()}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className={activeAxis ? \"clip-sliders clip-sliders-2d\" : \"clip-sliders\"}>\n      <span className=\"slider-group\">\n        <h4 className=\"slider-group-title\">ROI</h4>\n        <span className=\"slider-group-rows\">\n          {activeAxis ? create2dAxisSlider(activeAxis) : AXES.map(create3dAxisSlider)}\n        </span>\n      </span>\n\n      {props.numTimesteps > 1 && (\n        <span className=\"slider-group\">\n          <h4 className=\"slider-group-title\">Time</h4>\n          <span className=\"slider-group-rows\">\n            <div className=\"slider-row slider-t\">\n              <PlaySliderRow\n                label={\"\"}\n                val={props.time}\n                max={props.numTimesteps}\n                playing={props.playingAxis === \"t\"}\n                onTogglePlayback={(willPlay) => handlePlayPause(\"t\", willPlay)}\n                onChange={(time) => updateTime(time)}\n                onStart={() => props.playControls.startHold(\"t\")}\n                onEnd={() => props.playControls.endHold()}\n              />\n            </div>\n          </span>\n        </span>\n      )}\n\n      {props.numScenes > 1 && (\n        <span className=\"slider-group\">\n          <h4 className=\"slider-group-title\">Scene</h4>\n          <span className=\"slider-group-rows\">\n            <div className=\"slider-row slider-scene\">\n              <SliderRow\n                label={\"\"}\n                vals={[props.scene]}\n                max={props.numScenes}\n                onChange={([scene]) => props.changeViewerSetting(\"scene\", scene)}\n              />\n            </div>\n          </span>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default AxisClipSliders;\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-turnTable-f\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <path id=\"arrow-tail\" d=\"M19.19,7.69c-.09,.16-.19,.3-.3,.44-.26-.29-.55-.56-.85-.8,.34-.28,.58-.61,.61-.99,.05-.55-.4-1.15-.95-1.59-.56-.45-1.23-.79-1.92-1.07-.08-.04-.12-.13-.08-.21,.03-.07,.11-.11,.19-.09,.73,.21,1.46,.48,2.15,.89,.34,.21,.67,.46,.95,.79,.28,.32,.51,.76,.55,1.25,.05,.49-.1,.99-.35,1.38Z\" fill=\"currentColor\"/>\n  <path id=\"arrow-head\" d=\"M7.85,5.12l1.54-1.8c-1.27,.03-2.52,.18-3.73,.46-.71,.16-1.4,.37-2.05,.65-.64,.28-1.25,.63-1.67,1.06-.43,.45-.54,.87-.33,1.29,.22,.45,.76,.88,1.36,1.19,1.13,.6,2.46,.94,3.81,1.15-.27,.42-.51,.87-.7,1.35-1.29-.23-2.56-.6-3.79-1.26-.71-.4-1.46-.9-1.93-1.83-.23-.46-.3-1.05-.16-1.57,.14-.53,.43-.94,.75-1.27,.65-.65,1.39-1.04,2.13-1.35,.75-.32,1.51-.54,2.28-.71,1.39-.31,2.79-.45,4.19-.46L8.28,0l5.86,3.07-6.29,2.05Z\" fill=\"currentColor\"/>\n  <path id=\"button\" d=\"M18.17,8.83c-.31-.36-.66-.67-1.05-.95h-.01c-1.09-.79-2.43-1.26-3.89-1.26-2.16,0-4.09,1.03-5.3,2.63-.33,.42-.61,.88-.82,1.38-.36,.81-.56,1.72-.56,2.67,0,3.69,2.99,6.68,6.68,6.68s6.68-2.99,6.68-6.68c0-1.73-.65-3.29-1.73-4.47Zm-4.95,10.15c-3.13,0-5.68-2.55-5.68-5.68,0-.92,.22-1.79,.62-2.56,.26-.52,.6-1,1.01-1.41,1.03-1.06,2.47-1.71,4.05-1.71,1,0,1.94,.26,2.76,.72,.5,.28,.96,.64,1.35,1.06,.97,1.01,1.57,2.38,1.57,3.9,0,3.13-2.55,5.68-5.68,5.68Z\" fill=\"currentColor\"/>\n  <path id=\"play-head\" d=\"M12.83,10.68l-1.18-.94v7.16l4.48-3.58-3.3-2.64Zm-.18,1.14l1.88,1.5-1.88,1.5v-3Z\" fill=\"currentColor\"/>\n</svg>","import axes from \"./axes.svg\";\nimport boundingBox from \"./boundingBox.svg\";\nimport camera from \"./camera.svg\";\nimport channels from \"./channels.svg\";\nimport closePanel from \"./closePanel.svg\";\nimport download from \"./download.svg\";\nimport dropdownArrow from \"./dropdownArrow.svg\";\nimport metadata from \"./metadata.svg\";\nimport preferences from \"./preferences.svg\";\nimport resetView from \"./resetView.svg\";\nimport turnTable from \"./turnTable.svg\";\n\nexport default {\n  axes,\n  boundingBox,\n  camera,\n  channels,\n  closePanel,\n  download,\n  dropdownArrow,\n  metadata,\n  preferences,\n  resetView,\n  turnTable,\n};\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-axes\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <circle id=\"center\" cx=\"6.26\" cy=\"12.84\" r=\"1\" fill=\"currentColor\"/>\n  <path id=\"arrow-x\" d=\"M14.27,15.23l.7-1.64h-6.86c.09-.23,.15-.48,.15-.75s-.06-.52-.15-.75h6.86l-.7-1.64,5.66,2.39-5.66,2.39Z\" fill=\"currentColor\"/>\n  <path id=\"arrow-y\" d=\"M6.26,.03L3.87,5.69l1.64-.69v5.99c.23-.1,.48-.15,.75-.15s.52,.05,.75,.15V5l1.64,.69L6.26,.03Z\" fill=\"currentColor\"/>\n  <path id=\"arrow-z\" d=\"M5.59,17.23L.07,19.91l1.93-5.83,.77,1.6,1.61-1.83s.08-.06,.11-.09c.23,.44,.62,.78,1.09,.95-.02,.04-.04,.09-.07,.12l-1.61,1.84,1.69,.56Z\" fill=\"currentColor\"/>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 20 20\">\n    <path id=\"back\" d=\"M.52,13.67m12.76-3.42c0,.21,.17,.38,.38,.38s.38-.17,.38-.38v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.25Zm-2.5,3.42c0-.21-.17-.38-.38-.38h-1.25c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.25c.21,0,.38-.17,.38-.38Zm3.93,.52l-.68-.67s0,0,0-.01v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.05h-.88c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.1l.68,.67c.07,.07,.17,.11,.26,.11s.19-.04,.27-.11c.15-.15,.15-.38,0-.53Zm2.31,2.29l-.89-.88c-.15-.15-.38-.14-.53,0-.15,.15-.15,.38,0,.53l.89,.88c.07,.07,.17,.11,.26,.11s.19-.04,.27-.11c.15-.15,.15-.38,0-.53Zm-12.73-2.81c0-.21-.17-.38-.38-.38h-1.25c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.25c.21,0,.38-.17,.38-.38ZM13.27,3.75c0,.21,.17,.38,.38,.38s.38-.17,.38-.38v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.25Zm.75,2c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v.08h.75v-.08Zm-.38,1.62c.21,0,.38-.17,.38-.38v-.17h-.75v.17c0,.21,.17,.38,.38,.38Zm0-3.25c.21,0,.38-.17,.38-.38v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.25c0,.21,.17,.38,.38,.38ZM3.9,13.3h-1.25c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.25c.21,0,.38-.17,.38-.38s-.17-.38-.38-.38Zm1.62,.38c0,.19,.14,.34,.32,.36v-.73c-.18,.03-.32,.18-.32,.36Zm10.59,1.93c-.15-.15-.38-.14-.53,0-.15,.15-.15,.38,0,.53l.89,.88c.07,.07,.17,.11,.26,.11s.19-.04,.27-.11c.15-.15,.15-.38,0-.53l-.89-.88Zm2.86,2.84l-.56-.55c-.15-.15-.38-.15-.53,0-.15,.15-.15,.38,0,.53l.55,.54h.54v-.52Zm-8.58-5.14h-1.25c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.25c.21,0,.38-.17,.38-.38s-.17-.38-.38-.38Zm3.62,.22s0,0,0-.01v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.05h-.88c-.21,0-.38,.17-.38,.38s.17,.38,.38,.38h1.1l.68,.67c.07,.07,.17,.11,.26,.11s.19-.04,.27-.11c.15-.15,.15-.38,0-.53l-.68-.67Zm-.37-2.89c.21,0,.38-.17,.38-.38v-1.25c0-.21-.17-.38-.38-.38s-.38,.17-.38,.38v1.25c0,.21,.17,.38,.38,.38Zm-6.12,3.05c0-.21-.17-.38-.38-.38h-.3v.75h.3c.21,0,.38-.17,.38-.38Z\" fill=\"currentColor\"/>\n    <path id=\"front\" d=\"M19.83,5.98h0l-.7-.69L14.7,.88s-.23-.23-.69-.69c0,0,0,0,0,0,0,0,0,0,0,0h0c-.09-.09-.21-.15-.35-.15H.52C.24,.04,.02,.26,.02,.54V13.67c0,.14,.06,.26,.15,.35,0,0,0,0,0,0,.46,.46,.7,.69,.7,.69l4.44,4.41s.23,.23,.7,.69c0,0,0,0,0,0,.09,.09,.21,.15,.35,.15h13.13c.28,0,.5-.22,.5-.5V6.33c0-.14-.06-.26-.15-.35ZM5.85,13.31v4.96L1.56,14.01s-.19-.19-.55-.54V1.74L5.3,6s.19,.19,.55,.54v6.77Zm.16-8.02L1.73,1.04H13.44c.36,.36,.55,.55,.55,.55l4.28,4.25H6.55c-.36-.36-.55-.55-.55-.55Zm.84,13.68V6.83h12.13v12.13H6.85Z\" fill=\"currentColor\"/>\n</svg>\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <g id=\"icon-camera\">\n    <path id=\"camera-body\" d=\"M29.54,32H2.46c-1.36,0-2.46-1.1-2.46-2.45V15.34c0-1.35,1.1-2.45,2.46-2.45h6.64c1.21,0,2.34-.54,3.1-1.48l.88-1.09c.75-.94,1.88-1.47,3.08-1.47h6.32c1.21,0,2.33,.54,3.08,1.47l.88,1.09c.76,.94,1.89,1.48,3.1,1.48,1.36,0,2.46,1.1,2.46,2.45v14.21c0,1.35-1.1,2.45-2.46,2.45ZM2.46,13.9c-.8,0-1.46,.65-1.46,1.45v14.21c0,.8,.65,1.45,1.46,1.45H29.54c.8,0,1.46-.65,1.46-1.45V15.34c0-.8-.65-1.45-1.46-1.45-1.52,0-2.93-.68-3.88-1.85l-.88-1.09c-.56-.7-1.4-1.1-2.3-1.1h-6.32c-.9,0-1.74,.4-2.3,1.1l-.88,1.09c-.95,1.18-2.36,1.85-3.88,1.85H2.46Zm4.25,4.85c.58,0,1.04-.46,1.04-1.03s-.47-1.03-1.04-1.03h-1.67c-.58,0-1.04,.46-1.04,1.03s.47,1.03,1.04,1.03h1.67Zm12.61-3.24c2.81,0,5.09,2.29,5.09,5.1s-2.28,5.1-5.09,5.1-5.09-2.29-5.09-5.1,2.28-5.1,5.09-5.1m0-2c-3.91,0-7.09,3.18-7.09,7.1s3.17,7.1,7.09,7.1,7.09-3.18,7.09-7.1-3.17-7.1-7.09-7.1h0Z\" fill=\"currentColor\"/>\n    <path id=\"burst-lines\" d=\"M19.39,3.87c-.28,0-.5-.22-.5-.5V.5c0-.28,.22-.5,.5-.5s.5,.22,.5,.5V3.37c0,.28-.22,.5-.5,.5Zm4.76,1.12l2.15-2.34c.19-.2,.17-.52-.03-.71-.2-.18-.52-.17-.71,.03l-2.15,2.34c-.19,.2-.17,.52,.03,.71,.1,.09,.22,.13,.34,.13,.13,0,.27-.05,.37-.16Zm-8.95,.03c.2-.19,.22-.5,.03-.71l-2.15-2.34c-.19-.2-.5-.21-.71-.03-.2,.19-.22,.5-.03,.71l2.15,2.34c.1,.11,.23,.16,.37,.16,.12,0,.24-.04,.34-.13Z\" fill=\"currentColor\"/>\n  </g>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-channels\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <path id=\"line-mid\" d=\"M13.55,10.36h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Z\" fill=\"currentColor\"/>\n  <path id=\"line-top\" d=\"M2.65,6.64c-.21,0-.38-.17-.38-.38v-.3c0-.26,.03-.52,.08-.78,.04-.2,.24-.33,.45-.29,.2,.04,.33,.24,.29,.45-.04,.2-.07,.41-.07,.62v.3c0,.21-.17,.38-.38,.38Zm1.06-2.7c-.1,0-.2-.04-.28-.12-.14-.15-.13-.39,.02-.53,.27-.25,.59-.46,.92-.62,.19-.09,.41,0,.5,.18s0,.41-.18,.5c-.27,.12-.51,.29-.73,.49-.07,.07-.16,.1-.25,.1Zm9.78-.86h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Z\" fill=\"currentColor\"/>\n  <path id=\"line-bottom\" d=\"M13.44,17.69h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-3,0h-1c-.21,0-.38-.17-.38-.38s.17-.38,.38-.38h1c.21,0,.38,.17,.38,.38s-.17,.38-.38,.38Zm-2.95-.32c-.05,0-.11-.01-.16-.04-.33-.16-.64-.38-.91-.63-.15-.14-.16-.38-.02-.53s.38-.16,.53-.02c.22,.2,.46,.37,.73,.5,.19,.09,.26,.32,.17,.5-.06,.13-.2,.21-.34,.21Zm-1.78-2.28c-.17,0-.33-.12-.37-.3-.05-.24-.07-.48-.07-.73v-.34c0-.21,.17-.38,.38-.38s.38,.17,.38,.38v.34c0,.19,.02,.39,.06,.58,.04,.2-.09,.4-.29,.44-.02,0-.05,0-.08,0Z\" fill=\"currentColor\"/>\n  <path id=\"channel-composite\" d=\"M5.42,12.69H.01V7.29H5.42v5.4Zm-4.4-1h3.4v-3.4H1.01v3.4Z\" fill=\"currentColor\"/>\n  <path id=\"channel-1\" d=\"M19.99,5.41h-5.4V0h5.4V5.41Zm-4.4-1h3.4V1h-3.4v3.4Z\" fill=\"currentColor\"/>\n  <path id=\"channel-2\" d=\"M19.99,12.69h-5.4V7.29h5.4v5.4Zm-4.4-1h3.4v-3.4h-3.4v3.4Z\" fill=\"currentColor\"/>\n  <path id=\"channel-3\" d=\"M19.99,19.97h-5.4v-5.4h5.4v5.4Zm-4.4-1h3.4v-3.4h-3.4v3.4Z\" fill=\"currentColor\"/>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-openPanel\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <path id=\"chevron-2\" d=\"M10.64,17.78c-.21,0-.41-.06-.59-.2-.44-.33-.54-.96-.21-1.4l4.59-6.21L9.83,3.76c-.33-.44-.23-1.07,.21-1.4,.44-.33,1.07-.23,1.4,.21l5.03,6.8c.26,.35,.26,.84,0,1.19l-5.03,6.81c-.2,.27-.5,.41-.81,.41Z\" fill=\"currentColor\"/>\n  <path id=\"chevron-1\" d=\"M4.33,17.84c-.21,0-.41-.06-.59-.2-.44-.33-.54-.96-.21-1.4l4.59-6.21L3.53,3.82c-.33-.44-.23-1.07,.21-1.4,.44-.33,1.07-.23,1.4,.21l5.03,6.81c.26,.35,.26,.83,0,1.19l-5.03,6.81c-.2,.27-.5,.41-.81,.41Z\" fill=\"currentColor\"/>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <g id=\"icon-download\">\n    <polygon id=\"arrow\" points=\"17 14.93 17 0 15 0 15 14.93 11.56 13.47 16 24 20.44 13.47 17 14.93\" fill=\"currentColor\"/>\n    <path id=\"base\" d=\"M28.5,32H3.5c-1.38,0-2.5-1.12-2.5-2.5v-9.5h1v9.5c0,.83,.67,1.5,1.5,1.5H28.5c.83,0,1.5-.67,1.5-1.5v-9.5h1v9.5c0,1.38-1.12,2.5-2.5,2.5Z\" fill=\"currentColor\"/>\n  </g>\n</svg>","<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"14\"\n    height=\"14\"\n    viewBox=\"0 0 12 12\"\n>\n    <path\n        fill=\"currentColor\"\n        d=\"M1.11652 3.1204C1.30891 2.94718 1.6053 2.96271 1.77853 3.1551L6.0059 7.85006L10.2333 3.1551C10.4065 2.96271 10.7029 2.94718 10.8953 3.12041C11.0876 3.29363 11.1032 3.59002 10.9299 3.78241L6.37171 8.84486C6.27496 8.9523 6.1398 9.00459 6.00579 8.99963C5.87185 9.00453 5.73678 8.95224 5.64008 8.84485L1.08183 3.78241C0.908604 3.59002 0.924137 3.29363 1.11652 3.1204Z\"\n    />\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_2\" data-name=\"Layer 2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n  <g id=\"icon-metadata\">\n    <path id=\"lines\" d=\"M19.46,21.54c0-.28-.22-.5-.5-.5H.5c-.28,0-.5,.22-.5,.5s.22,.5,.5,.5H18.96c.28,0,.5-.22,.5-.5Zm3.52-14.03c0-.28-.22-.5-.5-.5H.51C.23,7.01,0,7.24,0,7.51s.22,.5,.5,.5H22.48c.28,0,.5-.22,.5-.5Zm-4.74,7.01c0-.28-.22-.5-.5-.5H.5c-.28,0-.5,.22-.5,.5s.22,.5,.5,.5H17.75c.28,0,.5-.22,.5-.5ZM32,.5c0-.28-.22-.5-.5-.5H.54C.26,0,.04,.22,.04,.5s.22,.5,.5,.5H31.5c.28,0,.5-.22,.5-.5Z\" fill=\"currentColor\"/>\n    <path id=\"i\" d=\"M23.62,14.79l.16-.56h6.29l-4.67,13.66c-.13,.4-.26,.81-.4,1.23-.13,.42-.2,.81-.2,1.19,0,.32,.09,.6,.28,.83,.18,.23,.46,.34,.83,.34,.42,0,.84-.15,1.25-.44s.78-.64,1.13-1.03c.34-.39,.63-.79,.87-1.19s.41-.73,.51-.97l.47,.2c-.11,.21-.27,.54-.49,.99-.23,.44-.53,.89-.93,1.33-.39,.44-.88,.83-1.46,1.15s-1.26,.48-2.06,.48c-.87,0-1.56-.18-2.08-.54s-.77-.97-.77-1.83c0-.46,.08-.96,.24-1.51,.16-.55,.32-1.05,.48-1.51l4.07-11.81h-3.52Zm4.67-6.57c0,.54,.18,.99,.53,1.35s.8,.54,1.32,.54,.97-.18,1.32-.54,.53-.81,.53-1.35-.18-.99-.53-1.35-.8-.54-1.32-.54-.97,.18-1.32,.54-.53,.81-.53,1.35Z\" fill=\"currentColor\"/>\n  </g>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-preferences\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <path id=\"bar-1\" d=\"M8.04,3.61H.81C.39,3.61,.06,3.27,.06,2.86s.34-.75,.75-.75h7.23v1.5Zm11.15-1.5h-5.65v1.5h5.65c.41,0,.75-.34,.75-.75s-.34-.75-.75-.75Z\" fill=\"currentColor\"/>\n  <path id=\"slider-head-1\" d=\"M10.79,5.61c-.41,0-.75-.34-.75-.75V.85c0-.41,.34-.75,.75-.75s.75,.34,.75,.75V4.86c0,.41-.34,.75-.75,.75Z\" fill=\"currentColor\"/>\n  <path id=\"bar-2\" d=\"M2.81,10.75H.81c-.41,0-.75-.34-.75-.75s.34-.75,.75-.75H2.81v1.5Zm16.38-1.5H8.31v1.5h10.88c.41,0,.75-.34,.75-.75s-.34-.75-.75-.75Z\" fill=\"currentColor\"/>\n  <path id=\"slider-head-2\" d=\"M5.56,12.76c-.41,0-.75-.34-.75-.75V7.99c0-.41,.34-.75,.75-.75s.75,.34,.75,.75v4.01c0,.41-.34,.75-.75,.75Z\" fill=\"currentColor\"/>\n  <path id=\"bar-3\" d=\"M19.94,17.14c0,.41-.34,.75-.75,.75h-3.08v-1.5h3.08c.41,0,.75,.34,.75,.75Zm-9.33-.75H.81c-.41,0-.75,.34-.75,.75s.34,.75,.75,.75H10.61v-1.5Z\" fill=\"currentColor\"/>\n  <path id=\"slider-head-3\" d=\"M13.36,19.9c-.41,0-.75-.34-.75-.75v-4.01c0-.41,.34-.75,.75-.75s.75,.34,.75,.75v4.01c0,.41-.34,.75-.75,.75Z\" fill=\"currentColor\"/>\n</svg>","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"icon-resetView-2\" data-name=\"icon-resetView\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n  <path id=\"corner-top-left\" d=\"M.6,5.48c-.28,0-.5-.22-.5-.5V.09H4.99c.28,0,.5,.22,.5,.5s-.22,.5-.5,.5H1.1v3.89c0,.28-.22,.5-.5,.5Z\" fill=\"currentColor\"/>\n  <path id=\"corner-bottom-left\" d=\"M4.99,19.91H.1v-4.88c0-.28,.22-.5,.5-.5s.5,.22,.5,.5v3.88h3.89c.28,0,.5,.22,.5,.5s-.22,.5-.5,.5Z\" fill=\"currentColor\"/>\n  <path id=\"corner-bottom-right\" d=\"M19.9,19.91h-4.89c-.28,0-.5-.22-.5-.5s.22-.5,.5-.5h3.89v-3.88c0-.28,.22-.5,.5-.5s.5,.22,.5,.5v4.88Z\" fill=\"currentColor\"/>\n  <path id=\"corner-top-right\" d=\"M19.4,6.11c-.28,0-.5-.22-.5-.5V1.09h-4.51c-.28,0-.5-.22-.5-.5s.22-.5,.5-.5h5.51V5.61c0,.28-.22,.5-.5,.5Z\" fill=\"currentColor\"/>\n  <path id=\"frame\" d=\"M16.46,16.46H3.54V3.54h12.92v12.92Zm-10.92-2H14.46V5.54H5.54V14.46Z\" fill=\"currentColor\"/>\n</svg>","import React from \"react\";\nimport Icon from \"@ant-design/icons\";\nimport { IconComponentProps } from \"@ant-design/icons/lib/components/Icon\";\n\nimport ICONS from \"../../assets/icons\";\n\nconst STYLE = { fontSize: \"19px\" };\ntype ViewerIconProps = { type: keyof typeof ICONS } & Omit<IconComponentProps, \"type\" | \"component\" | \"ref\">;\n\n/** Wrapper component for easy inclusion of our own custom icons. */\nconst ViewerIcon: React.FC<ViewerIconProps> = (props) => {\n  const newProps = { ...props };\n  newProps.style = { ...STYLE, ...props.style };\n  return <Icon component={ICONS[props.type]} {...newProps} />;\n};\n\nexport default ViewerIcon;\n","import { Button, Drawer } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\n\nimport ViewerIcon from \"../shared/ViewerIcon\";\n\nimport \"./styles.css\";\n\ntype BottomPanelProps = {\n  title?: string;\n  open?: boolean;\n  onOpenChange?: (visible: boolean) => void;\n  children?: React.ReactNode;\n  height?: number;\n};\n\nconst BottomPanel: React.FC<BottomPanelProps> = ({ children, open: openProp, title, height, onOpenChange }) => {\n  const [openState, setOpenState] = useState(true);\n  const open = openProp ?? openState;\n\n  const toggleDrawer = useCallback((): void => {\n    if (openProp === undefined) {\n      setOpenState(!open);\n    }\n\n    onOpenChange?.(!open);\n  }, [open, openProp, onOpenChange]);\n\n  const optionsButton = (\n    <Button className=\"options-button\" size=\"small\" onClick={toggleDrawer}>\n      {title || \"Options\"}\n      <ViewerIcon type=\"closePanel\" className=\"button-arrow\" style={{ fontSize: \"15px\" }} />\n    </Button>\n  );\n\n  return (\n    <div className=\"bottom-panel\">\n      <Drawer\n        className=\"drawer\"\n        placement=\"bottom\"\n        closable={false}\n        getContainer={false}\n        open={open}\n        mask={false}\n        title={optionsButton}\n        height={height ?? 190}\n      >\n        <div className=\"drawer-body-wrapper\">{children}</div>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default BottomPanel;\n","import { View3d, Volume } from \"@aics/vole-core\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\n\nimport { CLIPPING_PANEL_HEIGHT_DEFAULT, CLIPPING_PANEL_HEIGHT_TALL } from \"../../shared/constants\";\nimport { ViewMode } from \"../../shared/enums\";\nimport { AxisName, PerAxis, Styles } from \"../../shared/types\";\nimport PlayControls from \"../../shared/utils/playControls\";\nimport { select, useViewerState } from \"../../state/store\";\n\nimport AxisClipSliders from \"../AxisClipSliders\";\nimport BottomPanel from \"../BottomPanel\";\n\nimport \"./styles.css\";\n\ntype ViewerWrapperProps = {\n  view3d: View3d;\n  loadingImage: boolean;\n  appHeight: string;\n  image: Volume | null;\n  numSlices: PerAxis<number>;\n  numSlicesLoaded: PerAxis<number>;\n  playControls: PlayControls;\n  playingAxis: AxisName | \"t\" | null;\n  numTimesteps: number;\n  numScenes: number;\n  visibleControls: {\n    axisClipSliders: boolean;\n  };\n  clippingPanelOpen?: boolean;\n  onClippingPanelOpenChange?: (visible: boolean) => void;\n};\n\nconst ViewerWrapper: React.FC<ViewerWrapperProps> = (props) => {\n  const view3dviewerRef = React.createRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    view3dviewerRef.current!.appendChild(props.view3d.getDOMElement());\n  }, [props.view3d, view3dviewerRef]);\n\n  const renderOverlay = (): React.ReactNode => {\n    // Don't show spinner during playback - we may be constantly loading new data, it'll block the view!\n    const showSpinner = props.loadingImage && !props.playingAxis;\n    const spinner = showSpinner ? (\n      <div style={STYLES.noImage}>\n        <LoadingOutlined style={{ fontSize: 60, zIndex: 1000 }} />\n      </div>\n    ) : null;\n\n    const noImageText =\n      !props.loadingImage && !props.image ? <div style={STYLES.noImage}>No image selected</div> : null;\n    if (!!noImageText && props.view3d) {\n      props.view3d.removeAllVolumes();\n    }\n    return noImageText || spinner;\n  };\n\n  const { appHeight, visibleControls, numTimesteps, numScenes } = props;\n\n  const changeViewerSetting = useViewerState(select(\"changeViewerSetting\"));\n  const viewMode = useViewerState(select(\"viewMode\"));\n  const region = useViewerState(select(\"region\"));\n  const slice = useViewerState(select(\"slice\"));\n  const time = useViewerState(select(\"time\"));\n  const scene = useViewerState(select(\"scene\"));\n\n  const clippingPanelTall = numTimesteps > 1 && numScenes > 1 && viewMode === ViewMode.threeD;\n\n  return (\n    <div className=\"cell-canvas\" style={{ ...STYLES.viewer, height: appHeight }}>\n      <div ref={view3dviewerRef} style={STYLES.view3d}></div>\n      <BottomPanel\n        title=\"Clipping\"\n        open={props.clippingPanelOpen}\n        onOpenChange={props.onClippingPanelOpenChange}\n        height={clippingPanelTall ? CLIPPING_PANEL_HEIGHT_TALL : CLIPPING_PANEL_HEIGHT_DEFAULT}\n      >\n        {visibleControls.axisClipSliders && !!props.image && (\n          <AxisClipSliders\n            mode={viewMode}\n            image={props.image}\n            changeViewerSetting={changeViewerSetting}\n            numSlices={props.numSlices}\n            numSlicesLoaded={props.numSlicesLoaded}\n            numScenes={numScenes}\n            region={region}\n            slices={slice}\n            numTimesteps={numTimesteps}\n            time={time}\n            scene={scene}\n            playControls={props.playControls}\n            playingAxis={props.playingAxis}\n          />\n        )}\n      </BottomPanel>\n      {renderOverlay()}\n    </div>\n  );\n};\n\nexport default ViewerWrapper;\n\nconst STYLES: Styles = {\n  viewer: {\n    display: \"flex\",\n    position: \"relative\",\n  },\n  view3d: {\n    width: \"100%\",\n    display: \"flex\",\n    overflow: \"hidden\",\n  },\n  noImage: {\n    position: \"absolute\",\n    zIndex: 999,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#eeeee\",\n    color: \"#9b9b9b\",\n    fontSize: \"2em\",\n    opacity: 0.75,\n  },\n};\n","import React from \"react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\nimport { map } from \"lodash\";\n\nimport { ColorObject } from \"../shared/utils/colorRepresentations\";\nimport { Styles } from \"../shared/types\";\n\n// if there are fewer than this many screen pixels below the swatch but more above, open above the swatch\nconst OPEN_ABOVE_MARGIN = 310;\n\ntype ColorChangeHandler = (currentColor: ColorObject, prevColor?: ColorObject, idx?: number) => void;\n\ninterface ColorPickerProps {\n  color: ColorObject;\n  width: number;\n  onColorChange?: ColorChangeHandler;\n  onColorChangeComplete?: ColorChangeHandler;\n  idx?: any;\n  disableAlpha?: boolean;\n}\n\nconst DEFAULT_COLOR = {\n  r: \"241\",\n  g: \"112\",\n  b: \"19\",\n  a: \"1\",\n};\n\nconst ColorPicker: React.FC<ColorPickerProps> = (props) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [openAboveSwatch, setOpenAboveSwatch] = React.useState(false);\n  const [currentColor, setCurrentColor] = React.useState(props.color || DEFAULT_COLOR);\n\n  const swatchRef = React.useRef<HTMLDivElement>(null);\n\n  const handleClick = (): void => {\n    const swatchRect = swatchRef.current!.getBoundingClientRect();\n    const noRoomBelowSwatch = swatchRect.bottom > window.innerHeight - OPEN_ABOVE_MARGIN;\n    setIsOpen(!isOpen);\n    setOpenAboveSwatch(noRoomBelowSwatch && swatchRect.top > OPEN_ABOVE_MARGIN);\n  };\n\n  const handleClose = (): void => setIsOpen(false);\n\n  const handleChange = (color: ColorResult): void => {\n    setCurrentColor(color.rgb);\n    // supply onColorChange callback in props.\n    props.onColorChange?.(color.rgb, currentColor, props.idx);\n  };\n\n  const handleChangeComplete = (color: ColorResult): void => {\n    setCurrentColor(color.rgb);\n    // supply onColorChange callback in props.\n    props.onColorChangeComplete?.(color.rgb, currentColor, props.idx);\n  };\n\n  React.useEffect(() => setCurrentColor(props.color), [props.color]);\n\n  const width = props.width || 36;\n  const popoverDirectionStyle = openAboveSwatch ? { bottom: \"21px\" } : { top: \"0px\" };\n  return (\n    <div>\n      <div style={STYLES.swatch} ref={swatchRef} onClick={handleClick}>\n        <div style={{ ...STYLES.color, width: `${width}px`, background: `rgba(${map(currentColor, (ele) => ele)})` }} />\n      </div>\n      <div style={{ position: \"absolute\" }}>\n        {isOpen ? (\n          <div style={{ ...STYLES.popover, ...popoverDirectionStyle }}>\n            <div style={STYLES.cover} onClick={handleClose} />\n            <SketchPicker\n              color={currentColor}\n              onChange={handleChange}\n              onChangeComplete={handleChangeComplete}\n              disableAlpha={props.disableAlpha}\n            />\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPicker;\n\nconst STYLES: Styles = {\n  color: {\n    height: \"14px\",\n    margin: \"3px\",\n    borderRadius: \"2px\",\n  },\n  swatch: {\n    borderRadius: \"3px\",\n    border: \"1px solid var(--color-controlpanel-border)\",\n    display: \"inline-block\",\n    cursor: \"pointer\",\n    verticalAlign: \"middle\",\n  },\n  popover: {\n    position: \"absolute\",\n    zIndex: \"9999\",\n  },\n  cover: {\n    position: \"fixed\",\n    top: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\",\n    left: \"0px\",\n  },\n};\n","import React from \"react\";\nimport { NouisliderProps } from \"nouislider-react\";\nimport SmarterSlider from \"../SmarterSlider\";\n\nimport \"./styles.css\";\n\ntype SliderRowProps = {\n  label: React.ReactNode;\n  start?: number | number[];\n  step?: number;\n  formatInteger?: boolean;\n  max?: number;\n  onUpdate?: NouisliderProps[\"onUpdate\"];\n  onChange?: NouisliderProps[\"onChange\"];\n  hideSlider?: boolean;\n\n  children?: React.ReactNode;\n};\n\nconst INTEGER_FORMATTER = { to: Math.round, from: Number };\n\n/** A component to ensure a single unified style across the many labeled slider rows in the control panel */\nconst SliderRow: React.FC<SliderRowProps> = (props) => (\n  <div className=\"viewer-control-row\">\n    <div className=\"control-name\">{props.label}</div>\n    <div className=\"control\">\n      {props.start === undefined\n        ? props.children\n        : !props.hideSlider && (\n            <SmarterSlider\n              range={{ min: 0, max: props.max }}\n              start={props.start}\n              connect={true}\n              tooltips={true}\n              behaviour=\"drag\"\n              format={props.formatInteger ? INTEGER_FORMATTER : undefined}\n              onUpdate={props.onUpdate}\n              onChange={props.onChange}\n            />\n          )}\n    </div>\n  </div>\n);\n\nexport default SliderRow;\n","import { Channel, ControlPoint, Histogram, Lut } from \"@aics/vole-core\";\nimport { Button, Checkbox, InputNumber, Tooltip } from \"antd\";\nimport * as d3 from \"d3\";\nimport \"nouislider/distribute/nouislider.css\";\nimport React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\nimport { DTYPE_RANGE, LUT_MAX_PERCENTILE, LUT_MIN_PERCENTILE, TFEDITOR_DEFAULT_COLOR } from \"../../shared/constants\";\nimport {\n  ColorArray,\n  colorArrayToObject,\n  colorArrayToString,\n  colorObjectToArray,\n} from \"../../shared/utils/colorRepresentations\";\nimport { controlPointsToRamp, rampToControlPoints } from \"../../shared/utils/controlPointsToLut\";\nimport { useRefWithSetter } from \"../../shared/utils/hooks\";\nimport type { SingleChannelSettingUpdater } from \"../ViewerStateProvider/types\";\n\nimport SliderRow from \"../shared/SliderRow\";\n\nimport \"./styles.css\";\n\n/**The color picker opens next to control points like a context menu. This constant gives it a bit of space. */\nconst TFEDITOR_COLOR_PICKER_MARGIN_X_PX = 2;\n/** If a control point is within this distance of the bottom of the screen, open the color picker upward */\nconst TFEDITOR_COLOR_PICKER_OPEN_UPWARD_MARGIN_PX = 310;\n\nconst TFEDITOR_GRADIENT_MAX_OPACITY = 0.75;\nconst TFEDITOR_NUM_TICKS = 4;\n/**\n * If the first or last \"round\" tick mark is within this ratio of the end of the x axis, remove it to get it out of the\n * way of the tick mark right at the end.\n *\n * For instance, if the x range is [0, 255], the last tick mark d3 generates will likely be at 250. That should be\n * removed to get it out of the way of the tick mark at 255! But if the range is [0, 390], it may be that the last tick\n * mark is at 300. It would make no sense to remove that tick mark to make space for one at 390.\n */\nconst TFEDITOR_END_TICK_MARGIN = 0.1;\n\nconst TFEDITOR_MARGINS = {\n  top: 18,\n  right: 20,\n  bottom: 30, // includes space for x-axis\n  left: 25,\n};\n\nconst MOUSE_EVENT_BUTTONS_PRIMARY = 1;\n\nconst enum TfEditorRampSliderHandle {\n  Min = \"min\",\n  Max = \"max\",\n}\n\ntype TfEditorProps = {\n  id: string;\n  width: number;\n  height: number;\n  channelData: Channel;\n  changeChannelSetting: SingleChannelSettingUpdater;\n  colorizeEnabled: boolean;\n  colorizeAlpha: number;\n  useControlPoints: boolean;\n  controlPoints: ControlPoint[];\n  ramp: [number, number];\n  plotMin: number;\n  plotMax: number;\n};\n\nconst TF_GENERATORS: Record<string, (histogram: Histogram) => Lut> = {\n  autoXF: (histo) => {\n    // Currently unused. min and max are the first and last bins whose values are >=10% that of the max bin\n    const [hmin, hmax] = histo.findAutoMinMax();\n    return new Lut().createFromMinMax(hmin, hmax);\n  },\n  auto2XF: (histo) => {\n    const [hmin, hmax] = histo.findAutoIJBins();\n    return new Lut().createFromMinMax(hmin, hmax);\n  },\n  auto98XF: (histo) => {\n    const hmin = histo.findBinOfPercentile(LUT_MIN_PERCENTILE);\n    const hmax = histo.findBinOfPercentile(LUT_MAX_PERCENTILE);\n    return new Lut().createFromMinMax(hmin, hmax);\n  },\n  bestFitXF: (histo) => {\n    const [hmin, hmax] = histo.findBestFitBins();\n    return new Lut().createFromMinMax(hmin, hmax);\n  },\n  resetXF: (_histo) => new Lut().createFullRange(),\n};\n\n// *---*\n// |   |\n// |   |\n//  \\ /\n//   *\n// width: 0.65 * height; height of rectangle: 0.6 * height; height of triangle: 0.4 * height\nconst sliderHandleSymbol: d3.SymbolType = {\n  draw: (context, size) => {\n    // size is symbol area in px^2\n    const height = Math.sqrt(size * 1.9);\n    const triangleHeight = height * 0.4;\n    const halfWidth = height * 0.325;\n\n    context.moveTo(-halfWidth, -height);\n    context.lineTo(halfWidth, -height);\n    context.lineTo(halfWidth, -triangleHeight);\n    context.lineTo(0, 0);\n    context.lineTo(-halfWidth, -triangleHeight);\n    context.closePath();\n  },\n};\n\nfunction binToAbsolute(value: number, histogram: Histogram): number {\n  return histogram.getValueFromBinIndex(value);\n}\n\nfunction absoluteToBin(value: number, histogram: Histogram): number {\n  return histogram.findFractionalBinOfValue(value);\n}\n\nfunction controlPointToAbsolute(cp: ControlPoint, histogram: Histogram): number {\n  // the x value of the control point is in the range [0, 255]\n  // because of the way the histogram is generated\n  // (see LUT_ENTRIES and the fact that we use Uint8Array)\n  return binToAbsolute(cp.x, histogram);\n}\n\n/** For when all control points are outside the plot's range: just fill the plot with the settings from 1 point */\nconst coverRangeWithPoint = (point: ControlPoint, plotMin: number, plotMax: number): ControlPoint[] => {\n  return [\n    { ...point, x: plotMin },\n    { ...point, x: plotMax },\n  ];\n};\n\n/** For when some control points are outside the plot's range: create an intermediate point on the edge of the range */\nconst createPointOnRangeBoundary = (outOfRangePt: ControlPoint, inRangePt: ControlPoint, x: number): ControlPoint => {\n  const rangeRatio = (x - outOfRangePt.x) / (inRangePt.x - outOfRangePt.x);\n  const opacity = outOfRangePt.opacity + (inRangePt.opacity - outOfRangePt.opacity) * rangeRatio;\n  const color = outOfRangePt.color.map((c, i) => c + (inRangePt.color[i] - c) * rangeRatio) as ColorArray;\n  return { x, opacity, color };\n};\n\n/**\n * Ensures the list of `controlPoints` exactly covers the range from `plotMin` to `plotMax` by removing any\n * out-of-range points and adding new points right at the edges of the range.\n */\nconst fitControlPointsToRange = (controlPoints: ControlPoint[], plotMin: number, plotMax: number): ControlPoint[] => {\n  const points = controlPoints.slice();\n\n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n\n  // If all control points are outside the range, just fill the range with the first or last point.\n  if (lastPoint.x < plotMin) {\n    return coverRangeWithPoint(lastPoint, plotMin, plotMax);\n  }\n  if (firstPoint.x > plotMax) {\n    return coverRangeWithPoint(firstPoint, plotMin, plotMax);\n  }\n\n  if (firstPoint.x > plotMin) {\n    // If the control points don't go all the way to the min, add a new point at the min.\n    points.unshift({ ...firstPoint, x: plotMin });\n  } else {\n    // If some control points are out of range, remove those points...\n    let outOfRangePoint: ControlPoint | undefined = undefined;\n    while (points[0].x < plotMin && points.length > 1) {\n      outOfRangePoint = points.shift();\n    }\n\n    // ...and create a new point at the edge of the range.\n    if (outOfRangePoint !== undefined) {\n      points.unshift(createPointOnRangeBoundary(outOfRangePoint, points[0], plotMin));\n    }\n  }\n\n  if (lastPoint.x < plotMax) {\n    // If the control points don't go all the way to the max, add a new point at the max.\n    points.push({ ...lastPoint, x: plotMax });\n  } else {\n    // If some control points are out of range, remove those points...\n    let outOfRangePoint: ControlPoint | undefined = undefined;\n    while (points[points.length - 1].x > plotMax && points.length > 1) {\n      outOfRangePoint = points.pop();\n    }\n\n    // ...and create a new point at the edge of the range.\n    if (outOfRangePoint !== undefined) {\n      points.push(createPointOnRangeBoundary(outOfRangePoint, points[points.length - 1], plotMax));\n    }\n  }\n\n  return points;\n};\n\n/** Defines an SVG gradient with id `id` based on the provided `controlPoints` */\nconst ControlPointGradientDef: React.FC<{ controlPoints: ControlPoint[]; id: string }> = ({ controlPoints, id }) => {\n  const range = controlPoints[controlPoints.length - 1].x - controlPoints[0].x;\n  return (\n    <defs>\n      <linearGradient id={id} gradientUnits=\"objectBoundingBox\" spreadMethod=\"pad\" x2=\"100%\">\n        {controlPoints.map((cp, i) => {\n          const offset = `${((cp.x - controlPoints[0].x) / range) * 100}%`;\n          const opacity = Math.min(cp.opacity, TFEDITOR_GRADIENT_MAX_OPACITY);\n          return <stop key={i} stopColor={colorArrayToString(cp.color)} stopOpacity={opacity} offset={offset} />;\n        })}\n      </linearGradient>\n    </defs>\n  );\n};\n\n/** Retrieves the bin contents and max bin value from `histogram` */\nfunction getHistogramBinLengths(histogram: Histogram): { binLengths: number[]; max: number } {\n  const binLengths = [];\n  // TODO: Change `histogram.bins` to be readable/readonly\n  // so we don't have to copy it here!\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < histogram.getNumBins(); i++) {\n    const binLength = histogram.getBin(i);\n    binLengths.push(binLength);\n    max = Math.max(max, binLength);\n  }\n  return { binLengths, max };\n}\n\nconst colorPickerPositionToStyle = ([x, y]: [number, number]): React.CSSProperties => ({\n  position: \"absolute\",\n  [x < 0 ? \"right\" : \"left\"]: Math.abs(x),\n  [y < 0 ? \"bottom\" : \"top\"]: y,\n});\n\nconst numberFormatter = (v: number | string | undefined): string => (v === undefined ? \"\" : Number(v).toFixed(0));\n\nconst clamp = (value: number, min: number, max: number): number => Math.min(Math.max(value, min), max);\n\nconst TfEditor: React.FC<TfEditorProps> = (props) => {\n  const { changeChannelSetting, plotMin, plotMax } = props;\n\n  const innerWidth = props.width - TFEDITOR_MARGINS.left - TFEDITOR_MARGINS.right;\n  const innerHeight = props.height - TFEDITOR_MARGINS.top - TFEDITOR_MARGINS.bottom;\n\n  const [selectedPointIdx, setSelectedPointIdx] = useState<number | null>(null);\n  const [draggedPointIdx, _setDraggedPointIdx] = useState<number | TfEditorRampSliderHandle | null>(null);\n\n  const _setCPs = useCallback(\n    (p: ControlPoint[]) => changeChannelSetting({ controlPoints: p }),\n    [changeChannelSetting]\n  );\n  const setRamp = useCallback((ramp: [number, number]) => changeChannelSetting({ ramp: ramp }), [changeChannelSetting]);\n\n  // these bits of state need their freshest, most up-to-date values available in mouse event handlers. make refs!\n  const [controlPointsRef, setControlPoints] = useRefWithSetter(_setCPs, props.controlPoints);\n  const [draggedPointIdxRef, setDraggedPointIdx] = useRefWithSetter(_setDraggedPointIdx, draggedPointIdx);\n\n  // Either `null` when the control panel is closed, or an x offset into the plot to position the color picker.\n  // Positive: offset right from the left edge of the plot; negative: offset left from the right edge of the plot.\n  const [colorPickerPosition, setColorPickerPosition] = useState<[number, number] | null>(null);\n  const lastColorRef = useRef<ColorArray>(TFEDITOR_DEFAULT_COLOR);\n\n  const svgRef = useRef<SVGSVGElement>(null); // need access to SVG element to measure mouse position\n\n  const { histogram } = props.channelData;\n  const typeRange = DTYPE_RANGE[props.channelData.dtype];\n\n  // d3 scales define the mapping between data and screen space (and do the heavy lifting of generating plot axes)\n  /** `xScale` is in raw intensity range, not U8 range. We use `u8ToAbsolute` and `absoluteToU8` to translate to U8. */\n  const xScale = useMemo(\n    () => d3.scaleLinear().domain([plotMin, plotMax]).range([0, innerWidth]),\n    [innerWidth, plotMin, plotMax]\n  );\n  const plotMinU8 = useMemo(() => absoluteToBin(plotMin, histogram), [plotMin, histogram]);\n  const plotMaxU8 = useMemo(() => absoluteToBin(plotMax, histogram), [plotMax, histogram]);\n  const yScale = useMemo(() => d3.scaleLinear().domain([0, 1]).range([innerHeight, 0]), [innerHeight]);\n\n  const mouseEventToControlPointValues = (event: MouseEvent | React.MouseEvent): [number, number] => {\n    const svgRect = svgRef.current?.getBoundingClientRect() ?? { x: 0, y: 0 };\n    return [\n      absoluteToBin(xScale.invert(clamp(event.clientX - svgRect.x - TFEDITOR_MARGINS.left, 0, innerWidth)), histogram),\n      yScale.invert(clamp(event.clientY - svgRect.y - TFEDITOR_MARGINS.top, 0, innerHeight)),\n    ];\n  };\n\n  const dragControlPoint = (draggedIdx: number, x: number, opacity: number): void => {\n    const newControlPoints = [...controlPointsRef.current];\n    const draggedPoint = newControlPoints[draggedIdx];\n    draggedPoint.x = x;\n    draggedPoint.opacity = opacity;\n\n    // Remove control points to keep the list sorted by x value\n    const bisector = d3.bisector<ControlPoint, ControlPoint>((a, b) => a.x - b.x);\n    const idxLeft = bisector.left(newControlPoints, draggedPoint);\n    const idxRight = bisector.right(newControlPoints, draggedPoint);\n\n    if (idxLeft < draggedIdx) {\n      const numPointsToRemove = draggedIdx - idxLeft; // should almost always be 1\n      newControlPoints.splice(idxLeft, numPointsToRemove);\n\n      const newIdx = draggedIdx - numPointsToRemove;\n      setDraggedPointIdx(newIdx);\n      setSelectedPointIdx(newIdx);\n    } else if (idxRight > draggedIdx + 1) {\n      newControlPoints.splice(draggedIdx + 1, idxRight - draggedIdx - 1);\n    }\n\n    setControlPoints(newControlPoints);\n  };\n\n  const dragRampSlider = (handle: TfEditorRampSliderHandle, x: number): void => {\n    if (handle === TfEditorRampSliderHandle.Min) {\n      const max = props.ramp[1];\n      setRamp([Math.min(x, max), max]);\n    } else {\n      const min = props.ramp[0];\n      setRamp([min, Math.max(x, min)]);\n    }\n  };\n\n  const handlePlotPointerDown: React.PointerEventHandler<SVGSVGElement> = (event) => {\n    if (props.useControlPoints) {\n      // Advanced mode - we're either creating a new control point or selecting/dragging an existing one\n      if (draggedPointIdxRef.current === null && event.button === 0) {\n        // this click is not on an existing point - create a new one\n        const [x, opacity] = mouseEventToControlPointValues(event);\n        const point = { x, opacity, color: lastColorRef.current };\n\n        // add new control point to controlPoints\n        const index = d3.bisector<ControlPoint, ControlPoint>((a, b) => a.x - b.x).left(props.controlPoints, point);\n        setDraggedPointIdx(index);\n\n        const newControlPoints = [...props.controlPoints];\n        newControlPoints.splice(index, 0, point);\n        setControlPoints(newControlPoints);\n      } else {\n        // this click is on an existing point - update current points to ref (may have been remapped since last edit)\n        controlPointsRef.current = props.controlPoints;\n      }\n\n      if (typeof draggedPointIdxRef.current !== \"string\") {\n        setSelectedPointIdx(draggedPointIdxRef.current);\n      }\n    }\n\n    if (event.button === 0 && draggedPointIdxRef.current !== null) {\n      // get set up to drag the point around, even if the mouse leaves the SVG element\n      event.currentTarget.setPointerCapture(event.nativeEvent.pointerId);\n    } else {\n      setDraggedPointIdx(null);\n    }\n  };\n\n  const handlePlotPointerMove: React.PointerEventHandler<SVGSVGElement> = (event) => {\n    if (draggedPointIdxRef.current === null) {\n      return;\n    }\n\n    if ((event.buttons & MOUSE_EVENT_BUTTONS_PRIMARY) === 0) {\n      handleDragEnd(event);\n      return;\n    }\n\n    event.stopPropagation();\n    event.preventDefault();\n    const [x, opacity] = mouseEventToControlPointValues(event);\n\n    // `draggedPointIdxRef` may either be a number (control point index) or a string (ramp slider handle).\n    // The result of this check should always be the same as `props.useControlPoints`, but this narrows the type for TS\n    if (typeof draggedPointIdxRef.current === \"number\") {\n      dragControlPoint(draggedPointIdxRef.current, x, opacity);\n    } else {\n      dragRampSlider(draggedPointIdxRef.current, x);\n    }\n  };\n\n  const handleDragEnd: React.PointerEventHandler<SVGSVGElement> = (event) => {\n    setDraggedPointIdx(null);\n    event.currentTarget.releasePointerCapture(event.pointerId);\n  };\n\n  const handleControlPointContextMenu: React.MouseEventHandler<SVGCircleElement> = (event) => {\n    event.preventDefault();\n    if (!event.target || !svgRef.current) {\n      setColorPickerPosition(null);\n      return;\n    }\n\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const cpRect = (event.target as SVGCircleElement).getBoundingClientRect();\n    const cpRectCenter = cpRect.left + cpRect.width / 2;\n\n    // If the control point is closer to the left edge of the SVG, open the color picker to the right\n    const openLeft = cpRectCenter - svgRect.left < svgRect.width / 2;\n    const xPosition = openLeft\n      ? cpRect.right - svgRect.left + TFEDITOR_COLOR_PICKER_MARGIN_X_PX\n      : cpRect.left - svgRect.right - TFEDITOR_COLOR_PICKER_MARGIN_X_PX;\n\n    // If the control point is too close to the bottom of the screen, open the color picker upward\n    const openUp = window.innerHeight - cpRect.bottom < TFEDITOR_COLOR_PICKER_OPEN_UPWARD_MARGIN_PX;\n    const yPosition = openUp ? svgRect.top - cpRect.bottom : cpRect.top - svgRect.top;\n    setColorPickerPosition([xPosition, yPosition]);\n  };\n\n  const handleChangeColor = (color: ColorResult): void => {\n    lastColorRef.current = colorObjectToArray(color.rgb);\n    if (selectedPointIdx !== null) {\n      const newControlPoints = [...props.controlPoints];\n      newControlPoints[selectedPointIdx].color = lastColorRef.current;\n      setControlPoints(newControlPoints);\n    }\n  };\n\n  const controlPointsToRender = useMemo(() => {\n    const points = props.useControlPoints ? props.controlPoints.slice() : rampToControlPoints(props.ramp);\n    return fitControlPointsToRange(points, plotMinU8, plotMaxU8);\n  }, [props.controlPoints, props.ramp, props.useControlPoints, plotMinU8, plotMaxU8]);\n\n  /** d3-generated svg data string representing both the line between points and the region filled with gradient */\n  const areaPath = useMemo(() => {\n    const areaGenerator = d3\n      .area<ControlPoint>()\n      .x((d) => xScale(controlPointToAbsolute(d, histogram)))\n      .y0((d) => yScale(d.opacity))\n      .y1(innerHeight)\n      .curve(d3.curveLinear);\n    return areaGenerator(controlPointsToRender) ?? undefined;\n  }, [controlPointsToRender, xScale, yScale, innerHeight, histogram]);\n\n  /** d3-generated svg data string representing the \"basic mode\" min/max slider handles */\n  const sliderHandlePath = useMemo(() => d3.symbol().type(sliderHandleSymbol).size(80)() ?? undefined, []);\n\n  // The below `useCallback`s are used as \"ref callbacks\" - passed as the `ref` prop of SVG elements in order to render\n  // these elements' content using D3. They are called when the ref'd component mounts and unmounts, and whenever their\n  // identity changes (i.e. whenever their dependencies change).\n\n  const xAxisRef = useCallback(\n    (el: SVGGElement) => {\n      // generate tick marks\n      const ticks = xScale.ticks(TFEDITOR_NUM_TICKS);\n\n      // make sure we have sensible tick marks right at the min and max of the x axis\n      const [min, max] = xScale.domain();\n      const domain = max - min;\n\n      if ((ticks[0] - min) / domain < TFEDITOR_END_TICK_MARGIN) {\n        ticks[0] = min;\n      } else {\n        ticks.unshift(min);\n      }\n\n      if ((ticks[ticks.length - 1] - min) / domain > 1 - TFEDITOR_END_TICK_MARGIN) {\n        ticks[ticks.length - 1] = max;\n      } else {\n        ticks.push(max);\n      }\n\n      // now make the axis!\n      d3.select(el).call(\n        d3\n          .axisBottom(xScale)\n          .tickValues(ticks)\n          .tickPadding(props.useControlPoints ? 3 : 10) // get tick labels out of the way of sliders in \"basic\" mode\n      );\n    },\n    [xScale, props.useControlPoints]\n  );\n\n  const yAxisRef = useCallback(\n    (el: SVGGElement) => d3.select(el).call(d3.axisLeft(yScale).ticks(TFEDITOR_NUM_TICKS)),\n    [yScale]\n  );\n\n  const histogramRef = useCallback(\n    (el: SVGGElement) => {\n      if (el === null) {\n        return;\n      }\n      const numBins = histogram.getNumBins();\n      if (numBins < 1) {\n        return;\n      }\n      const { binLengths, max } = getHistogramBinLengths(histogram);\n      const start = Math.max(0, Math.ceil(plotMinU8));\n      const end = Math.min(numBins, Math.floor(plotMaxU8));\n      const binLengthsToRender = binLengths.slice(start, end);\n\n      const barWidth = innerWidth / (plotMaxU8 - plotMinU8);\n      const binScale = d3.scaleLog().domain([0.1, max]).range([innerHeight, 0]).base(2).clamp(true);\n\n      d3.select(el)\n        .selectAll(\".bar\") // select all the bars of the histogram\n        .data(binLengthsToRender) // bind the histogram bins to this selection\n        .join(\"rect\") // ensure we have exactly as many bound `rect` elements in the DOM as we have histogram bins\n        .attr(\"class\", \"bar\")\n        .attr(\"width\", barWidth)\n        .attr(\"x\", (_len, idx) => xScale(binToAbsolute(idx + start, histogram))) // set position and height from data\n        .attr(\"y\", (len) => binScale(len))\n        .attr(\"height\", (len) => innerHeight - binScale(len));\n    },\n    [xScale, histogram, innerWidth, innerHeight, plotMinU8, plotMaxU8]\n  );\n\n  const applyTFGenerator = useCallback(\n    (generator: string): void => {\n      setSelectedPointIdx(null);\n      lastColorRef.current = TFEDITOR_DEFAULT_COLOR;\n      const lut = TF_GENERATORS[generator](histogram);\n      if (props.useControlPoints) {\n        setControlPoints(lut.controlPoints.map((cp) => ({ ...cp, color: TFEDITOR_DEFAULT_COLOR })));\n      } else {\n        setRamp(controlPointsToRamp(lut.controlPoints));\n      }\n    },\n    [histogram, props.useControlPoints, setControlPoints, setRamp]\n  );\n\n  const createTFGeneratorButton = (generator: string, name: string, description: string): React.ReactNode => (\n    <Tooltip title={description} placement=\"top\">\n      <Button size=\"small\" onClick={() => applyTFGenerator(generator)}>\n        {name}\n      </Button>\n    </Tooltip>\n  );\n\n  // create one svg circle element for each control point\n  const controlPointCircles = props.useControlPoints\n    ? props.controlPoints\n        .filter((cp) => plotMinU8 <= cp.x && cp.x <= plotMaxU8) // filter out-of-range points\n        .map((cp, i) => (\n          <circle\n            key={i}\n            className={i === selectedPointIdx ? \"selected\" : \"\"}\n            cx={xScale(controlPointToAbsolute(cp, histogram))}\n            cy={yScale(cp.opacity)}\n            style={{ fill: colorArrayToString(cp.color) }}\n            r={5}\n            onPointerDown={() => setDraggedPointIdx(i)}\n            onContextMenu={handleControlPointContextMenu}\n          />\n        ))\n    : null;\n  // move selected control point to the end so it's drawn last and not occluded by other nearby points\n  if (controlPointCircles !== null && selectedPointIdx !== null) {\n    controlPointCircles.push(controlPointCircles.splice(selectedPointIdx, 1)[0]);\n  }\n\n  const viewerModeString = props.useControlPoints ? \"advanced\" : \"basic\";\n\n  return (\n    <div>\n      {/* ----- PRESET BUTTONS ----- */}\n      <div className=\"button-row\">\n        {createTFGeneratorButton(\"auto98XF\", \"Default\", \"Ramp from 50th percentile to 98th\")}\n        {createTFGeneratorButton(\"auto2XF\", \"IJ Auto\", `Emulates ImageJ's \"auto\" button`)}\n        {createTFGeneratorButton(\"resetXF\", \"Auto 1\", \"Ramp over the full data range (0% to 100%)\")}\n        {createTFGeneratorButton(\"bestFitXF\", \"Auto 2\", \"Ramp over the middle 80% of data\")}\n        <Checkbox\n          checked={props.useControlPoints}\n          onChange={(e) => changeChannelSetting({ useControlPoints: e.target.checked })}\n          style={{ marginLeft: \"auto\" }}\n        >\n          Advanced\n        </Checkbox>\n      </div>\n\n      {/* ----- MIN/MAX SPINBOXES ----- */}\n      {!props.useControlPoints && (\n        <div className=\"tf-editor-control-row ramp-row\">\n          Levels min/max\n          <InputNumber\n            value={binToAbsolute(props.ramp[0], histogram)}\n            onChange={(v) => v !== null && setRamp([absoluteToBin(v, histogram), props.ramp[1]])}\n            formatter={numberFormatter}\n            min={typeRange.min}\n            max={Math.min(binToAbsolute(props.ramp[1], histogram), typeRange.max)}\n            size=\"small\"\n            controls={false}\n          />\n          <InputNumber\n            value={binToAbsolute(props.ramp[1], histogram)}\n            onChange={(v) => v !== null && setRamp([props.ramp[0], absoluteToBin(v, histogram)])}\n            formatter={numberFormatter}\n            min={Math.max(typeRange.min, binToAbsolute(props.ramp[0], histogram))}\n            max={typeRange.max}\n            size=\"small\"\n            controls={false}\n          />\n        </div>\n      )}\n\n      {/* ----- CONTROL POINT COLOR PICKER ----- */}\n      {colorPickerPosition !== null && (\n        <div className=\"tf-editor-popover\">\n          <div className=\"tf-editor-cover\" onClick={() => setColorPickerPosition(null)} />\n          <div style={colorPickerPositionToStyle(colorPickerPosition)}>\n            <SketchPicker\n              color={colorArrayToObject(lastColorRef.current)}\n              onChange={handleChangeColor}\n              disableAlpha={true}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* ----- PLOT SVG ----- */}\n      <svg\n        className={`tf-editor-svg ${viewerModeString}${draggedPointIdx !== null ? \" dragging\" : \"\"}`}\n        ref={svgRef}\n        width={props.width}\n        height={props.height}\n        onPointerDown={handlePlotPointerDown}\n        onPointerMove={handlePlotPointerMove}\n        onPointerUp={handleDragEnd}\n      >\n        <ControlPointGradientDef controlPoints={controlPointsToRender} id={`tfGradient-${props.id}`} />\n        <g transform={`translate(${TFEDITOR_MARGINS.left},${TFEDITOR_MARGINS.top})`}>\n          {/* histogram bars */}\n          <g ref={histogramRef} />\n          {/* line between control points, and the gradient under it */}\n          <path className=\"line\" fill={`url(#tfGradient-${props.id})`} d={areaPath} />\n          {/* plot axes */}\n          <g ref={xAxisRef} className=\"axis\" transform={`translate(0,${innerHeight})`} />\n          <g ref={yAxisRef} className=\"axis\" />\n          {/* \"advanced mode\" control points */}\n          {controlPointCircles}\n          {/* \"basic mode\" sliders */}\n          {!props.useControlPoints && (\n            <g className=\"ramp-sliders\">\n              {plotMinU8 <= props.ramp[0] && props.ramp[0] <= plotMaxU8 && (\n                <g transform={`translate(${xScale(binToAbsolute(props.ramp[0], histogram))})`}>\n                  <line y1={innerHeight} strokeDasharray=\"5,5\" strokeWidth={2} />\n                  <line\n                    className=\"ramp-slider-click-target\"\n                    y1={innerHeight}\n                    strokeWidth={6}\n                    onPointerDown={() => setDraggedPointIdx(TfEditorRampSliderHandle.Min)}\n                  />\n                  <path\n                    d={sliderHandlePath}\n                    transform={`translate(0,${innerHeight}) rotate(180)`}\n                    onPointerDown={() => setDraggedPointIdx(TfEditorRampSliderHandle.Min)}\n                  />\n                </g>\n              )}\n              {plotMinU8 <= props.ramp[1] && props.ramp[1] <= plotMaxU8 && (\n                <g transform={`translate(${xScale(binToAbsolute(props.ramp[1], histogram))})`}>\n                  <line y1={innerHeight} strokeDasharray=\"5,5\" strokeWidth={2} />\n                  <line\n                    className=\"ramp-slider-click-target\"\n                    y1={innerHeight}\n                    strokeWidth={6}\n                    onPointerDown={() => setDraggedPointIdx(TfEditorRampSliderHandle.Max)}\n                  />\n                  <path d={sliderHandlePath} onPointerDown={() => setDraggedPointIdx(TfEditorRampSliderHandle.Max)} />\n                </g>\n              )}\n            </g>\n          )}\n        </g>\n      </svg>\n\n      {/* ----- PLOT RANGE ----- */}\n      <div className=\"tf-editor-control-row plot-range-row\">\n        Plot min/max\n        <InputNumber\n          value={plotMin}\n          onChange={(v) => v !== null && changeChannelSetting({ plotMin: v, plotMax: Math.max(v + 1, plotMax) })}\n          formatter={numberFormatter}\n          min={typeRange.min}\n          max={typeRange.max - 1}\n          size=\"small\"\n          controls={false}\n        />\n        <InputNumber\n          value={plotMax}\n          onChange={(v) => v !== null && changeChannelSetting({ plotMax: v, plotMin: Math.min(v - 1, plotMin) })}\n          formatter={numberFormatter}\n          min={typeRange.min + 1}\n          max={typeRange.max}\n          size=\"small\"\n          controls={false}\n        />\n        <Button\n          size=\"small\"\n          style={{ marginLeft: \"12px\" }}\n          onClick={() => changeChannelSetting({ plotMin: props.channelData.rawMin, plotMax: props.channelData.rawMax })}\n        >\n          Fit to data\n        </Button>\n        <Button size=\"small\" onClick={() => changeChannelSetting({ plotMin: typeRange.min, plotMax: typeRange.max })}>\n          Full range\n        </Button>\n      </div>\n\n      {/* ----- COLORIZE SLIDER ----- */}\n      <SliderRow\n        label={\n          <Checkbox\n            checked={props.colorizeEnabled}\n            onChange={(e) => changeChannelSetting({ colorizeEnabled: e.target.checked })}\n          >\n            Colorize\n          </Checkbox>\n        }\n        max={1}\n        start={props.colorizeAlpha}\n        onUpdate={(values) => changeChannelSetting({ colorizeAlpha: values[0] })}\n        hideSlider={!props.colorizeEnabled}\n      />\n    </div>\n  );\n};\n\nexport default TfEditor;\n","import { Channel } from \"@aics/vole-core\";\nimport { Button, Checkbox, List } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport React, { useCallback, useState } from \"react\";\n\nimport { ISOSURFACE_OPACITY_SLIDER_MAX } from \"../../shared/constants\";\nimport { IsosurfaceFormat } from \"../../shared/types\";\nimport { colorArrayToObject, ColorObject, colorObjectToArray } from \"../../shared/utils/colorRepresentations\";\nimport {\n  type ChannelSettingUpdater,\n  type ChannelState,\n  type SingleChannelSettingUpdater,\n} from \"../ViewerStateProvider/types\";\n\nimport ColorPicker from \"../ColorPicker\";\nimport SliderRow from \"../shared/SliderRow\";\nimport ViewerIcon from \"../shared/ViewerIcon\";\nimport TfEditor from \"../TfEditor\";\n\nimport \"./styles.css\";\n\ninterface ChannelsWidgetRowProps {\n  index: number;\n  name: string;\n  channelState: ChannelState;\n  channelDataForChannel: Channel;\n\n  changeChannelSetting: ChannelSettingUpdater;\n\n  saveIsosurface: (channelIndex: number, type: IsosurfaceFormat) => void;\n  onColorChangeComplete?: (newRGB: ColorObject, oldRGB?: ColorObject, index?: number) => void;\n}\n\nconst ChannelsWidgetRow: React.FC<ChannelsWidgetRowProps> = (props: ChannelsWidgetRowProps) => {\n  const { index, changeChannelSetting, saveIsosurface, channelState } = props;\n  const [controlsOpen, setControlsOpen] = useState(false);\n\n  const changeSettingForThisChannel = useCallback<SingleChannelSettingUpdater>(\n    (value) => changeChannelSetting(index, value),\n    [changeChannelSetting, index]\n  );\n\n  const volumeCheckHandler = ({ target }: CheckboxChangeEvent): void => {\n    changeChannelSetting(index, { volumeEnabled: target.checked });\n  };\n\n  const isosurfaceCheckHandler = ({ target }: CheckboxChangeEvent): void => {\n    changeChannelSetting(index, { isosurfaceEnabled: target.checked });\n  };\n\n  const onIsovalueChange = ([newValue]: number[]): void => changeSettingForThisChannel({ isovalue: newValue });\n  const onOpacityChange = ([newValue]: number[]): void =>\n    changeSettingForThisChannel({ opacity: newValue / ISOSURFACE_OPACITY_SLIDER_MAX });\n\n  const onColorChange = (newRGB: ColorObject, _oldRGB?: ColorObject, index?: number): void => {\n    const color = colorObjectToArray(newRGB);\n    props.changeChannelSetting(index!, { color: color });\n  };\n\n  const createColorPicker = (): React.ReactNode => (\n    <ColorPicker\n      color={colorArrayToObject(channelState.color)}\n      onColorChange={onColorChange}\n      onColorChangeComplete={props.onColorChangeComplete}\n      disableAlpha={true}\n      idx={index}\n      width={18}\n    />\n  );\n\n  const visibilityControls = (\n    <div className=\"channel-visibility-controls\">\n      <Checkbox checked={channelState.volumeEnabled} onChange={volumeCheckHandler}>\n        Vol\n      </Checkbox>\n      <Checkbox checked={channelState.isosurfaceEnabled} onChange={isosurfaceCheckHandler}>\n        Surf\n      </Checkbox>\n      <Button\n        icon={<ViewerIcon type=\"preferences\" style={{ fontSize: \"16px\" }} />}\n        onClick={() => setControlsOpen(!controlsOpen)}\n        title=\"Open channel settings\"\n        type=\"text\"\n      />\n    </div>\n  );\n\n  const createTFEditor = (): React.ReactNode => {\n    const { controlPoints, colorizeEnabled, colorizeAlpha, useControlPoints, ramp, plotMin, plotMax } = channelState;\n    return (\n      <TfEditor\n        id={\"TFEditor\" + index}\n        width={418}\n        height={145}\n        channelData={props.channelDataForChannel}\n        controlPoints={controlPoints}\n        changeChannelSetting={changeSettingForThisChannel}\n        colorizeEnabled={colorizeEnabled}\n        colorizeAlpha={colorizeAlpha}\n        useControlPoints={useControlPoints}\n        ramp={ramp}\n        plotMin={plotMin}\n        plotMax={plotMax}\n      />\n    );\n  };\n\n  const renderSurfaceControls = (): React.ReactNode => (\n    <div>\n      <SliderRow\n        label=\"Isovalue\"\n        max={255}\n        start={channelState.isovalue}\n        onChange={onIsovalueChange}\n        formatInteger={true}\n      />\n      <SliderRow\n        label=\"Opacity\"\n        max={ISOSURFACE_OPACITY_SLIDER_MAX}\n        start={channelState.opacity * ISOSURFACE_OPACITY_SLIDER_MAX}\n        onChange={onOpacityChange}\n        formatInteger={true}\n      />\n      <div className=\"button-row\">\n        <Button onClick={() => saveIsosurface(index, \"GLTF\")}>Export GLTF</Button>\n        <Button onClick={() => saveIsosurface(index, \"STL\")}>Export STL</Button>\n      </div>\n    </div>\n  );\n\n  const renderControls = (): React.ReactNode => {\n    if (!channelState.volumeEnabled && !channelState.isosurfaceEnabled) {\n      return <h4 style={{ fontStyle: \"italic\" }}>Not currently visible</h4>;\n    }\n    return (\n      <>\n        {channelState.volumeEnabled && (\n          <>\n            <h4>Volume settings:</h4>\n            {createTFEditor()}\n          </>\n        )}\n        {channelState.isosurfaceEnabled && (\n          <>\n            <h4>Surface settings:</h4>\n            {renderSurfaceControls()}\n          </>\n        )}\n      </>\n    );\n  };\n\n  const rowClass = controlsOpen ? \"channel-row\" : \"channel-row controls-closed\";\n  return (\n    <List.Item key={index} className={rowClass}>\n      <List.Item.Meta title={props.name} avatar={createColorPicker()} />\n      {visibilityControls}\n      {controlsOpen && <div style={{ width: \"100%\" }}>{renderControls()}</div>}\n    </List.Item>\n  );\n};\n\nexport default ChannelsWidgetRow;\n","import React from \"react\";\nimport { Checkbox } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\n\ntype SharedCheckboxProps<T> = React.PropsWithChildren<{\n  allOptions: T[];\n  checkedList: T[];\n  onChange: (checked: boolean, checkedList: T[]) => void;\n  style?: React.CSSProperties;\n}>;\n\nconst SharedCheckbox = <T,>(props: SharedCheckboxProps<T>): React.ReactElement => {\n  const onCheckAllChange = ({ target }: CheckboxChangeEvent): void => props.onChange(target.checked, props.allOptions);\n\n  const indeterminate = !!props.checkedList.length && props.checkedList.length < props.allOptions.length;\n  const checkAll = props.checkedList.length === props.allOptions.length;\n\n  return (\n    <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll} style={props.style}>\n      {props.children}\n    </Checkbox>\n  );\n};\n\nexport default SharedCheckbox;\n","import { Channel } from \"@aics/vole-core\";\nimport { Collapse, CollapseProps, List } from \"antd\";\nimport React from \"react\";\n\nimport type { IsosurfaceFormat } from \"../shared/types\";\nimport type { ColorArray, ColorObject } from \"../shared/utils/colorRepresentations\";\nimport type { ChannelGrouping, ViewerChannelSettings } from \"../shared/utils/viewerChannelSettings\";\nimport { getDisplayName } from \"../shared/utils/viewerChannelSettings\";\nimport { select, useViewerState } from \"../state/store\";\nimport type { ChannelStateKey } from \"./ViewerStateProvider/types\";\n\nimport ChannelsWidgetRow from \"./ChannelsWidgetRow\";\nimport SharedCheckBox from \"./shared/SharedCheckBox\";\n\nexport type ChannelsWidgetProps = {\n  channelDataChannels: Channel[] | undefined;\n  channelGroupedByType: ChannelGrouping;\n  viewerChannelSettings?: ViewerChannelSettings;\n\n  saveIsosurface: (channelIndex: number, type: IsosurfaceFormat) => void;\n  onApplyColorPresets: (presets: ColorArray[]) => void;\n\n  filterFunc?: (key: string) => boolean;\n  onColorChangeComplete?: (newRGB: ColorObject, oldRGB?: ColorObject, index?: number) => void;\n};\n\nconst ChannelsWidget: React.FC<ChannelsWidgetProps> = (props: ChannelsWidgetProps) => {\n  const { channelGroupedByType, channelDataChannels, filterFunc, viewerChannelSettings } = props;\n\n  const changeChannelSetting = useViewerState(select(\"changeChannelSetting\"));\n  const channelSettings = useViewerState(select(\"channelSettings\"));\n\n  const createCheckboxHandler = (key: ChannelStateKey) => (value: boolean, channelArray: number[]) => {\n    changeChannelSetting(channelArray, { [key]: value });\n  };\n\n  const showVolumes = createCheckboxHandler(\"volumeEnabled\");\n  const showSurfaces = createCheckboxHandler(\"isosurfaceEnabled\");\n\n  const renderVisibilityControls = (channelArray: number[]): React.ReactNode => {\n    let volChecked: number[] = [];\n    let isoChecked: number[] = [];\n    channelArray.forEach((channelIndex: number) => {\n      const channelSetting = channelSettings[channelIndex];\n      if (!channelSetting) return;\n      if (channelSetting.volumeEnabled) {\n        volChecked.push(channelIndex);\n      }\n      if (channelSetting.isosurfaceEnabled) {\n        isoChecked.push(channelIndex);\n      }\n    });\n\n    return (\n      <>\n        <SharedCheckBox allOptions={channelArray} checkedList={volChecked} onChange={showVolumes}>\n          All Vol\n        </SharedCheckBox>\n        <SharedCheckBox\n          allOptions={channelArray}\n          checkedList={isoChecked}\n          onChange={showSurfaces}\n          // keep checkboxes lined up when channel rows have settings icon and headers don't\n          style={{ flex: 5 }}\n        >\n          All Surf\n        </SharedCheckBox>\n      </>\n    );\n  };\n\n  const renderChannelRow = (channelIndex: number): React.ReactNode => {\n    const thisChannelSettings = channelSettings[channelIndex];\n\n    return thisChannelSettings ? (\n      <ChannelsWidgetRow\n        key={`${channelIndex}_${thisChannelSettings.name}_${channelIndex}`}\n        index={channelIndex}\n        channelDataForChannel={channelDataChannels![channelIndex]}\n        name={getDisplayName(thisChannelSettings.name, channelIndex, viewerChannelSettings)}\n        channelState={thisChannelSettings}\n        changeChannelSetting={changeChannelSetting}\n        onColorChangeComplete={props.onColorChangeComplete}\n        saveIsosurface={props.saveIsosurface}\n      />\n    ) : null;\n  };\n\n  const firstKey = Object.keys(channelGroupedByType)[0];\n  const rows: CollapseProps[\"items\"] =\n    channelDataChannels &&\n    Object.entries(channelGroupedByType)\n      .filter(([key, channelArray]) => channelArray.length > 0 && (!filterFunc || filterFunc(key)))\n      .map(([key, channelArray]) => {\n        const children = <List itemLayout=\"horizontal\" dataSource={channelArray} renderItem={renderChannelRow} />;\n\n        return {\n          key,\n          label: key,\n          children,\n          extra: renderVisibilityControls(channelArray),\n        };\n      });\n\n  return <Collapse bordered={false} defaultActiveKey={firstKey} items={rows} collapsible=\"icon\" />;\n};\n\nexport default ChannelsWidget;\n","import React from \"react\";\n\nimport { Styles } from \"../shared/types\";\nimport { ColorArray, colorArrayToObject, colorObjectToArray } from \"../shared/utils/colorRepresentations\";\nimport { select, useViewerState } from \"../state/store\";\n\nimport ColorPicker from \"./ColorPicker\";\n\nconst ColorPickerRow: React.FC<{\n  color: ColorArray;\n  onColorChange: (color: ColorArray) => void;\n  children?: React.ReactNode;\n}> = ({ color, onColorChange, children }) => (\n  <div style={STYLES.colorPickerRow}>\n    <span style={STYLES.colorPicker}>\n      <ColorPicker\n        color={colorArrayToObject(color)}\n        onColorChange={(color) => onColorChange(colorObjectToArray(color))}\n        width={18}\n        disableAlpha={true}\n      />\n    </span>\n    <span>{children}</span>\n  </div>\n);\n\nexport interface CustomizeWidgetProps {\n  visibleControls: {\n    backgroundColorPicker: boolean;\n    boundingBoxColorPicker: boolean;\n  };\n}\n\nconst CustomizeWidget: React.FC<CustomizeWidgetProps> = (props) => {\n  const showBoundingBox = useViewerState(select(\"showBoundingBox\"));\n  const backgroundColor = useViewerState(select(\"backgroundColor\"));\n  const boundingBoxColor = useViewerState(select(\"boundingBoxColor\"));\n  const changeViewerSetting = useViewerState(select(\"changeViewerSetting\"));\n\n  return (\n    <>\n      {props.visibleControls.backgroundColorPicker && (\n        <ColorPickerRow\n          color={backgroundColor}\n          onColorChange={(color) => changeViewerSetting(\"backgroundColor\", color)}\n        >\n          Background color\n        </ColorPickerRow>\n      )}\n      {props.visibleControls.boundingBoxColorPicker && (\n        <ColorPickerRow\n          color={boundingBoxColor}\n          onColorChange={(color) => changeViewerSetting(\"boundingBoxColor\", color)}\n        >\n          Bounding box color\n          {!showBoundingBox && <i> - bounding box turned off</i>}\n        </ColorPickerRow>\n      )}\n    </>\n  );\n};\n\nconst STYLES: Styles = {\n  colorPickerRow: {\n    padding: \"14px 0\",\n    display: \"flex\",\n    borderBottom: \"1px solid #6e6e6e\",\n    color: \"var(--color-controlpanel-text)\",\n  },\n  colorPicker: {\n    marginRight: \"16px\",\n  },\n};\n\nexport default CustomizeWidget;\n","import { Checkbox } from \"antd\";\nimport React from \"react\";\n\nimport { select, useViewerState } from \"../state/store\";\n\nimport SliderRow from \"./shared/SliderRow\";\n\ntype GlobalVolumeControlKey = \"maskAlpha\" | \"brightness\" | \"density\" | \"levels\";\n\nexport interface GlobalVolumeControlsProps {\n  imageName: string | undefined;\n  pixelSize: [number, number, number];\n  visibleControls: {\n    alphaMaskSlider: boolean;\n    brightnessSlider: boolean;\n    densitySlider: boolean;\n    levelsSliders: boolean;\n    interpolationControl: boolean;\n  };\n}\n\nconst GlobalVolumeControls: React.FC<GlobalVolumeControlsProps> = (props) => {\n  const maskAlpha = useViewerState(select(\"maskAlpha\"));\n  const brightness = useViewerState(select(\"brightness\"));\n  const density = useViewerState(select(\"density\"));\n  const levels = useViewerState(select(\"levels\"));\n  const interpolationEnabled = useViewerState(select(\"interpolationEnabled\"));\n  const changeViewerSetting = useViewerState(select(\"changeViewerSetting\"));\n\n  const createSliderRow = (\n    label: string,\n    start: number | number[],\n    max: number,\n    propKey: GlobalVolumeControlKey\n  ): React.ReactNode => {\n    const onUpdate = (_strValues: string[], _handle: number, values: number[]): void => {\n      const selectValue = values.length === 1 ? values[0] : (values as [number, number, number]);\n      changeViewerSetting(propKey, selectValue);\n    };\n\n    return <SliderRow label={label} start={start} max={max} onUpdate={onUpdate} />;\n  };\n\n  const { visibleControls: showControls } = props;\n\n  return (\n    <div style={{ paddingTop: 18, paddingBottom: 22 }}>\n      {showControls.alphaMaskSlider && createSliderRow(\"mask cell\", maskAlpha, 100, \"maskAlpha\")}\n      {showControls.brightnessSlider && createSliderRow(\"brightness\", brightness, 100, \"brightness\")}\n      {showControls.densitySlider && createSliderRow(\"density\", density, 100, \"density\")}\n      {showControls.levelsSliders && createSliderRow(\"levels\", levels, 255, \"levels\")}\n      {showControls.interpolationControl && (\n        <SliderRow label=\"interpolate\">\n          <Checkbox\n            checked={interpolationEnabled}\n            onChange={({ target }) => changeViewerSetting(\"interpolationEnabled\", target.checked)}\n          />\n        </SliderRow>\n      )}\n    </div>\n  );\n};\n\nexport default GlobalVolumeControls;\n","import { RightOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\n\nimport { MetadataEntry, MetadataRecord } from \"../../shared/types\";\n\nimport \"./styles.css\";\n\ntype MetadataTableProps = {\n  metadata: MetadataRecord | MetadataEntry[];\n  topLevel?: boolean;\n};\n\ntype CollapsibleCategoryProps = {\n  metadata: MetadataRecord | MetadataEntry[];\n  title: string;\n};\n\nconst isCategory = (entry: MetadataEntry): entry is MetadataRecord | MetadataEntry[] =>\n  typeof entry === \"object\" && entry !== null;\n\nconst sortCategoriesFirst = (entry: MetadataEntry): MetadataEntry => {\n  if (!isCategory(entry) || Array.isArray(entry)) {\n    return entry;\n  }\n\n  const cats: MetadataRecord = {};\n  const vals: MetadataRecord = {};\n  for (const key in entry) {\n    if (isCategory(entry[key])) {\n      cats[key] = entry[key];\n    } else {\n      vals[key] = entry[key];\n    }\n  }\n\n  return { ...cats, ...vals };\n};\n\n/** Component to hold collapse state */\nconst MetadataCategory: React.FC<CollapsibleCategoryProps> = ({ metadata, title }) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n  const collapsedClass = collapsed ? \" metadata-collapse-collapsed\" : \"\";\n\n  return (\n    <>\n      <tr className={\"metadata-row-collapse-title\" + collapsedClass} onClick={() => setCollapsed(!collapsed)}>\n        <td colSpan={2}>\n          <span className=\"metadata-collapse-caret\">\n            <RightOutlined style={{ transform: `rotate(${collapsed ? 0 : 90}deg)` }} />\n          </span>\n          {title}\n        </td>\n      </tr>\n      <tr className={\"metadata-row-collapse-content\" + collapsedClass}>\n        <td className=\"metadata-collapse-content\" colSpan={2}>\n          <MetadataTable metadata={metadata} />\n        </td>\n      </tr>\n    </>\n  );\n};\n\nconst MetadataTable: React.FC<MetadataTableProps> = ({ metadata, topLevel }) => {\n  const metadataKeys = Object.keys(metadata);\n  const metadataIsArray = Array.isArray(metadata);\n\n  return (\n    <table className={\"viewer-metadata-table\" + (topLevel ? \" metadata-top-level\" : \"\")}>\n      <tbody>\n        {metadataKeys.map((key, idx) => {\n          const metadataValue = sortCategoriesFirst(metadataIsArray ? metadata[idx] : metadata[key]);\n\n          if (isCategory(metadataValue)) {\n            return <MetadataCategory key={key} metadata={metadataValue} title={key} />;\n          } else {\n            return (\n              <tr key={key}>\n                <td className=\"metadata-key\">{key}</td>\n                <td className=\"metadata-value\">{metadataValue + \"\"}</td>\n              </tr>\n            );\n          }\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst MetadataViewer: React.FC<{ metadata: MetadataRecord }> = ({ metadata }) => (\n  <MetadataTable metadata={metadata} topLevel={true} />\n);\n\nexport default MetadataViewer;\n","import { Button, Collapse, CollapseProps, Dropdown, Flex, MenuProps, Tooltip } from \"antd\";\nimport { MenuInfo } from \"rc-menu/lib/interface\";\nimport React from \"react\";\n\nimport { PRESET_COLOR_MAP } from \"../../shared/constants\";\nimport { MetadataRecord } from \"../../shared/types\";\nimport { select, useViewerState } from \"../../state/store\";\n\nimport ChannelsWidget from \"../ChannelsWidget\";\nimport CustomizeWidget, { CustomizeWidgetProps } from \"../CustomizeWidget\";\nimport GlobalVolumeControls, { GlobalVolumeControlsProps } from \"../GlobalVolumeControls\";\nimport MetadataViewer from \"../MetadataViewer\";\nimport ViewerIcon from \"../shared/ViewerIcon\";\n\nimport \"./styles.css\";\n\ntype PropsOf<T> = T extends React.ComponentType<infer P> ? P : never;\n\ninterface ControlPanelProps\n  extends PropsOf<typeof ChannelsWidget>,\n    PropsOf<typeof GlobalVolumeControls>,\n    PropsOf<typeof CustomizeWidget> {\n  hasImage: boolean;\n  visibleControls: GlobalVolumeControlsProps[\"visibleControls\"] &\n    CustomizeWidgetProps[\"visibleControls\"] & {\n      colorPresetsDropdown: boolean;\n      metadataViewer: boolean;\n    };\n  getMetadata: () => MetadataRecord;\n  collapsed: boolean;\n  setCollapsed: (value: boolean) => void;\n}\n\nconst enum ControlTab {\n  Channels,\n  Advanced,\n  Metadata,\n}\n\nconst ControlTabNames = {\n  [ControlTab.Channels]: \"Channel Settings\",\n  [ControlTab.Advanced]: \"Advanced Settings\",\n  [ControlTab.Metadata]: \"Metadata\",\n};\n\nfunction ControlPanel(props: ControlPanelProps): React.ReactElement {\n  const [tab, _setTab] = React.useState(ControlTab.Channels);\n  const setTab = (newTab: ControlTab): void => {\n    _setTab(newTab);\n    props.setCollapsed(false);\n  };\n  const resetToDefaultViewerState = useViewerState(select(\"resetToDefaultViewerState\"));\n\n  const controlPanelContainerRef = React.useRef<HTMLDivElement>(null);\n  const getDropdownContainer = controlPanelContainerRef.current ? () => controlPanelContainerRef.current! : undefined;\n\n  const { viewerChannelSettings, visibleControls, hasImage } = props;\n\n  // TODO key is a number, but MenuInfo assumes keys will always be strings\n  //   if future versions of antd make this type more permissive, remove ugly double-cast\n  const makeTurnOnPresetFn = ({ key }: MenuInfo): void =>\n    props.onApplyColorPresets(PRESET_COLOR_MAP[key as unknown as number].colors);\n\n  const renderColorPresetsDropdown = (): React.ReactNode => {\n    const dropDownMenuProps: MenuProps = {\n      items: PRESET_COLOR_MAP.map((preset, index) => {\n        return { key: index, label: preset.name };\n      }),\n      onClick: makeTurnOnPresetFn,\n    };\n    return (\n      <div className=\"color-presets-dropdown\">\n        <Dropdown trigger={[\"click\"]} menu={dropDownMenuProps} getPopupContainer={getDropdownContainer}>\n          <Button>\n            <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", gap: \"4px\" }}>\n              Apply palette\n              <ViewerIcon type=\"dropdownArrow\" style={{ fontSize: \"14px\" }} />\n            </div>\n          </Button>\n        </Dropdown>\n      </div>\n    );\n  };\n\n  const renderTab = (thisTab: ControlTab, icon: React.ReactNode): React.ReactNode => (\n    <Tooltip title={ControlTabNames[thisTab]} placement=\"right\" {...(!props.collapsed && { open: false })}>\n      <Button\n        className={tab === thisTab ? \"ant-btn-icon-only btn-tabactive\" : \"ant-btn-icon-only\"}\n        onClick={() => setTab(thisTab)}\n        icon={typeof icon === \"string\" ? icon : undefined}\n      >\n        {typeof icon === \"object\" && icon}\n      </Button>\n    </Tooltip>\n  );\n\n  const renderAdvancedSettings = (): React.ReactNode => {\n    const items: CollapseProps[\"items\"] = [\n      {\n        key: 0,\n        label: \"Rendering adjustments\",\n        children: (\n          <GlobalVolumeControls\n            imageName={props.imageName}\n            pixelSize={props.pixelSize}\n            visibleControls={visibleControls}\n          />\n        ),\n      },\n    ];\n    const showCustomize = visibleControls.backgroundColorPicker || visibleControls.boundingBoxColorPicker;\n\n    if (showCustomize) {\n      items.push({\n        key: 1,\n        label: \"Customize\",\n        children: <CustomizeWidget visibleControls={props.visibleControls} />,\n      });\n    }\n\n    return (\n      <Flex gap={10} vertical>\n        <Collapse bordered={false} defaultActiveKey={showCustomize ? [0, 1] : 0} items={items} />\n        <div style={{ margin: \"0 10px\", width: \"fit-content\" }}>\n          <Tooltip\n            trigger={[\"hover\", \"focus\"]}\n            placement=\"right\"\n            title=\"Clears ALL rendering settings and channel configuration to the default viewer state.\n            This will replace any edits to channel settings, color presets, and rendering adjustments.\"\n          >\n            <Button onClick={resetToDefaultViewerState}>Clear all settings</Button>\n          </Tooltip>\n        </div>\n      </Flex>\n    );\n  };\n\n  return (\n    <div className=\"control-panel-col-container\" ref={controlPanelContainerRef}>\n      <div className=\"control-panel-tab-col\" style={{ flex: \"0 0 50px\" }}>\n        <Button\n          className={\"ant-btn-icon-only btn-collapse\" + (props.collapsed ? \" btn-collapse-collapsed\" : \"\")}\n          onClick={() => props.setCollapsed(!props.collapsed)}\n        >\n          <ViewerIcon type=\"closePanel\" />\n        </Button>\n\n        <div className=\"tab-divider\" />\n\n        {renderTab(ControlTab.Channels, <ViewerIcon type=\"channels\" />)}\n        {renderTab(ControlTab.Advanced, <ViewerIcon type=\"preferences\" />)}\n        {props.visibleControls.metadataViewer && renderTab(ControlTab.Metadata, <ViewerIcon type=\"metadata\" />)}\n      </div>\n      <div className=\"control-panel-col\" style={{ flex: \"0 0 450px\" }}>\n        <h2 className=\"control-panel-title\">{ControlTabNames[tab]}</h2>\n        {visibleControls.colorPresetsDropdown && tab === ControlTab.Channels && renderColorPresetsDropdown()}\n        {hasImage && (\n          <div className=\"channel-rows-list\">\n            {tab === ControlTab.Channels && (\n              <ChannelsWidget\n                channelDataChannels={props.channelDataChannels}\n                channelGroupedByType={props.channelGroupedByType}\n                saveIsosurface={props.saveIsosurface}\n                onColorChangeComplete={props.onColorChangeComplete}\n                onApplyColorPresets={props.onApplyColorPresets}\n                filterFunc={props.filterFunc}\n                viewerChannelSettings={viewerChannelSettings}\n              />\n            )}\n            {tab === ControlTab.Advanced && renderAdvancedSettings()}\n            {tab === ControlTab.Metadata && <MetadataViewer metadata={props.getMetadata()} />}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ControlPanel;\n","import { VolumeLoadError, VolumeLoadErrorType } from \"@aics/vole-core\";\nimport { RightOutlined } from \"@ant-design/icons\";\nimport { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { useConstructor } from \"../../shared/utils/hooks\";\n\nimport \"./styles.css\";\n\nconst IssueLink: React.FC<React.PropsWithChildren<{ bug?: boolean }>> = ({ bug, children }) => (\n  <a\n    href={`https://github.com/allen-cell-animated/vole-app/issues/new${bug ? \"?template=bug_report.md\" : \"/choose\"}`}\n    target=\"_blank\"\n    rel=\"noreferrer noopener\"\n  >\n    {children}\n  </a>\n);\n\nconst UNKNOWN_ERROR_DESCRIPTION: React.ReactNode = (\n  <>\n    An unknown error occurred. Check the browser console (F12) for more details. If this looks like a bug,{\" \"}\n    <IssueLink bug>send us a bug report here</IssueLink>.\n  </>\n);\n\nconst ERROR_TYPE_DESCRIPTIONS: { [T in VolumeLoadErrorType]: React.ReactNode } = {\n  [VolumeLoadErrorType.UNKNOWN]: (\n    <>\n      An unknown error occurred while loading volume data. Check the browser console (F12) for more details. If this\n      looks like a bug, <IssueLink bug>send us a bug report here</IssueLink>.\n    </>\n  ),\n  [VolumeLoadErrorType.NOT_FOUND]: (\n    <>\n      The viewer was unable to find any volume data at the specified location. Check that the provided URL is correct\n      and try again.\n    </>\n  ),\n  [VolumeLoadErrorType.TOO_LARGE]: (\n    <>\n      No scale level is available for this volume which fits within our maximum GPU memory footprint. This maximum is\n      tuned to ensure compatibility with the majority of browsers. If you&apos;re trying to load your own OME-Zarr\n      dataset, you may be able to open this volume by including a lower scale level.\n    </>\n  ),\n  [VolumeLoadErrorType.LOAD_DATA_FAILED]: (\n    <>\n      The viewer was able to find a source of volume data at the specified location, but encountered an error while\n      trying to load it. Check that your dataset is complete and properly formatted. You can also check the browser\n      console (F12) for more details about this error. If it looks like a problem on our end,{\" \"}\n      <IssueLink bug>start a bug report here</IssueLink>.\n    </>\n  ),\n  [VolumeLoadErrorType.INVALID_METADATA]: (\n    <>\n      The viewer was unable to read all necessary information from this volume&apos;s metadata. Check that your\n      dataset&apos;s metadata is complete and properly formatted. If you believe your data is valid and should be\n      supported by our viewer, let us know by <IssueLink>opening a GitHub issue</IssueLink>.\n    </>\n  ),\n  [VolumeLoadErrorType.INVALID_MULTI_SOURCE_ZARR]: (\n    <>\n      The viewer is currently configured to consolidate multiple OME-Zarr datasets into a single volume, but the\n      provided datasets can&apos;t all be matched up. Ensure that all dataset URLs are correct and that at least one\n      equivalently-sized scale level exists in all datasets.\n    </>\n  ),\n};\n\nconst getErrorTitle = (error: unknown): string => (error instanceof Error && error.toString?.()) || \"Unknown error\";\n\nconst getErrorDescription = (error: unknown): React.ReactNode => {\n  const type: VolumeLoadErrorType | undefined = (error as VolumeLoadError).type;\n  if (!type) {\n    return UNKNOWN_ERROR_DESCRIPTION;\n  }\n  return ERROR_TYPE_DESCRIPTIONS[type] ?? UNKNOWN_ERROR_DESCRIPTION;\n};\n\nexport type ErrorAlertProps = {\n  errors: unknown;\n  /** The number of times we've seen an error of the type that is currently being displayed before */\n  firstErrorCount?: number;\n  afterClose?: () => void;\n  onSkipError?: () => void;\n};\n\nconst ErrorAlert: React.FC<ErrorAlertProps> = ({ errors, firstErrorCount = 0, afterClose, onSkipError }) => {\n  const [showDetails, setShowDetails] = React.useState(false);\n  const [errorsSeenCount, setErrorsSeenCount] = React.useState(0);\n  const error = Array.isArray(errors) ? errors[0] : errors;\n\n  const errorMessage = (\n    <>\n      <div>\n        {getErrorTitle(error) + (firstErrorCount > 1 ? ` (${firstErrorCount})` : \"\")}{\" \"}\n        <Button type=\"text\" onClick={() => setShowDetails(!showDetails)}>\n          {showDetails ? \"Show less info\" : \"Show more info\"}\n        </Button>\n      </div>\n      <div style={{ display: showDetails ? undefined : \"none\" }}>{getErrorDescription(error)}</div>\n    </>\n  );\n\n  const skipErrorButton = Array.isArray(errors) && errors.length > 1 && (\n    <Button\n      type=\"text\"\n      onClick={() => {\n        setErrorsSeenCount((count) => count + 1);\n        onSkipError?.();\n      }}\n    >\n      Error {errorsSeenCount + 1} of {errors.length + errorsSeenCount} <RightOutlined />\n    </Button>\n  );\n\n  return (\n    <Alert\n      showIcon\n      type=\"error\"\n      className=\"load-error-alert\"\n      message={errorMessage}\n      closable\n      afterClose={() => {\n        setErrorsSeenCount(0);\n        afterClose?.();\n      }}\n      action={skipErrorButton}\n    />\n  );\n};\n\nexport const useErrorAlert = (): [React.ReactNode, (error: unknown) => void] => {\n  const [errorList, setErrorList] = React.useState<unknown[]>([]);\n  // Keep track of which errors have been seen and how many times\n  const seenErrors = useConstructor(() => new Map<string, number>());\n  const [errorCounts, setErrorCounts] = React.useState<number[]>([]);\n\n  const addError = React.useCallback(\n    (error: unknown) => {\n      console.error(error);\n      const errorTitle = getErrorTitle(error);\n      const errorSeenCount = (seenErrors.get(errorTitle) ?? 0) + 1;\n\n      setErrorList((prev) => [...prev, error]);\n      setErrorCounts((prev) => [...prev, errorSeenCount]);\n      seenErrors.set(errorTitle, errorSeenCount);\n    },\n    [seenErrors]\n  );\n\n  const onSkipError = React.useCallback(() => {\n    setErrorList((prev) => prev.slice(1));\n    setErrorCounts((prev) => prev.slice(1));\n  }, []);\n\n  const afterClose = React.useCallback(() => {\n    setErrorList([]);\n    setErrorCounts([]);\n  }, []);\n\n  const errCount = errorCounts[0];\n  const alertComponent = errorList.length > 0 && (\n    <ErrorAlert errors={errorList} firstErrorCount={errCount} onSkipError={onSkipError} afterClose={afterClose} />\n  );\n  return [alertComponent, addError];\n};\n\nexport default ErrorAlert;\n","import React from \"react\";\nimport { Dropdown, Button, MenuProps, Tooltip } from \"antd\";\n\nimport ViewerIcon from \"../shared/ViewerIcon\";\n\ninterface DownloadButtonProps {\n  cellDownloadHref: string;\n  fovDownloadHref: string;\n  hasFov: boolean;\n}\n\nconst DownloadButton: React.FC<DownloadButtonProps> = ({ fovDownloadHref, cellDownloadHref, hasFov }) => {\n  if (hasFov) {\n    const menu: MenuProps = {\n      className: \"download-dropdown\",\n      items: [\n        {\n          key: \"1\",\n          label: (\n            <a href={cellDownloadHref}>\n              <ViewerIcon type=\"download\" /> Segmented cell\n            </a>\n          ),\n        },\n        {\n          key: \"2\",\n          label: (\n            <a href={fovDownloadHref}>\n              <ViewerIcon type=\"download\" /> Full field image\n            </a>\n          ),\n        },\n      ],\n    };\n    return (\n      <Tooltip trigger={[\"hover\", \"focus\"]} placement=\"bottom\" title={\"Download volume data\"}>\n        <Dropdown menu={menu} placement=\"bottomRight\" trigger={[\"click\"]}>\n          <Button className=\"ant-btn-icon-only btn-borderless\">\n            <ViewerIcon type=\"download\" />\n          </Button>\n        </Dropdown>\n      </Tooltip>\n    );\n  } else if (cellDownloadHref) {\n    return (\n      <Tooltip trigger={[\"hover\", \"focus\"]} placement=\"bottom\" title={\"Download volume data\"}>\n        <Button className=\"ant-btn-icon-only btn-borderless\" href={cellDownloadHref}>\n          <ViewerIcon type=\"download\" />\n        </Button>\n      </Tooltip>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default DownloadButton;\n","import { Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport React from \"react\";\n\nimport { ViewMode } from \"../../shared/enums\";\n\nconst viewModes = [ViewMode.threeD, ViewMode.xy, ViewMode.xz, ViewMode.yz];\n\ninterface ViewModeRadioButtonsProps {\n  mode: ViewMode;\n  onViewModeChange: (newMode: ViewMode) => void;\n}\n\nconst ViewModeRadioButtons: React.FC<ViewModeRadioButtonsProps> = (props) => {\n  const onChangeButton = ({ target }: RadioChangeEvent): void => {\n    if (props.mode !== target.value) {\n      props.onViewModeChange(target.value);\n    }\n  };\n\n  return (\n    <Radio.Group onChange={onChangeButton} value={props.mode.toString()}>\n      {viewModes.map((mode, index) => (\n        <Radio.Button key={index} value={mode.toString()}>\n          {mode}\n        </Radio.Button>\n      ))}\n    </Radio.Group>\n  );\n};\n\nexport default ViewModeRadioButtons;\n","import { ReloadOutlined } from \"@ant-design/icons\";\nimport { Button, Radio, Select, Tooltip } from \"antd\";\nimport { debounce } from \"lodash\";\nimport React from \"react\";\n\nimport { ImageType, RenderMode, ViewMode } from \"../../shared/enums\";\nimport { select, useViewerState } from \"../../state/store\";\n\nimport ViewerIcon from \"../shared/ViewerIcon\";\nimport DownloadButton from \"./DownloadButton\";\nimport ViewModeRadioButtons from \"./ViewModeRadioButtons\";\n\nimport \"./styles.css\";\n\ntype ToolbarProps = {\n  cellDownloadHref: string;\n  fovDownloadHref: string;\n  hasCellId: boolean;\n  hasParentImage: boolean;\n  canPathTrace: boolean;\n\n  resetCamera: () => void;\n  downloadScreenshot: () => void;\n  resetToSavedViewerState: () => void;\n\n  visibleControls: {\n    autoRotateButton: boolean;\n    viewModeRadioButtons: boolean;\n    fovCellSwitchControls: boolean;\n    resetCameraButton: boolean;\n    showAxesButton: boolean;\n    showBoundingBoxButton: boolean;\n  };\n};\n\nconst RESIZE_DEBOUNCE_DELAY = 50;\n\nconst visuallyHiddenStyle: React.CSSProperties = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  padding: \"0\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  borderWidth: \"0\",\n};\n\nconst Toolbar: React.FC<ToolbarProps> = (props) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const barRef = React.useRef<HTMLDivElement>(null);\n  const leftRef = React.useRef<HTMLDivElement>(null);\n  const rightRef = React.useRef<HTMLDivElement>(null);\n  const centerRef = React.useRef<HTMLDivElement>(null);\n\n  const [scrollMode, setScrollMode] = React.useState(false);\n  const [showScrollBtnLeft, setScrollBtnLeft] = React.useState(false);\n  const [showScrollBtnRight, setScrollBtnRight] = React.useState(false);\n\n  const imageType = useViewerState(select(\"imageType\"));\n  const renderMode = useViewerState(select(\"renderMode\"));\n  const viewMode = useViewerState(select(\"viewMode\"));\n  const autorotate = useViewerState(select(\"autorotate\"));\n  const showAxes = useViewerState(select(\"showAxes\"));\n  const showBoundingBox = useViewerState(select(\"showBoundingBox\"));\n  const changeViewerSetting = useViewerState(select(\"changeViewerSetting\"));\n\n  // Scroll buttons are only visible when toolbar can be scrolled in that direction.\n  // This may change on either scroll or resize.\n  const checkScrollBtnVisible = React.useCallback((): void => {\n    const barEl = barRef.current;\n    if (!barEl) {\n      return;\n    }\n    setScrollBtnLeft(barEl.scrollLeft > 0);\n    setScrollBtnRight(barEl.scrollLeft < barEl.scrollWidth - barEl.clientWidth);\n  }, []);\n\n  // This is effectively a `useCallback` - it memoizes a function - but since we're feeding the whole function into\n  // lodash's `debounce`, using `useMemo` memoizes the transformation done by `debounce` as well.\n  const checkSize = React.useMemo(() => {\n    return debounce((): void => {\n      if (!leftRef.current || !centerRef.current || !rightRef.current || !barRef.current) {\n        return;\n      }\n      const leftRect = leftRef.current.getBoundingClientRect();\n      const centerRect = centerRef.current.getBoundingClientRect();\n      const rightRect = rightRef.current.getBoundingClientRect();\n\n      // when calculating width required to leave scroll mode, add a bit of extra width to ensure that triggers\n      // for entering and leaving scroll mode never overlap (causing toolbar to rapidly switch when resizing)\n      const SCROLL_OFF_EXTRA_WIDTH = 15;\n\n      setScrollMode((mode) => {\n        if (mode) {\n          // Leave scroll mode if there is enough space for centered controls not to overlap left/right-aligned ones\n          const barWidth = barRef.current!.getBoundingClientRect().width;\n          const requiredWidth =\n            Math.max(leftRect.width, rightRect.width) * 2 + centerRect.width + SCROLL_OFF_EXTRA_WIDTH;\n          return barWidth <= requiredWidth;\n        } else {\n          // Enter scroll mode if centered controls are overlapping either left/right-aligned ones\n          return leftRect.right > centerRect.left || centerRect.right > rightRect.left;\n        }\n      });\n      checkScrollBtnVisible();\n    }, RESIZE_DEBOUNCE_DELAY);\n  }, [checkScrollBtnVisible]);\n\n  React.useEffect(() => {\n    // Make sure `checkSize` is run once on mount\n    checkSize();\n    window.addEventListener(\"resize\", checkSize);\n    return () => window.removeEventListener(\"resize\", checkSize);\n  }, [checkSize]);\n\n  const scrollX = (amount: number): number => (barRef.current!.scrollLeft += amount);\n\n  // Translate vertical scrolling into horizontal scrolling\n  const wheelHandler: React.WheelEventHandler<HTMLDivElement> = (e) => {\n    e.preventDefault();\n    if (e.deltaY === 0) {\n      return;\n    }\n    scrollX(e.deltaY);\n  };\n\n  const toggleAxis = (): void => changeViewerSetting(\"showAxes\", !showAxes);\n  const toggleBoundingBox = (): void => changeViewerSetting(\"showBoundingBox\", !showBoundingBox);\n  // TODO remove ant-btn-icon-only hack when upgrading antd\n  const classForToggleBtn = (active: boolean): string =>\n    \"ant-btn-icon-only btn-borderless\" + (active ? \" btn-active\" : \"\");\n\n  const { visibleControls } = props;\n  const twoDMode = viewMode !== ViewMode.threeD;\n\n  const renderGroup1 =\n    visibleControls.viewModeRadioButtons || visibleControls.resetCameraButton || visibleControls.autoRotateButton;\n  const renderGroup4 = visibleControls.showAxesButton || visibleControls.showBoundingBoxButton;\n\n  const axesToggleTitle = showAxes ? \"Hide axes\" : \"Show axes\";\n  const boundingBoxToggleTitle = showBoundingBox ? \"Hide bounding box\" : \"Show bounding box\";\n  const turntableToggleTitle = autorotate ? \"Turn off turntable\" : \"Turn on turntable\";\n\n  const getPopupContainer = containerRef.current ? () => containerRef.current! : undefined;\n\n  return (\n    <div className={`viewer-toolbar-container${scrollMode ? \" viewer-toolbar-scroll\" : \"\"}`} ref={containerRef}>\n      <div\n        className=\"viewer-toolbar-scroll-left\"\n        style={{ display: showScrollBtnLeft ? \"flex\" : \"none\" }}\n        onClick={() => scrollX(-100)}\n      >\n        <ViewerIcon type=\"closePanel\" style={{ fontSize: \"12px\", transform: \"rotate(180deg)\" }} />\n      </div>\n      <div className=\"viewer-toolbar\" ref={barRef} onWheel={wheelHandler} onScroll={checkScrollBtnVisible}>\n        <div className=\"viewer-toolbar-left\" ref={leftRef}>\n          <Tooltip placement=\"bottom\" title=\"Reset to initial settings\" trigger={[\"focus\", \"hover\"]}>\n            <Button className=\"ant-btn-icon-only btn-borderless\" onClick={props.resetToSavedViewerState}>\n              <ReloadOutlined />\n              <span style={visuallyHiddenStyle}>Reset to initial settings</span>\n            </Button>\n          </Tooltip>\n        </div>\n        <div className=\"viewer-toolbar-center\" ref={centerRef}>\n          {renderGroup1 && (\n            <div className=\"viewer-toolbar-group\">\n              {visibleControls.viewModeRadioButtons && (\n                <ViewModeRadioButtons\n                  mode={viewMode}\n                  onViewModeChange={(newMode) => changeViewerSetting(\"viewMode\", newMode)}\n                />\n              )}\n              {visibleControls.resetCameraButton && (\n                <Tooltip placement=\"bottom\" title=\"Reset camera\">\n                  <Button className=\"ant-btn-icon-only btn-borderless\" onClick={props.resetCamera}>\n                    <ViewerIcon type=\"resetView\" />\n                  </Button>\n                </Tooltip>\n              )}\n              {visibleControls.autoRotateButton && (\n                <Tooltip placement=\"bottom\" title={turntableToggleTitle}>\n                  <Button\n                    className={classForToggleBtn(autorotate && !twoDMode)}\n                    disabled={twoDMode || renderMode === RenderMode.pathTrace}\n                    onClick={() => changeViewerSetting(\"autorotate\", !autorotate)}\n                  >\n                    <ViewerIcon type=\"turnTable\" />\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          )}\n\n          {visibleControls.fovCellSwitchControls && props.hasCellId && props.hasParentImage && (\n            <div className=\"viewer-toolbar-group\">\n              <Radio.Group value={imageType} onChange={({ target }) => changeViewerSetting(\"imageType\", target.value)}>\n                <Radio.Button value={ImageType.segmentedCell}>Single cell</Radio.Button>\n                <Radio.Button value={ImageType.fullField}>Full field</Radio.Button>\n              </Radio.Group>\n            </div>\n          )}\n\n          <div className=\"viewer-toolbar-group\">\n            <Select\n              className=\"select-render-setting\"\n              popupClassName=\"viewer-toolbar-dropdown\"\n              value={renderMode}\n              onChange={(value) => changeViewerSetting(\"renderMode\", value)}\n              getPopupContainer={getPopupContainer}\n            >\n              <Select.Option value={RenderMode.volumetric} key={RenderMode.volumetric}>\n                Volumetric\n              </Select.Option>\n              {props.canPathTrace && (\n                <Select.Option value={RenderMode.pathTrace} key={RenderMode.pathTrace} disabled={twoDMode}>\n                  Path trace\n                </Select.Option>\n              )}\n              <Select.Option value={RenderMode.maxProject} key={RenderMode.maxProject}>\n                Max project\n              </Select.Option>\n            </Select>\n          </div>\n\n          {renderGroup4 && (\n            <div className=\"viewer-toolbar-group\">\n              {visibleControls.showAxesButton && (\n                <Tooltip placement=\"bottom\" title={axesToggleTitle}>\n                  <Button className={classForToggleBtn(showAxes)} onClick={toggleAxis}>\n                    <ViewerIcon type=\"axes\" />\n                  </Button>\n                </Tooltip>\n              )}\n              {visibleControls.showBoundingBoxButton && (\n                <Tooltip placement=\"bottom\" title={boundingBoxToggleTitle}>\n                  <Button className={classForToggleBtn(showBoundingBox)} onClick={toggleBoundingBox}>\n                    <ViewerIcon type=\"boundingBox\" />\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"viewer-toolbar-right viewer-toolbar-group\" ref={rightRef}>\n          <Tooltip placement=\"bottom\" title=\"Download\">\n            <DownloadButton\n              cellDownloadHref={props.cellDownloadHref}\n              fovDownloadHref={props.fovDownloadHref}\n              hasFov={props.hasCellId && props.hasParentImage}\n            />\n          </Tooltip>\n          <Tooltip placement=\"bottom\" title=\"Screenshot\">\n            <Button className=\"ant-btn-icon-only btn-borderless\" onClick={props.downloadScreenshot}>\n              <ViewerIcon type=\"camera\" />\n            </Button>\n          </Tooltip>\n        </div>\n      </div>\n      <div\n        className=\"viewer-toolbar-scroll-right\"\n        style={{ display: showScrollBtnRight ? \"flex\" : \"none\" }}\n        onClick={() => scrollX(100)}\n      >\n        <ViewerIcon type=\"closePanel\" style={{ fontSize: \"12px\" }} />\n      </div>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import { Lut, View3d, Volume } from \"@aics/vole-core\";\nimport React, { useEffect } from \"react\";\nimport { useShallow } from \"zustand/shallow\";\n\nimport { controlPointsToLut, rampToControlPoints } from \"../../shared/utils/controlPointsToLut\";\nimport { useViewerState, type ViewerStore } from \"../../state/store\";\nimport { UseImageEffectType } from \"./types\";\n\ninterface ChannelUpdaterProps {\n  index: number;\n  view3d: View3d;\n  image: Volume | null;\n  version: number;\n}\n\n/**\n * A component that doesn't render anything, but reacts to the provided `ChannelState`\n * and keeps it in sync with the viewer.\n */\nconst ChannelUpdater: React.FC<ChannelUpdaterProps> = ({ index, view3d, image, version }) => {\n  const channelStateSelector = useShallow((state: ViewerStore) => state.channelSettings[index]);\n  const channelState = useViewerState(channelStateSelector);\n  const { volumeEnabled, isosurfaceEnabled, isovalue, colorizeEnabled, colorizeAlpha, opacity, color } = channelState;\n\n  // Effects to update channel settings should check if image is present and channel is loaded first\n  const useImageEffect: UseImageEffectType = (effect, deps) => {\n    useEffect(() => {\n      if (image && version > 0) {\n        return effect(image);\n      }\n      // react-hooks will check that `deps` match `effect`'s dependencies, so we can safely exclude `effect` here\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...deps, image, version]);\n  };\n\n  // enable/disable channel can't be dependent on channel load state because it may trigger the channel to load\n  useEffect(() => {\n    if (image) {\n      view3d.setVolumeChannelEnabled(image, index, volumeEnabled);\n      view3d.updateLuts(image);\n    }\n  }, [image, volumeEnabled, index, view3d]);\n\n  useEffect(() => {\n    if (image) {\n      view3d.setVolumeChannelOptions(image, index, { isosurfaceEnabled });\n    }\n  }, [image, isosurfaceEnabled, index, view3d]);\n\n  useImageEffect(\n    (currentImage) => view3d.setVolumeChannelOptions(currentImage, index, { isovalue }),\n    [isovalue, index, view3d]\n  );\n\n  useImageEffect(\n    (currentImage) => view3d.setVolumeChannelOptions(currentImage, index, { isosurfaceOpacity: opacity }),\n    [opacity, index, view3d]\n  );\n\n  useImageEffect(\n    (currentImage) => {\n      view3d.setVolumeChannelOptions(currentImage, index, { color });\n      view3d.updateLuts(currentImage);\n    },\n    [color, index, view3d]\n  );\n\n  const { controlPoints, ramp, useControlPoints } = channelState;\n  useImageEffect(\n    (currentImage) => {\n      if (useControlPoints && controlPoints.length < 2) {\n        return;\n      }\n      const controlPointsToUse = useControlPoints ? controlPoints : rampToControlPoints(ramp);\n      const gradient = controlPointsToLut(controlPointsToUse);\n      currentImage.setLut(index, gradient);\n      view3d.updateLuts(currentImage);\n    },\n    [controlPoints, ramp, useControlPoints, index, view3d]\n  );\n\n  useImageEffect(\n    (currentImage) => {\n      if (colorizeEnabled) {\n        // TODO get the labelColors from the tf editor component\n        const lut = new Lut().createLabelColors(currentImage.getHistogram(index));\n        currentImage.setColorPalette(index, lut.lut);\n        // following effect will also run and call `updateLuts`\n      }\n    },\n    [colorizeEnabled, index, view3d]\n  );\n\n  useImageEffect(\n    (currentImage) => {\n      currentImage.setColorPaletteAlpha(index, colorizeEnabled ? colorizeAlpha : 0);\n      view3d.updateLuts(currentImage);\n    },\n    [colorizeEnabled, colorizeAlpha, index, view3d]\n  );\n\n  return null;\n};\n\nexport default ChannelUpdater;\n","// 3rd Party Imports\nimport { RawArrayLoaderOptions, View3d, Volume } from \"@aics/vole-core\";\nimport { Layout } from \"antd\";\nimport { debounce, isEqual } from \"lodash\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport {\n  AXIS_MARGIN_DEFAULT,\n  CLIPPING_PANEL_HEIGHT_DEFAULT,\n  CLIPPING_PANEL_HEIGHT_TALL,\n  CONTROL_PANEL_CLOSE_WIDTH,\n  DTYPE_RANGE,\n  getDefaultViewerChannelSettings,\n  getDefaultViewerState,\n  SCALE_BAR_MARGIN_DEFAULT,\n} from \"../../shared/constants\";\nimport { ImageType, ViewMode } from \"../../shared/enums\";\nimport type { IsosurfaceFormat, MetadataRecord, PerAxis } from \"../../shared/types\";\nimport {\n  controlPointsToRamp,\n  initializeLut,\n  rampToControlPoints,\n  remapControlPointsForChannel,\n} from \"../../shared/utils/controlPointsToLut\";\nimport { useConstructor } from \"../../shared/utils/hooks\";\nimport { select, useViewerState } from \"../../state/store\";\nimport { subscribeImageToState, subscribeViewToState } from \"../../state/subscribers\";\nimport useVolume, { ImageLoadStatus } from \"../useVolume\";\nimport type { AppProps, ControlVisibilityFlags, MultisceneUrls, UseImageEffectType } from \"./types\";\n\nimport CellViewerCanvasWrapper from \"../CellViewerCanvasWrapper\";\nimport ControlPanel from \"../ControlPanel\";\nimport { useErrorAlert } from \"../ErrorAlert\";\nimport StyleProvider from \"../StyleProvider\";\nimport Toolbar from \"../Toolbar\";\nimport ChannelUpdater from \"./ChannelUpdater\";\n\nimport \"../../assets/styles/globals.css\";\nimport \"./styles.css\";\n\nconst { Sider, Content } = Layout;\n\nconst defaultVisibleControls: ControlVisibilityFlags = {\n  alphaMaskSlider: true,\n  autoRotateButton: true,\n  axisClipSliders: true,\n  brightnessSlider: true,\n  backgroundColorPicker: true,\n  boundingBoxColorPicker: true,\n  colorPresetsDropdown: true,\n  densitySlider: true,\n  levelsSliders: true,\n  interpolationControl: true,\n  saveSurfaceButtons: true,\n  fovCellSwitchControls: true,\n  viewModeRadioButtons: true,\n  resetCameraButton: true,\n  showAxesButton: true,\n  showBoundingBoxButton: true,\n  metadataViewer: true,\n};\n\nconst defaultProps: AppProps = {\n  // rawData has a \"dtype\" which is expected to be \"uint8\", a \"shape\":[c,z,y,x] and a \"buffer\" which is a DataView\n  rawData: undefined,\n  // rawDims is the volume dims that normally come from a json file\n  rawDims: undefined,\n\n  imageUrl: \"\",\n  parentImageUrl: \"\",\n\n  appHeight: \"100vh\",\n  visibleControls: defaultVisibleControls,\n  viewerSettings: getDefaultViewerState(),\n  cellId: \"\",\n  imageDownloadHref: \"\",\n  parentImageDownloadHref: \"\",\n  pixelSize: undefined,\n  canvasMargin: \"0 0 0 0\",\n  view3dRef: undefined,\n};\n\nconst CLIPPING_PANEL_ANIMATION_DURATION_MS = 300;\n\nconst setIndicatorPositions = (\n  view3d: View3d,\n  panelOpen: boolean,\n  hasTime: boolean,\n  hasScenes: boolean,\n  isMode3d: boolean\n): void => {\n  // The height of the clipping panel includes the button, but we're trying to put these elements next to the button\n  const CLIPPING_PANEL_BUTTON_HEIGHT = 40;\n  // Move scale bars this far to the left when showing time series, to make room for timestep indicator\n  const SCALE_BAR_TIME_SERIES_OFFSET = 120;\n\n  let axisY = AXIS_MARGIN_DEFAULT[1];\n  let [scaleBarX, scaleBarY] = SCALE_BAR_MARGIN_DEFAULT;\n  if (panelOpen) {\n    // If we have Time, Scene, X, Y, and Z sliders, the drawer will need to be a bit taller\n    let isTall = hasTime && hasScenes && isMode3d;\n    let clippingPanelFullHeight = isTall ? CLIPPING_PANEL_HEIGHT_TALL : CLIPPING_PANEL_HEIGHT_DEFAULT;\n    let clippingPanelHeight = clippingPanelFullHeight - CLIPPING_PANEL_BUTTON_HEIGHT;\n    // Move indicators up out of the way of the clipping panel\n    axisY += clippingPanelHeight;\n    scaleBarY += clippingPanelHeight;\n  }\n  if (hasTime) {\n    // Move scale bar left out of the way of timestep indicator\n    scaleBarX += SCALE_BAR_TIME_SERIES_OFFSET;\n    // Make sure the timestep indicator is showing\n    view3d.setShowTimestepIndicator(true);\n  }\n\n  view3d.setAxisPosition(AXIS_MARGIN_DEFAULT[0], axisY);\n  view3d.setTimestepIndicatorPosition(SCALE_BAR_MARGIN_DEFAULT[0], scaleBarY);\n  view3d.setScaleBarPosition(scaleBarX, scaleBarY);\n};\n\nconst App: React.FC<AppProps> = (props) => {\n  props = { ...defaultProps, ...props };\n\n  // State management /////////////////////////////////////////////////////////\n  const imageType = useViewerState(select(\"imageType\"));\n  const viewMode = useViewerState(select(\"viewMode\"));\n  const scene = useViewerState(select(\"scene\"));\n  const time = useViewerState(select(\"time\"));\n  const showAxes = useViewerState(select(\"showAxes\"));\n  const channelSettings = useViewerState(select(\"channelSettings\"));\n  const changeChannelSetting = useViewerState(select(\"changeChannelSetting\"));\n  const applyColorPresets = useViewerState(select(\"applyColorPresets\"));\n  const resetToSavedState = useViewerState(select(\"resetToSavedViewerState\"));\n\n  const resetToSavedViewerState = useCallback(\n    () => resetToSavedState(props.viewerSettings, props.viewerChannelSettings),\n    [resetToSavedState, props.viewerSettings, props.viewerChannelSettings]\n  );\n\n  const view3d = useConstructor(() => new View3d());\n  if (props.view3dRef !== undefined) {\n    props.view3dRef.current = view3d;\n  }\n\n  const [errorAlert, showError] = useErrorAlert();\n\n  useEffect(() => {\n    // Get notifications of loading errors which occur after the initial load, e.g. on time change or new channel load\n    view3d.setLoadErrorHandler((_vol, e) => showError(e));\n    return () => view3d.setLoadErrorHandler(undefined);\n  }, [view3d, showError]);\n\n  const imageUrlRef = useRef<string | string[] | MultisceneUrls>(\"\");\n  const scenesRef = useRef<(string | string[])[] | [RawArrayLoaderOptions]>([]);\n  const { imageUrl, parentImageUrl, rawData, rawDims } = props;\n  const scenes = useMemo((): (string | string[])[] | [RawArrayLoaderOptions] => {\n    if (rawData && rawDims) {\n      return [{ data: rawData, metadata: rawDims }];\n    } else {\n      const showParentImage = imageType === ImageType.fullField && parentImageUrl !== undefined;\n      const path = showParentImage ? parentImageUrl : imageUrl;\n      // Don't reload if we're already looking at this image\n      if (isEqual(path, imageUrlRef.current)) {\n        return scenesRef.current;\n      }\n      imageUrlRef.current = path;\n\n      const result = (path as MultisceneUrls).scenes ?? [path];\n      scenesRef.current = result;\n      return result;\n    }\n  }, [imageUrl, parentImageUrl, rawData, rawDims, imageType]);\n\n  const maskChannelName = props.viewerChannelSettings?.maskChannelName;\n\n  // we need to keep track of channel ranges for remapping control points\n  const channelRangesRef = useRef<([number, number] | undefined)[]>([]);\n\n  const removePreviousImage = useRef<(() => void) | undefined>(undefined);\n\n  const onCreateImage = useCallback(\n    (newImage: Volume): void => {\n      removePreviousImage.current?.();\n\n      if (newImage === null) {\n        return;\n      }\n\n      channelRangesRef.current = new Array(newImage.channelNames.length).fill(undefined);\n\n      const { channelSettings } = useViewerState.getState();\n\n      view3d.addVolume(newImage, {\n        // Immediately passing down channel parameters isn't strictly necessary, but keeps things looking consistent on load\n        channels: newImage.channelNames.map((name) => {\n          // TODO do we really need to be searching by name here?\n          const ch = channelSettings.find((channel) => channel.name === name);\n          if (!ch) {\n            return {};\n          }\n          return {\n            enabled: ch.volumeEnabled,\n            isosurfaceEnabled: ch.isosurfaceEnabled,\n            isovalue: ch.isovalue,\n            isosurfaceOpacity: ch.opacity,\n            color: ch.color,\n          };\n        }),\n      });\n\n      view3d.updateActiveChannels(newImage);\n      const unsubscribeView = subscribeViewToState(useViewerState, view3d);\n      const unsubscribeImage = subscribeImageToState(useViewerState, view3d, newImage);\n      removePreviousImage.current = () => {\n        unsubscribeView();\n        unsubscribeImage();\n        view3d.removeAllVolumes();\n        removePreviousImage.current = undefined;\n      };\n    },\n    [view3d]\n  );\n\n  const onChannelLoaded = useCallback(\n    (image: Volume, channelIndex: number, isInitialLoad: boolean): void => {\n      // TODO this was once a search by name - is that still necessary or will the index always be correct?\n      const thisChannelSettings = channelSettings[channelIndex];\n      const viewerState = useViewerState.getState();\n      const { channelsToResetOnLoad, useDefaultViewerChannelSettings } = viewerState;\n      const currentViewerChannelSettings = useDefaultViewerChannelSettings\n        ? getDefaultViewerChannelSettings()\n        : props.viewerChannelSettings;\n      const thisChannel = image.getChannel(channelIndex);\n      const noLut = !thisChannelSettings || !thisChannelSettings.controlPoints || !thisChannelSettings.ramp;\n\n      if (isInitialLoad || noLut || channelsToResetOnLoad.includes(channelIndex)) {\n        // This channel needs its LUT initialized\n        const { ramp, controlPoints } = initializeLut(image, channelIndex, currentViewerChannelSettings);\n        const { dtype } = thisChannel;\n\n        changeChannelSetting(channelIndex, {\n          controlPoints: controlPoints,\n          ramp: controlPointsToRamp(ramp),\n          // set the default range of the transfer function editor to cover the full range of the data type\n          plotMin: DTYPE_RANGE[dtype].min,\n          plotMax: DTYPE_RANGE[dtype].max,\n        });\n      } else {\n        // This channel has already been initialized, but its LUT was just remapped and we need to update some things\n        const oldRange = channelRangesRef.current[channelIndex];\n        if (thisChannelSettings.useControlPoints) {\n          // control points were just automatically remapped - update in state\n          const rampControlPoints = rampToControlPoints(thisChannelSettings.ramp);\n          // now manually remap ramp using the channel's old range\n          const remappedRampControlPoints = remapControlPointsForChannel(rampControlPoints, oldRange, thisChannel);\n          changeChannelSetting(channelIndex, {\n            ramp: controlPointsToRamp(remappedRampControlPoints),\n            controlPoints: thisChannel.lut.controlPoints,\n          });\n        } else {\n          // ramp was just automatically remapped - update in state\n          const ramp = controlPointsToRamp(thisChannel.lut.controlPoints);\n          // now manually remap control points using the channel's old range\n          const { controlPoints } = thisChannelSettings;\n          const remappedControlPoints = remapControlPointsForChannel(controlPoints, oldRange, thisChannel);\n          changeChannelSetting(channelIndex, { controlPoints: remappedControlPoints, ramp: ramp });\n        }\n      }\n\n      // save the channel's new range for remapping next time\n      channelRangesRef.current[channelIndex] = [thisChannel.rawMin, thisChannel.rawMax];\n\n      view3d.updateLuts(image);\n      view3d.onVolumeData(image, [channelIndex]);\n\n      if (image.channelNames[channelIndex] === maskChannelName) {\n        view3d.setVolumeChannelAsMask(image, channelIndex);\n      }\n      if (image.isLoaded()) {\n        view3d.updateActiveChannels(image);\n      }\n    },\n    [view3d, channelSettings, changeChannelSetting, maskChannelName, props.viewerChannelSettings]\n  );\n\n  const volume = useVolume(scenes, {\n    viewerChannelSettings: props.viewerChannelSettings,\n    onCreateImage,\n    onChannelLoaded,\n    onError: showError,\n    maskChannelName,\n  });\n  const { image, setTime, setScene } = volume;\n\n  const hasRawImage = !!(props.rawData && props.rawDims);\n  const numScenes = hasRawImage ? 1 : ((props.imageUrl as MultisceneUrls).scenes?.length ?? 1);\n  const numSlices: PerAxis<number> = image?.imageInfo.volumeSize ?? { x: 1, y: 1, z: 1 };\n  const numSlicesLoaded: PerAxis<number> = image?.imageInfo.subregionSize ?? { x: 0, y: 0, z: 0 };\n  const numTimesteps = image?.imageInfo.times ?? 1;\n\n  // const [channelGroupedByType, setChannelGroupedByType] = useState<ChannelGrouping>({});\n  const [controlPanelClosed, setControlPanelClosed] = useState(() => window.innerWidth < CONTROL_PANEL_CLOSE_WIDTH);\n  // Only allow auto-close once while the screen is too narrow.\n  const [hasAutoClosedControlPanel, setHasAutoClosedControlPanel] = useState(false);\n\n  const [clippingPanelOpen, setClippingPanelOpen] = useState(true);\n  const clippingPanelOpenTimeout = useRef<number>(0);\n\n  // Imperative callbacks /////////////////////////////////////////////////////\n\n  const saveIsosurface = useCallback(\n    (channelIndex: number, type: IsosurfaceFormat): void => {\n      if (image) view3d.saveChannelIsosurface(image, channelIndex, type);\n    },\n    [image, view3d]\n  );\n\n  const saveScreenshot = useCallback((): void => {\n    view3d.capture((dataUrl: string) => {\n      const anchor = document.createElement(\"a\");\n      anchor.href = dataUrl;\n      anchor.download = \"screenshot.png\";\n      anchor.click();\n    });\n  }, [view3d]);\n\n  const { metadata, metadataFormatter } = props;\n  const getMetadata = useCallback((): MetadataRecord => {\n    let imageMetadata = image?.imageMetadata as MetadataRecord;\n    if (imageMetadata && metadataFormatter) {\n      imageMetadata = metadataFormatter(imageMetadata);\n    }\n\n    let sceneMeta: MetadataRecord | undefined;\n    if (Array.isArray(metadata)) {\n      // If metadata is an array, try to index it by scene\n      if (metadata.length >= numScenes) {\n        sceneMeta = metadata[scene];\n      } else {\n        sceneMeta = metadata[0];\n      }\n    } else {\n      sceneMeta = metadata;\n    }\n\n    if (imageMetadata && Object.keys(imageMetadata).length > 0) {\n      return { Image: imageMetadata, ...sceneMeta };\n    } else {\n      return sceneMeta ?? {};\n    }\n  }, [metadata, metadataFormatter, image, numScenes, scene]);\n\n  useEffect((): void => {\n    const hasTime = numTimesteps > 1;\n    const hasScenes = numScenes > 1;\n    const mode3d = viewMode === ViewMode.threeD;\n\n    setIndicatorPositions(view3d, clippingPanelOpen, hasTime, hasScenes, mode3d);\n\n    // Hide indicators while clipping panel is in motion - otherwise they pop to the right place prematurely\n    if (clippingPanelOpen) {\n      view3d.setShowScaleBar(false);\n      view3d.setShowTimestepIndicator(false);\n      view3d.setShowAxis(false);\n\n      window.clearTimeout(clippingPanelOpenTimeout.current);\n      clippingPanelOpenTimeout.current = window.setTimeout(() => {\n        view3d.setShowScaleBar(true);\n        view3d.setShowTimestepIndicator(true);\n        if (showAxes) {\n          view3d.setShowAxis(true);\n        }\n      }, CLIPPING_PANEL_ANIMATION_DURATION_MS);\n    }\n  }, [view3d, numTimesteps, numScenes, viewMode, showAxes, clippingPanelOpen]);\n\n  // Effects //////////////////////////////////////////////////////////////////\n\n  // On mount\n  useEffect(() => {\n    const onResize = (): void => {\n      if (window.innerWidth < CONTROL_PANEL_CLOSE_WIDTH) {\n        if (!hasAutoClosedControlPanel) {\n          setControlPanelClosed(true);\n          setHasAutoClosedControlPanel(true);\n        }\n      } else {\n        setHasAutoClosedControlPanel(false);\n      }\n    };\n    const onResizeDebounced = debounce(onResize, 500);\n\n    window.addEventListener(\"resize\", onResizeDebounced);\n    return () => window.removeEventListener(\"resize\", onResizeDebounced);\n  }, [hasAutoClosedControlPanel]);\n\n  const { onControlPanelToggle } = props;\n  useEffect(\n    () => onControlPanelToggle && onControlPanelToggle(controlPanelClosed),\n    [controlPanelClosed, onControlPanelToggle]\n  );\n\n  useEffect(() => {\n    // delayed for the animation to finish\n    window.setTimeout(() => {\n      window.dispatchEvent(new Event(\"resize\"));\n    }, 200);\n  }, [controlPanelClosed]);\n\n  /** Custom effect hook for viewer updates that depend on `image`, so we don't have to repeatedly null-check it */\n  const useImageEffect: UseImageEffectType = (effect, deps) => {\n    useEffect(() => {\n      if (image && volume.imageLoadStatus === ImageLoadStatus.LOADED) {\n        return effect(image);\n      }\n      // react-hooks will check that `deps` match `effect`'s dependencies, so we can safely exclude `effect` here\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [...deps, image, volume.imageLoadStatus]);\n  };\n\n  // Effects to imperatively sync `viewerSettings` to `view3d`\n\n  useImageEffect(\n    (image) => {\n      // Check whether any channels are marked to be reset and apply it.\n      const viewerState = useViewerState.getState();\n      const { channelsToReset, onResetChannel, useDefaultViewerChannelSettings } = viewerState;\n      const currentViewerChannelSettings = useDefaultViewerChannelSettings\n        ? getDefaultViewerChannelSettings()\n        : props.viewerChannelSettings;\n      for (let i = 0; i < channelSettings.length; i++) {\n        if (channelsToReset.includes(i)) {\n          const { ramp, controlPoints } = initializeLut(image, i, currentViewerChannelSettings);\n          changeChannelSetting(i, { controlPoints: controlPoints, ramp: controlPointsToRamp(ramp) });\n          onResetChannel(i);\n        }\n      }\n    },\n    [changeChannelSetting, channelSettings, props.viewerChannelSettings]\n  );\n\n  // `time` and `scene` have their own special handlers via `volume`, since they both trigger loads\n  useEffect(() => setTime(view3d, time), [view3d, time, setTime]);\n  useEffect(() => setScene(scene), [scene, setScene]);\n\n  useImageEffect(\n    (currentImage) => view3d.setVolumeTranslation(currentImage, props.transform?.translation || [0, 0, 0]),\n    [props.transform?.translation, view3d]\n  );\n\n  useImageEffect(\n    (currentImage) => view3d.setVolumeRotation(currentImage, props.transform?.rotation || [0, 0, 0]),\n    [props.transform?.rotation, view3d]\n  );\n\n  // Rendering ////////////////////////////////////////////////////////////////\n\n  const visibleControls = useMemo(\n    (): ControlVisibilityFlags => ({ ...defaultVisibleControls, ...props.visibleControls }),\n    [props.visibleControls]\n  );\n  const pixelSize = useMemo(\n    (): [number, number, number] => (image ? image.imageInfo.physicalPixelSize.toArray() : [1, 1, 1]),\n    [image]\n  );\n  const resetCamera = useMemo(() => view3d.resetCamera.bind(view3d), [view3d]);\n\n  return (\n    <StyleProvider>\n      {errorAlert}\n      <Layout className=\"cell-viewer-app\" style={{ height: props.appHeight }}>\n        {channelSettings.map(({ name }, index) => (\n          <ChannelUpdater\n            key={`${index}_${name}`}\n            index={index}\n            view3d={view3d}\n            image={image}\n            version={volume.channelVersions[index]}\n          />\n        ))}\n        <Sider\n          className=\"control-panel-holder\"\n          collapsible={true}\n          defaultCollapsed={false}\n          collapsedWidth={50}\n          trigger={null}\n          collapsed={controlPanelClosed}\n          width={500}\n        >\n          <ControlPanel\n            visibleControls={visibleControls}\n            collapsed={controlPanelClosed}\n            // image state\n            imageName={image?.name}\n            hasImage={!!image}\n            pixelSize={pixelSize}\n            channelDataChannels={image?.channels}\n            channelGroupedByType={volume.channelGroupedByType}\n            // functions\n            setCollapsed={setControlPanelClosed}\n            saveIsosurface={saveIsosurface}\n            onApplyColorPresets={applyColorPresets}\n            viewerChannelSettings={props.viewerChannelSettings}\n            getMetadata={getMetadata}\n          />\n        </Sider>\n        <Layout className=\"cell-viewer-wrapper\" style={{ margin: props.canvasMargin }}>\n          <Content>\n            <Toolbar\n              fovDownloadHref={props.parentImageDownloadHref}\n              cellDownloadHref={props.imageDownloadHref}\n              hasParentImage={!!props.parentImageUrl}\n              hasCellId={!!props.cellId}\n              canPathTrace={view3d ? view3d.hasWebGL2() : false}\n              resetCamera={resetCamera}\n              downloadScreenshot={saveScreenshot}\n              resetToSavedViewerState={resetToSavedViewerState}\n              visibleControls={visibleControls}\n            />\n            <CellViewerCanvasWrapper\n              view3d={view3d}\n              image={image}\n              loadingImage={volume.imageLoadStatus === ImageLoadStatus.REQUESTED}\n              numSlices={numSlices}\n              numSlicesLoaded={numSlicesLoaded}\n              numTimesteps={numTimesteps}\n              numScenes={numScenes}\n              playControls={volume.playControls}\n              playingAxis={volume.playingAxis}\n              appHeight={props.appHeight}\n              visibleControls={visibleControls}\n              clippingPanelOpen={clippingPanelOpen}\n              onClippingPanelOpenChange={setClippingPanelOpen}\n            />\n          </Content>\n        </Layout>\n      </Layout>\n    </StyleProvider>\n  );\n};\n\nexport default App;\n","import { isEqual } from \"lodash\";\n\nimport { ChannelState, ViewerState, ViewerStateContextType, ResetState } from \"./types\";\nimport {\n  getDefaultViewerState,\n  getDefaultCameraState,\n  getDefaultChannelState,\n  getDefaultViewerChannelSettings,\n  getDefaultChannelColor,\n} from \"../../shared/constants\";\nimport { ViewMode } from \"../../shared/enums\";\nimport {\n  overrideViewerState,\n  overrideChannelStates,\n  getEnabledChannelIndices,\n  initializeOneChannelSetting,\n} from \"../../shared/utils/viewerState\";\nimport { ViewerChannelSettings } from \"../../shared/utils/viewerChannelSettings\";\n\n/**\n * Provides reset functionality for the viewer and channel states.\n */\nexport default class ResetStateProvider implements ResetState {\n  savedViewerState: Partial<ViewerState>;\n  savedViewerChannelSettings: ViewerChannelSettings | undefined;\n  useDefaultViewerChannelSettings: boolean;\n\n  channelsToReset: Set<number>;\n  channelsToResetOnLoad: Set<number>;\n\n  ref: React.MutableRefObject<ViewerStateContextType>;\n\n  constructor(viewerStateRef: React.MutableRefObject<ViewerStateContextType>) {\n    this.ref = viewerStateRef;\n\n    this.savedViewerState = {};\n    this.channelsToReset = new Set();\n    this.channelsToResetOnLoad = new Set();\n    this.savedViewerChannelSettings = undefined;\n    this.useDefaultViewerChannelSettings = false;\n\n    this.resetToSavedViewerState = this.resetToSavedViewerState.bind(this);\n    this.resetToDefaultViewerState = this.resetToDefaultViewerState.bind(this);\n    this.resetToState = this.resetToState.bind(this);\n    this.setSavedViewerState = this.setSavedViewerState.bind(this);\n    this.setSavedViewerChannelSettings = this.setSavedViewerChannelSettings.bind(this);\n    this.getChannelsAwaitingReset = this.getChannelsAwaitingReset.bind(this);\n    this.getChannelsAwaitingResetOnLoad = this.getChannelsAwaitingResetOnLoad.bind(this);\n    this.onResetChannel = this.onResetChannel.bind(this);\n    this.getCurrentViewerChannelSettings = this.getCurrentViewerChannelSettings.bind(this);\n  }\n\n  // Setup Callbacks ////////////////////////////////////////////////////////////////////\n\n  public setSavedViewerState(state: Partial<ViewerState>): void {\n    this.savedViewerState = state;\n  }\n\n  public setSavedViewerChannelSettings(settings: ViewerChannelSettings | undefined): void {\n    this.savedViewerChannelSettings = settings;\n  }\n\n  public getChannelsAwaitingReset(): Set<number> {\n    return this.channelsToReset;\n  }\n\n  public getChannelsAwaitingResetOnLoad(): Set<number> {\n    return this.channelsToResetOnLoad;\n  }\n\n  public onResetChannel(channelIndex: number): void {\n    this.channelsToReset.delete(channelIndex);\n    this.channelsToResetOnLoad.delete(channelIndex);\n  }\n\n  /**\n   * Returns the current viewer channel settings that the viewer should use when\n   * resetting channels to an initial state.\n   */\n  public getCurrentViewerChannelSettings(): ViewerChannelSettings | undefined {\n    if (this.useDefaultViewerChannelSettings) {\n      return getDefaultViewerChannelSettings();\n    }\n    return this.savedViewerChannelSettings;\n  }\n\n  /**\n   * Helper method. Resets the viewer and all channels to the provided state. If new data needs to\n   * be loaded, handles setup so the reset will be applied to each channel as it loads in.\n   */\n  private resetToState(newState: ViewerState, newChannelStates: ChannelState[]): void {\n    const { changeViewerSetting, setChannelSettings, channelSettings, viewMode, time, slice } = this.ref.current;\n\n    // Needs reset on reload if one of the view modes is 2D while the other is 3D,\n    // if the timestamp is different, or if we're on a different z slice.\n    // TODO: Handle stopping playback? Requires playback to be part of ViewerStateContext\n    const isInDifferentViewMode =\n      viewMode !== newState.viewMode && (viewMode === ViewMode.xy || newState.viewMode === ViewMode.xy);\n    const isAtDifferentTime = time !== newState.time;\n    const isAtDifferentZSlice = newState.viewMode === ViewMode.xy && !isEqual(newState.slice.z, slice.z);\n    const willNeedResetOnLoad = isInDifferentViewMode || isAtDifferentTime || isAtDifferentZSlice;\n\n    overrideViewerState(changeViewerSetting, newState);\n    overrideChannelStates(setChannelSettings, channelSettings, newChannelStates);\n\n    this.channelsToReset = new Set(Array(newChannelStates.length).keys());\n    if (willNeedResetOnLoad) {\n      const enabledChannelsAndResetState = getEnabledChannelIndices(newChannelStates);\n      this.channelsToResetOnLoad = new Set(enabledChannelsAndResetState);\n      for (const channelIndex of enabledChannelsAndResetState) {\n        this.channelsToReset.delete(channelIndex);\n      }\n    }\n  }\n\n  /** Resets to the initial saved state of the viewer, as shown to the user on load. */\n  public resetToSavedViewerState(): void {\n    const { channelSettings } = this.ref.current;\n    const newViewerState = {\n      ...getDefaultViewerState(),\n      cameraState: getDefaultCameraState(this.savedViewerState.viewMode || ViewMode.threeD),\n      ...this.savedViewerState,\n    };\n    const newChannelSettings = channelSettings.map((_, index) => {\n      const initialChannelSetting = initializeOneChannelSetting(\n        channelSettings[index].name,\n        index,\n        getDefaultChannelColor(index),\n        this.savedViewerChannelSettings\n      );\n      return initialChannelSetting;\n    });\n\n    this.resetToState(newViewerState, newChannelSettings);\n    this.useDefaultViewerChannelSettings = false;\n  }\n\n  /** Reset to global default viewer state, as if loading the volume with no parameters. */\n  public resetToDefaultViewerState(): void {\n    const { channelSettings } = this.ref.current;\n    const defaultViewerState = { ...getDefaultViewerState(), cameraState: getDefaultCameraState(ViewMode.threeD) };\n    const defaultChannelStates = channelSettings.map((_, index) => getDefaultChannelState(index));\n\n    for (let i = 0; i < Math.min(3, defaultChannelStates.length); i++) {\n      defaultChannelStates[i].volumeEnabled = true;\n    }\n\n    this.resetToState(defaultViewerState, defaultChannelStates);\n    this.useDefaultViewerChannelSettings = true;\n  }\n}\n","import { isEqual } from \"lodash\";\nimport React, { useCallback, useContext, useEffect, useMemo, useReducer, useRef } from \"react\";\n\nimport { getDefaultViewerChannelSettings, getDefaultViewerState } from \"../../shared/constants\";\nimport { RenderMode, ViewMode } from \"../../shared/enums\";\nimport { ColorArray } from \"../../shared/utils/colorRepresentations\";\nimport { useConstructor } from \"../../shared/utils/hooks\";\nimport type {\n  ChannelSettingUpdater,\n  ChannelState,\n  ChannelStateKey,\n  PartialIfObject,\n  ViewerSettingChangeHandlers,\n  ViewerSettingUpdater,\n  ViewerState,\n  ViewerStateContextType,\n} from \"./types\";\n\nimport ResetStateProvider from \"./ResetStateProvider\";\n\nconst isObject = <T,>(val: T): val is Extract<T, Record<string, unknown>> =>\n  typeof val === \"object\" && val !== null && !Array.isArray(val);\n\n// Some viewer settings require custom change behaviors to change related settings simultaneously or guard against\n// entering an illegal state (e.g. autorotate must not be on in pathtrace mode). Those behaviors are defined here.\nconst VIEWER_SETTINGS_CHANGE_HANDLERS: ViewerSettingChangeHandlers = {\n  // View mode: if we're switching to 2d, switch to volumetric rendering\n  viewMode: (prevSettings, viewMode) => {\n    const switchToVolumetric = viewMode !== ViewMode.threeD && prevSettings.renderMode === RenderMode.pathTrace;\n    return {\n      ...prevSettings,\n      viewMode,\n      renderMode: switchToVolumetric ? RenderMode.volumetric : prevSettings.renderMode,\n    };\n  },\n  // Render mode: if we're switching to pathtrace, turn off autorotate\n  // Also, do not allow pathtrace mode in any mode other than 3D.\n  renderMode: (prevSettings, renderMode) => {\n    if (renderMode === RenderMode.pathTrace && prevSettings.viewMode !== ViewMode.threeD) {\n      return { ...prevSettings };\n    }\n    return {\n      ...prevSettings,\n      renderMode,\n      autorotate: renderMode === RenderMode.pathTrace ? false : prevSettings.autorotate,\n    };\n  },\n  // Autorotate: do not enable autorotate while in pathtrace mode\n  autorotate: (prevSettings, autorotate) => ({\n    ...prevSettings,\n    // The button should theoretically be unclickable while in pathtrace mode, but this provides extra security\n    autorotate: prevSettings.renderMode === RenderMode.pathTrace ? false : autorotate,\n  }),\n};\n\ntype ViewerStateAction<K extends keyof ViewerState> = {\n  key: K;\n  value: PartialIfObject<ViewerState[K]>;\n};\n\nconst viewerSettingsReducer = <K extends keyof ViewerState>(\n  viewerSettings: ViewerState,\n  { key, value }: ViewerStateAction<K>\n): ViewerState => {\n  const changeHandler = VIEWER_SETTINGS_CHANGE_HANDLERS[key];\n\n  if (changeHandler) {\n    // This setting has a custom change handler. Let it handle creating a new state object.\n    return changeHandler(viewerSettings, value);\n  } else {\n    const setting = viewerSettings[key];\n    if (isObject(setting) && isObject(value)) {\n      // This setting is an object, and we may be updating it with a partial object.\n      return { ...viewerSettings, [key]: { ...setting, ...value } };\n    } else {\n      // This setting is regular. Update it the regular way.\n      return { ...viewerSettings, [key]: value };\n    }\n  }\n};\n\nenum ChannelSettingActionType {\n  UniformUpdate = \"UniformUpdate\",\n  ArrayUpdate = \"ArrayUpdate\",\n  Init = \"Init\",\n}\n\n/** Set channel setting `key` on one or more channels specified by `index` to value `value`. */\ntype ChannelSettingUniformUpdateAction<K extends ChannelStateKey> = {\n  type: ChannelSettingActionType.UniformUpdate;\n  index: number | number[];\n  value: Partial<Record<K, ChannelState[K]>>;\n};\n/** Set the values of channel setting `key` for all channels from an array of values ordered by channel index */\ntype ChannelSettingArrayUpdateAction<K extends ChannelStateKey> = {\n  type: ChannelSettingActionType.ArrayUpdate;\n  key: K;\n  value: ChannelState[K][];\n};\n/** Initialize list of channel states */\ntype ChannelSettingInitAction = {\n  type: ChannelSettingActionType.Init;\n  value: ChannelState[];\n};\n\ntype ChannelStateAction<K extends ChannelStateKey> =\n  | ChannelSettingUniformUpdateAction<K>\n  | ChannelSettingArrayUpdateAction<K>\n  | ChannelSettingInitAction;\n\nconst channelSettingsReducer = <K extends ChannelStateKey>(\n  channelSettings: ChannelState[],\n  action: ChannelStateAction<K>\n): ChannelState[] => {\n  if (action.type === ChannelSettingActionType.Init) {\n    // ChannelSettingInitAction\n    return action.value;\n  } else if (action.type === ChannelSettingActionType.ArrayUpdate) {\n    // ChannelSettingArrayUpdateAction\n    return channelSettings.map((channel, idx) => {\n      return action.value[idx] ? { ...channel, [action.key]: action.value[idx] } : channel;\n    });\n  } else {\n    // type is ChannelSettingActionType.UniformUpdate\n    if (Array.isArray(action.index)) {\n      // ChannelSettingUniformUpdateAction on potentially multiple channels\n      return channelSettings.map((channel, idx) =>\n        (action.index as number[]).includes(idx) ? { ...channel, ...action.value } : channel\n      );\n    } else {\n      // ChannelSettingUniformUpdateAction on a single channel\n      const newSettings = channelSettings.slice();\n      if (action.index >= 0 && action.index < channelSettings.length) {\n        newSettings[action.index] = { ...newSettings[action.index], ...action.value };\n      }\n      return newSettings;\n    }\n  }\n};\n\nconst nullfn = (): void => {};\n\nconst DEFAULT_VIEWER_CONTEXT: ViewerStateContextType = {\n  ...getDefaultViewerState(),\n  channelSettings: [],\n  changeViewerSetting: nullfn,\n  setChannelSettings: nullfn,\n  changeChannelSetting: nullfn,\n  applyColorPresets: nullfn,\n  resetToSavedViewerState: nullfn,\n  resetToDefaultViewerState: nullfn,\n  setSavedViewerChannelSettings: nullfn,\n  getCurrentViewerChannelSettings: () => getDefaultViewerChannelSettings(),\n  getChannelsAwaitingReset: () => new Set(),\n  getChannelsAwaitingResetOnLoad: () => new Set(),\n  onResetChannel: nullfn,\n};\n\nexport const ALL_VIEWER_STATE_KEYS = Object.keys(DEFAULT_VIEWER_CONTEXT) as (keyof ViewerStateContextType)[];\n\nconst DEFAULT_VIEWER_CONTEXT_OUTER = { ref: { current: DEFAULT_VIEWER_CONTEXT } };\n\ntype NoNull<T> = { [K in keyof T]: NonNullable<T[K]> };\ntype ContextRefType = NoNull<React.MutableRefObject<ViewerStateContextType>>;\n\nexport const ViewerStateContext = React.createContext<{ ref: ContextRefType }>(DEFAULT_VIEWER_CONTEXT_OUTER);\n\n/** Provides a central store for the state of the viewer, and the methods to update it. */\nconst ViewerStateProvider: React.FC<{ viewerSettings?: Partial<ViewerState>; children?: React.ReactNode }> = (\n  props\n) => {\n  const [viewerSettings, viewerDispatch] = useReducer(viewerSettingsReducer, { ...getDefaultViewerState() });\n  const [channelSettings, channelDispatch] = useReducer(channelSettingsReducer, []);\n  // Provide viewer state via a ref, so that closures that run asynchronously can capture the ref instead of the\n  // specific values they need and always have the most up-to-date state.\n  const ref = useRef(DEFAULT_VIEWER_CONTEXT);\n\n  const resetProvider = useConstructor(() => new ResetStateProvider(ref));\n  useEffect(() => {\n    resetProvider.setSavedViewerState(props.viewerSettings || {});\n  }, [props.viewerSettings, resetProvider]);\n\n  const changeViewerSetting = useCallback<ViewerSettingUpdater>((key, value) => viewerDispatch({ key, value }), []);\n\n  const changeChannelSetting = useCallback<ChannelSettingUpdater>((index, value) => {\n    channelDispatch({ type: ChannelSettingActionType.UniformUpdate, index, value });\n  }, []);\n\n  const applyColorPresets = useCallback(\n    (value: ColorArray[]): void => channelDispatch({ type: ChannelSettingActionType.ArrayUpdate, key: \"color\", value }),\n    []\n  );\n\n  const setChannelSettings = useCallback(\n    (channels: ChannelState[]) => channelDispatch({ type: ChannelSettingActionType.Init, value: channels }),\n    []\n  );\n\n  // https://react.dev/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes\n  const prevViewerSettingsPropsRef = useRef<Partial<ViewerState> | undefined>(undefined);\n  if (props.viewerSettings && !isEqual(props.viewerSettings, prevViewerSettingsPropsRef.current)) {\n    for (const key of Object.keys(props.viewerSettings) as (keyof ViewerState)[]) {\n      if (viewerSettings[key] !== props.viewerSettings[key]) {\n        changeViewerSetting(key, props.viewerSettings[key] as any);\n      }\n    }\n    prevViewerSettingsPropsRef.current = props.viewerSettings;\n  }\n\n  const context = useMemo(() => {\n    ref.current = {\n      ...viewerSettings,\n      channelSettings,\n      changeViewerSetting,\n      setChannelSettings,\n      changeChannelSetting,\n      applyColorPresets,\n      // Reset-related callbacks\n      setSavedViewerChannelSettings: resetProvider.setSavedViewerChannelSettings,\n      getCurrentViewerChannelSettings: resetProvider.getCurrentViewerChannelSettings,\n      getChannelsAwaitingReset: resetProvider.getChannelsAwaitingReset,\n      getChannelsAwaitingResetOnLoad: resetProvider.getChannelsAwaitingResetOnLoad,\n      onResetChannel: resetProvider.onResetChannel,\n      resetToSavedViewerState: resetProvider.resetToSavedViewerState,\n      resetToDefaultViewerState: resetProvider.resetToDefaultViewerState,\n    };\n\n    // `ref` is wrapped in another object to ensure that the context updates when state does.\n    // (`ref` on its own would always compare equal to itself and the context would never update.)\n    return { ref };\n  }, [\n    viewerSettings,\n    channelSettings,\n    applyColorPresets,\n    changeViewerSetting,\n    changeChannelSetting,\n    setChannelSettings,\n    resetProvider,\n  ]);\n\n  return <ViewerStateContext.Provider value={context}>{props.children}</ViewerStateContext.Provider>;\n};\n\n/**\n * Higher-order component that connects a component to the viewer state context.\n *\n * Accepts a `component` and an array of `keys` from the viewer state context, and returns a new memoized component\n * which \"subscribes\" to only those fields of state, and will not re-render if other fields change. This works by\n * creating a component which is \"split in two\" as described\n * [here](https://react.dev/reference/react/memo#updating-a-memoized-component-using-a-context).\n *\n * NOTE that while higher-order components don't seem to be explicitly considered an anti-pattern, they don't appear in\n * modern documentation because they are \"[not commonly used in modern React\n * code](https://legacy.reactjs.org/docs/higher-order-components.html).\" React-redux, which inspired this \"connect\"\n * pattern, has also generally moved away from this pattern [in favor of a hooks-based\n * approach](https://react-redux.js.org/api/hooks). I too would love to use hooks to connect to viewer state, but there\n * is currently no way to hook into context without agreeing to re-render on every change. I feel okay using a higher-\n * order component in this case because, analogous to a custom hook, it extends a provided primitive HOC (`memo`).\n */\nexport function connectToViewerState<\n  Keys extends keyof ViewerStateContextType,\n  Props extends Pick<ViewerStateContextType, Keys>,\n>(component: React.FC<Props>, keys: Keys[]): React.FC<Omit<Props, Keys>> {\n  const MemoedComponent = React.memo(component);\n\n  const ConnectedComponent: React.FC<Omit<Props, Keys>> = (props) => {\n    const viewerState = useContext(ViewerStateContext);\n\n    const mergedProps = { ...props } as Props;\n    for (const key of keys) {\n      (mergedProps as Pick<ViewerStateContextType, Keys>)[key] = viewerState.ref.current[key];\n    }\n\n    return <MemoedComponent {...mergedProps} />;\n  };\n\n  ConnectedComponent.displayName = `Connected(${component.displayName || component.name})`;\n  return ConnectedComponent;\n}\n\nexport default ViewerStateProvider;\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n// TODO: Make exports here for primary/tertiary buttons to abstract away\n// Ant button styling.\n\n// Enforce the primary type for behavior on hover.\nconst PrimaryButton = React.forwardRef<HTMLButtonElement, { children?: React.ReactNode }>((props, ref) => (\n  <Button {...props} ref={ref} type=\"primary\">\n    {props.children}\n  </Button>\n));\n// Used for debugging in React. Eslint complains if not set.\nPrimaryButton.displayName = \"PrimaryButton\";\n\n// Secondary button is outlined but turns solid on hover (uses primary button behavior).\nexport const SecondaryButton = styled(PrimaryButton)`\n  &&& {\n    background-color: var(--color-button-secondary-bg);\n    border: 1px solid var(--color-button-secondary-outline);\n    color: var(--color-button-secondary-text);\n  }\n` as typeof Button;\n","import { Button, Dropdown, MenuProps, Modal } from \"antd\";\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DropdownSVG } from \"../assets/icons\";\nimport { FlexColumnAlignCenter, FlexRowAlignCenter } from \"./LandingPage/utils\";\n\nimport { SecondaryButton } from \"./Buttons\";\n\n// Defined in webpack config\ndeclare const VOLEAPP_VERSION: string;\ndeclare const VOLECORE_VERSION: string;\n\nexport default function HelpDropdown(): ReactElement {\n  const [container, setContainer] = useState<HTMLDivElement | null>();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n\n  const [showVersionModal, setShowVersionModal] = useState(false);\n\n  const items: MenuProps[\"items\"] = [\n    {\n      key: \"github\",\n      label: (\n        <Link to=\"https://github.com/allen-cell-animated/vole-app\" target=\"_blank\" rel=\"noreferrer noopener\">\n          Visit GitHub repository\n        </Link>\n      ),\n    },\n    {\n      key: \"github-issue\",\n      label: (\n        <Link\n          to=\"https://github.com/allen-cell-animated/vole-app/issues/new/choose\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Report issue via GitHub\n        </Link>\n      ),\n    },\n    {\n      key: \"forum\",\n      label: (\n        <Link to=\"https://forum.allencell.org/c/software-code/11\" target=\"_blank\" rel=\"noreferrer noopener\">\n          Allen Cell Discussion Forum\n        </Link>\n      ),\n    },\n    {\n      key: \"version\",\n      label: \"Version info\",\n      onClick: () => {\n        setShowVersionModal(true);\n      },\n    },\n  ];\n\n  // Use state update here to force a re-render so Dropdown is rendered with a valid `getContainer` callback.\n  // Otherwise, the `getContainer` callback will be undefined on the first render.\n  useEffect(() => {\n    setContainer(containerRef.current);\n  }, []);\n  const getContainer = container !== null ? () => container! : undefined;\n\n  const closeVersionModal = (): void => setShowVersionModal(false);\n\n  return (\n    <div ref={containerRef}>\n      <Dropdown menu={{ items: items }} getPopupContainer={getContainer} trigger={[\"click\"]}>\n        <SecondaryButton>\n          <FlexRowAlignCenter $gap={6}>\n            Help <DropdownSVG />\n          </FlexRowAlignCenter>\n        </SecondaryButton>\n      </Dropdown>\n      <Modal\n        open={showVersionModal}\n        title=\"Version info\"\n        getContainer={getContainer}\n        onCancel={() => setShowVersionModal(false)}\n        footer={<Button onClick={closeVersionModal}>Close</Button>}\n      >\n        <FlexColumnAlignCenter $gap={0}>\n          <p style={{ margin: 0 }}>Vol-E App v{VOLEAPP_VERSION}</p>\n          <p style={{ margin: 0 }}>Vol-E Core package v{VOLECORE_VERSION}</p>\n        </FlexColumnAlignCenter>\n      </Modal>\n    </div>\n  );\n}\n","import { useCallback, useMemo } from \"react\";\nimport { useLocalStorage } from \"usehooks-ts\";\n\n/** Key for local storage to read/write recently opened datasets */\nconst RECENT_DATASETS_STORAGE_KEY = \"WEBSITE_3D_CELL_VIEWER.recentDatasets\";\nconst MAX_RECENT_URLS = 100;\n\n// Label and URL are stored separately, so if a user provides an input URL (the label) that is transformed into an absolute\n// URL, we can check for duplicates using the absolute URL while still showing the user's input.\n// This is more relevant in nucmorph, where we're resolving filepaths to absolute URLs, but it's useful functionality to bake in\n// for future use.\n\nexport type RecentDataUrl = {\n  /** The absolute URL path, post any transformation or remapping. Stored for comparison between urls. */\n  url: string;\n  /** The user input that was used to load the data. */\n  label: string;\n};\n\n/**\n * Wrapper around locally-stored recent urls.\n * @returns an array containing the list of recent data urls and a function to add a new url to the list.\n */\nexport const useRecentDataUrls = (): [RecentDataUrl[], (newEntry: RecentDataUrl) => void] => {\n  const [storedRecentEntries, setRecentEntries] = useLocalStorage<RecentDataUrl[]>(RECENT_DATASETS_STORAGE_KEY, []);\n\n  // Sanitize/validate recent entries\n  let recentEntries: RecentDataUrl[] = useMemo(\n    () => storedRecentEntries.filter(({ url, label }) => typeof url === \"string\" && typeof label === \"string\"),\n    [storedRecentEntries]\n  );\n  if (recentEntries.length !== storedRecentEntries.length) {\n    setRecentEntries(recentEntries);\n  }\n\n  /** Adds a new URL entry (url + label) to the list of recent datasets. */\n  const addRecentEntry = useCallback(\n    (newEntry: RecentDataUrl): void => {\n      if (recentEntries === null) {\n        setRecentEntries([newEntry]);\n        return;\n      }\n\n      // Find matches by absolute URL and move to front of the list if a match exists.\n      const datasetIndex = recentEntries.findIndex(({ url }) => url === newEntry.url);\n      if (datasetIndex === -1) {\n        // New entry, add to front while maintaining max length\n        setRecentEntries([newEntry as RecentDataUrl, ...recentEntries.slice(0, MAX_RECENT_URLS - 1)]);\n      } else {\n        // Move to front; this also updates the label if it changed.\n        setRecentEntries([\n          newEntry as RecentDataUrl,\n          ...recentEntries.slice(0, datasetIndex),\n          ...recentEntries.slice(datasetIndex + 1),\n        ]);\n      }\n    },\n    [recentEntries, setRecentEntries]\n  );\n\n  return [recentEntries || [], addRecentEntry];\n};\n","import React, { ReactElement } from \"react\";\nimport styled, { css } from \"styled-components\";\n\n// Adapted from \"CSS-only middle truncation with ellipsis\"\n// by Mark Chitty https://codepen.io/markchitty/pen/RNZbRE\n\ntype MiddleTruncatedTextProps = {\n  text: string;\n  /** Minimum characters to show at the start of the text. 3 by default. */\n  startCharacters?: number;\n  /**\n   * Minimum characters to show at the end of the text. Hidden by start characters if the container\n   * does not have enough space. 35 by default.\n   */\n  endCharacters?: number;\n};\n\nconst defaultProps: Partial<MiddleTruncatedTextProps> = {\n  startCharacters: 3,\n  endCharacters: 35,\n};\n\nconst MiddleTruncatedTextContainer = styled.div<{ $startChars: number; $endChars: number }>`\n  display: flex;\n  flex-direction: row;\n  vertical-align: bottom;\n  white-space: nowrap;\n\n  ${(props) => {\n    // Determined experimentally. If this is too high, excess padding will appear to the right of\n    // the end text. If this is too low, the end text will be clipped.\n    const characterPxWidthToFontSizeRatio = 0.5;\n    return css`\n      --startWidth: calc(1em * ${props.$startChars + 3} * ${characterPxWidthToFontSizeRatio});\n      --endWidth: calc(1em * ${props.$endChars} * ${characterPxWidthToFontSizeRatio});\n\n      & span {\n        display: inline-block;\n        vertical-align: bottom;\n        white-space: nowrap;\n        overflow: hidden;\n      }\n\n      & span:first-child {\n        max-width: calc(100% - var(--endWidth));\n        min-width: var(--startWidth);\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n\n      & span:last-child {\n        max-width: calc(100% - var(--startWidth));\n        direction: rtl;\n        z-index: 800;\n      }\n    `;\n  }}\n`;\n\n/**\n * Renders text that will be truncated with ellipses in the middle of the text if there isn't\n * enough space to show the full text. The number of characters shown at the start and end of the text are configurable.\n *\n * @example\n * ```\n * <MiddleTruncatedText text=\"This is a long text that will be truncated in the middle\" startCharacters={3} endCharacters={5} />\n * ```\n * can be rendered as any of the following depending on the available space:\n * - `This is a long text that will be truncated in the middle`\n * - `This is a long text that will ...iddle`\n * - `This is a long text...iddle`\n * - `Thi...iddle`\n * - `Thi...`\n */\nexport default function MiddleTruncatedText(inputProps: MiddleTruncatedTextProps): ReactElement {\n  const props = { ...defaultProps, ...inputProps } as Required<MiddleTruncatedTextProps>;\n\n  let startChars = Math.max(0, props.startCharacters);\n  let endChars = Math.max(0, props.endCharacters);\n  if (props.text.length <= startChars + endChars) {\n    endChars = props.text.length - startChars;\n  }\n\n  const splitIndex = Math.max(0, props.text.length - endChars);\n  const startText = props.text.slice(0, splitIndex);\n  const endText = props.text.slice(splitIndex);\n\n  // TODO: Text characters in endText can be partially clipped. Is there a way to prevent this from happening?\n\n  return (\n    <MiddleTruncatedTextContainer\n      $startChars={startChars}\n      $endChars={endChars}\n      aria-label={props.text}\n      title={props.text}\n    >\n      {\n        // The `$lrm;` is a non-printing character that indicates text punctuation should be rendered as left-to-right instead of rtl.\n        // It's included to prevent a visual bug where punctuation at the start (ex: !?_.:, etc.)\n        // of `endText` is rendered at the end instead. See https://en.wikipedia.org/wiki/Left-to-right_mark.\n        // (we are using rtl rendering so that the ellipses render on the left side of the text. )\n      }\n      <span>{startText}</span>\n      <span>&lrm;{endText}</span>\n    </MiddleTruncatedTextContainer>\n  );\n}\n","import { UploadOutlined } from \"@ant-design/icons\";\nimport { AutoComplete, Button, Modal } from \"antd\";\nimport Fuse from \"fuse.js\";\nimport React, { ReactElement, useMemo, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { AppDataProps } from \"../../types\";\nimport { RecentDataUrl, useRecentDataUrls } from \"../../utils/react_utils\";\nimport { isValidUrl } from \"../../utils/url_utils\";\nimport { FlexRow } from \"../LandingPage/utils\";\n\nimport MiddleTruncatedText from \"../MiddleTruncatedText\";\n\nconst MAX_RECENT_URLS_TO_DISPLAY = 20;\n\ntype LoadModalProps = {\n  onLoad: (appProps: AppDataProps) => void;\n};\n\nconst ModalContainer = styled.div`\n  // Get the dropdown to size itself based on the webpage width, but resize itself to match the\n  // input area (~100vw - 100px of padding) when the webpage is very narrow\n  .ant-select-dropdown {\n    // TODO: Size to max-content so there isn't extra dead space past the end of the current items.\n    // Setting width to max-content directly causes the dropdown to collapse to a width of\n    // 0 pixels when more than 8 items are present and scrolling becomes enabled.\n    width: 100% !important;\n    max-width: calc(max(50vw, min(400px, 100vw - 100px)));\n  }\n`;\n\nexport default function LoadModal(props: LoadModalProps): ReactElement {\n  const [showModal, _setShowModal] = useState(false);\n  const [urlInput, setUrlInput] = useState(\"\");\n  const [errorText, setErrorText] = useState<string>(\"\");\n\n  const [recentDataUrls, addRecentDataUrl] = useRecentDataUrls();\n\n  const modalContainerRef = useRef<HTMLDivElement>(null);\n\n  const setShowModal = (show: boolean): void => {\n    if (show) {\n      setUrlInput(\"\");\n      setErrorText(\"\");\n    }\n    _setShowModal(show);\n  };\n\n  const onClickLoad = (): void => {\n    // TODO: Handle multiple URLs?\n    // TODO: Do any transformation of URLs here? Currently just using the labels directly.\n    if (!isValidUrl(urlInput)) {\n      setErrorText(\"Please enter a valid URL.\");\n      return;\n    }\n\n    const appProps: AppDataProps = {\n      imageUrl: urlInput,\n      imageDownloadHref: urlInput,\n      cellId: \"1\",\n      parentImageUrl: \"\",\n      parentImageDownloadHref: \"\",\n      // Enable first three channels by default\n      viewerChannelSettings: {\n        groups: [\n          {\n            name: \"Channels\",\n            channels: [\n              { match: [0, 1, 2], enabled: true },\n              { match: \"(.+)\", enabled: false },\n            ],\n          },\n        ],\n      },\n    };\n    props.onLoad(appProps);\n    addRecentDataUrl({ url: urlInput, label: urlInput });\n    setShowModal(false);\n  };\n\n  // Set up fuse for fuzzy searching on the labels of recent datasets\n  const fuse = useMemo(() => {\n    return new Fuse(recentDataUrls, {\n      keys: [\"label\"],\n      isCaseSensitive: false,\n      shouldSort: true, // sorts by match score\n      ignoreLocation: true, // search more than first 60 characters\n      findAllMatches: true, // return all matches\n    });\n  }, [recentDataUrls]);\n\n  // This search could be done using a transition if needed, but since there is a max of 100 urls,\n  // performance hits should be minimal.\n  const autoCompleteOptions: { label: React.ReactNode; value: string }[] = useMemo(() => {\n    let filteredItems: RecentDataUrl[] = [];\n    if (urlInput === \"\") {\n      // Show first 20 recent data urls\n      filteredItems = recentDataUrls.slice(0, MAX_RECENT_URLS_TO_DISPLAY);\n    } else {\n      // Show first 20 search results\n      filteredItems = fuse\n        .search(urlInput)\n        .slice(0, MAX_RECENT_URLS_TO_DISPLAY)\n        .map((option) => option.item);\n    }\n    return filteredItems.map((item) => {\n      return {\n        label: <MiddleTruncatedText text={item.label} />,\n        value: item.url,\n      };\n    });\n  }, [urlInput, fuse, recentDataUrls]);\n\n  const getAutoCompletePopupContainer = modalContainerRef.current ? () => modalContainerRef.current! : undefined;\n\n  return (\n    <ModalContainer ref={modalContainerRef}>\n      <Button type=\"link\" onClick={() => setShowModal(!showModal)}>\n        <UploadOutlined />\n        Load\n      </Button>\n      <Modal\n        open={showModal}\n        title={\"Load\"}\n        onCancel={() => setShowModal(false)}\n        getContainer={modalContainerRef.current || undefined}\n        okButtonProps={{}}\n        footer={\n          <Button type=\"default\" onClick={() => setShowModal(false)}>\n            Cancel\n          </Button>\n        }\n        destroyOnClose={true}\n      >\n        <p style={{ fontSize: \"16px\" }}>Provide the URL to load your OME-Zarr or OME-TIFF* data.</p>\n        <p style={{ fontSize: \"12px\" }}>\n          <i>*Note: this tool is intended for OME-Zarr use. Large {\"(> 100 MB)\"} OME-TIFF files are not supported.</i>\n        </p>\n        <FlexRow $gap={6}>\n          <AutoComplete\n            value={urlInput}\n            onChange={(value) => setUrlInput(value)}\n            onSelect={setUrlInput}\n            style={{ width: \"100%\" }}\n            allowClear={true}\n            options={autoCompleteOptions}\n            getPopupContainer={getAutoCompletePopupContainer}\n            placeholder=\"Enter a URL...\"\n            autoFocus={true}\n          ></AutoComplete>\n          <Button type=\"primary\" onClick={onClickLoad}>\n            Load\n          </Button>\n        </FlexRow>\n        {errorText !== \"\" && <p style={{ color: \"var(--color-text-error)\" }}>{errorText}</p>}\n      </Modal>\n    </ModalContainer>\n  );\n}\n"],"names":["matchChannel","channelName","channelIndex","c","match","Array","isArray","_step","_iterator","_createForOfIteratorHelper","s","n","done","r","value","RegExp","test","err","e","f","Error","findFirstChannelMatchOfGroup","channel","g","_step2","_iterator2","channels","findFirstChannelMatch","settings","groups","_step3","_iterator3","undefined","getDisplayName","name","index","makeChannelIndexGrouping","SINGLE_GROUP_CHANNEL_KEY","map","_val","grouping","channelsMatched","_step4","_iterator4","_loop","forEach","groupMatch","includes","push","length","remainderGroupName","OTHER_CHANNEL_KEY","overrideViewerState","changeViewerSetting","newState","_i","_arr","Object","keys","key","renderMode","overrideChannelStates","setChannelSettings","currentStates","newStates","i","controlPoints","ramp","getEnabledChannelIndices","channelSettings","enabledChannels","volumeEnabled","isosurfaceEnabled","initializeOneChannelSetting","defaultColor","viewerChannelSettings","_initSettings$enabled","_initSettings$surface","_initSettings$coloriz","_initSettings$coloriz2","_initSettings$isovalu","_initSettings$surface2","_colorHexToArray","_initSettings$color","_initSettings$control","_initSettings$control2","_initSettings$ramp","_findFirstChannelMatc","hex","result","defaultChannelState","arguments","getDefaultChannelState","initSettings","displayName","enabled","surfaceEnabled","colorizeEnabled","colorizeAlpha","isovalue","opacity","surfaceOpacity","color","exec","parseInt","useControlPoints","controlPointsEnabled","plotMin","plotMax","isRecord","val","_typeof","VIEWER_SETTINGS_CHANGE_HANDLERS","viewMode","_ref","ViewMode","threeD","RenderMode","pathTrace","volumetric","_ref2","autorotate","willPathtrace","_ref3","validateStateValue","currentState","changeHandler","currentValue","_defineProperty","_objectSpread","validateState","validated","assign","resetState","newChannelStates","time","slice","scene","isInDifferentViewMode","xy","isAtDifferentTime","isAtDifferentZSlice","z","isAtDifferentScene","willNeedResetOnLoad","viewerState","channelState","state","channelsToReset","channelsToResetOnLoad","filter","ch","createResetSlice","set","savedViewerChannelSettings","useDefaultViewerChannelSettings","onResetChannel","resetToSavedViewerState","savedState","_savedState$viewMode","newViewerState","getDefaultViewerState","cameraState","getDefaultCameraState","newChannelSettings","_","getDefaultChannelColor","resetToDefaultViewerState","defaultViewerState","defaultChannelStates","defaultState","useViewerState","create","subscribeWithSelector","_len","etc","_key","apply","concat","mergeViewerSettings","changeChannelSetting","initChannelSettings","applyColorPresets","colors","selectViewerSettings","store","imageType","showAxes","showBoundingBox","boundingBoxColor","backgroundColor","maskAlpha","brightness","density","levels","interpolationEnabled","region","select","parseLutValue","histogram","firstChar","charAt","parsedValue","parseFloat","substring","maxBin","findBinOfPercentile","findFractionalBinOfValue","initializeLut","aimg","_parseLutFromSettings","visibleLut","getHistogram","defaultLut","hmin","LUT_MIN_PERCENTILE","hmax","LUT_MAX_PERCENTILE","Lut","createFromMinMax","getDefaultLut","lut","channelNames","lutValues","findAutoIJBins","Number","isFinite","sortedLutValues","Math","min","max","x","TFEDITOR_DEFAULT_COLOR","createFromControlPoints","parseLutFromSettings","_toConsumableArray","rampToControlPoints","setLut","controlPointsToRamp","TFEDITOR_MAX_BIN","remapControlPointsForChannel","oldRange","rawMin","rawMax","remapControlPoints","useRefWithSetter","setter","init","useRef","wrappedSetter","useCallback","newValue","current","useConstructor","constructor","activeAxisMap","yz","xz","colorObjectToArray","obj","b","colorArrayToObject","arr","colorArrayToString","REF_EQ","fireImmediately","DEEP_EQ","equalityFn","shallow","selectAxisClipUpdateInfo","axis","subscribeImageToState","view3d","image","axisClipUpdater","_ref2$region","minval","maxval","axismin","axismax","imageInfo","volumeSize","setZSlice","floor","setAxisClip","unsubscribers","subscribe","setShowBoundingBox","setBoundingBoxColor","setMaxProjectMode","maxProject","setVolumeRenderMode","RENDERMODE_PATHTRACE","RENDERMODE_RAYMARCH","updateActiveChannels","updateMaskAlpha","updateDensity","_gammaSliderToImageVa","sliderValues","mid","scale","gammaSliderToImageValues","setGamma","setInterpolationEnabled","unsubscribe","PlayControls","_classCallCheck","_this$onPlayingAxisCh","this","playingAxis","onPlayingAxisChanged","call","_this$getVolumeIsLoad","playHolding","stepAxis","getVolumeIsLoaded","playTimeoutId","window","setTimeout","playStep","bind","playWaitingForLoad","willResume","clearTimeout","setPlayingAxis","pause","_regeneratorRuntime","t","prototype","hasOwnProperty","o","defineProperty","Symbol","a","iterator","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","_next","_throw","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","SceneStore","context","paths","loaders","fill","_getLoader","_callee","loader","path","options","_context","currentScene","rawArrayOptions","fileType","VolumeFileFormat","DATA","onOpen","createLoader","syncMultichannelLoading","syncChannels","setPrefetchPriority","prefetchPriority","_x","_loadScene","_callee2","loadSpec","onChannelLoaded","spec","_context2","getLoader","loadSpecRequired","createImageInfo","loadVolumeData","_x2","_x3","_x4","_x5","_createVolume","_callee3","_context3","createVolume","_x6","_x7","_x8","sync","currentLoader","priority","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyDescriptors","defineProperties","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","_unsupportedIterableToArray","_nonIterableRest","ImageLoadStatus","useEffectEventRef","callback","callbackRef","useEffect","_ref$step","step","_ref$precision","precision","_ref$min","_ref$max","MAX_SAFE_INTEGER","_ref$disabled","disabled","_ref$className","className","onChange","_React$useState2","React","hasFocus","_useRefWithSetter2","hasFocusRef","setHasFocus","_React$useState4","textContent","setTextContent","inputRef","clamp","roundToPrecision","round","shouldChange","displayedValue","changeByStep","up","_inputRef$current","focus","fullClassName","onKeyDown","event","preventDefault","_inputRef$current2","blur","autoComplete","role","ref","inputStr","inputNum","handleTyping","target","onFocus","onBlur","onClick","CaretUpOutlined","CaretDownOutlined","MemoedNouislider","Nouislider","_prevProps","noUpdate","props","setNoUpdate","wrapEventHandler","shouldNotUpdate","handler","onStart","onEnd","AXES","SliderRow","label","vals","_ref$valsReadout","valsReadout","onSlide","_ref$onChange","isRange","wrappedOnSlide","wrappedOnChange","SmarterSlider","connect","range","start","margin","behaviour","pips","mode","format","to","NumericInput","PlaySliderRow","_useState2","useState","valReadout","setValReadout","_useState4","sliderHeld","setSliderHeld","wrappedSetValReadout","_ref4","wrappedOnStart","wrappedOnEnd","updateWhileSliding","Tooltip","placement","title","trigger","Button","onTogglePlayback","playing","icon","PauseOutlined","CaretRightOutlined","activeAxis","pauseOnInput","playControls","numSlices","numSlicesLoaded","handlePlayPause","willPlay","play","toUpperCase","slices","updateSlice","startHold","endHold","updateRegion","numTimesteps","updateTime","numScenes","_ref6","axes","_extends","xmlns","width","height","viewBox","cx","cy","boundingBox","camera","closePanel","download","dropdownArrow","metadata","preferences","resetView","turnTable","STYLE","fontSize","newProps","style","Icon","component","ICONS","children","openProp","open","onOpenChange","openState","setOpenState","toggleDrawer","optionsButton","size","ViewerIcon","Drawer","closable","getContainer","mask","view3dviewerRef","appendChild","getDOMElement","spinner","noImageText","appHeight","visibleControls","clippingPanelTall","STYLES","viewer","BottomPanel","clippingPanelOpen","onClippingPanelOpenChange","CLIPPING_PANEL_HEIGHT_TALL","CLIPPING_PANEL_HEIGHT_DEFAULT","axisClipSliders","AxisClipSliders","loadingImage","noImage","LoadingOutlined","zIndex","removeAllVolumes","display","position","overflow","top","left","bottom","right","justifyContent","alignItems","DEFAULT_COLOR","isOpen","setIsOpen","openAboveSwatch","setOpenAboveSwatch","_React$useState6","currentColor","setCurrentColor","swatchRef","popoverDirectionStyle","swatch","swatchRect","getBoundingClientRect","noRoomBelowSwatch","innerHeight","background","ele","popover","cover","SketchPicker","_props$onColorChange","rgb","onColorChange","idx","onChangeComplete","_props$onColorChangeC","onColorChangeComplete","disableAlpha","borderRadius","border","cursor","verticalAlign","INTEGER_FORMATTER","hideSlider","tooltips","formatInteger","onUpdate","TfEditorRampSliderHandle","TF_GENERATORS","autoXF","histo","_histo$findAutoMinMax2","findAutoMinMax","auto2XF","_histo$findAutoIJBins2","auto98XF","bestFitXF","_histo$findBestFitBin2","findBestFitBins","resetXF","_histo","createFullRange","sliderHandleSymbol","draw","sqrt","triangleHeight","halfWidth","moveTo","lineTo","closePath","binToAbsolute","getValueFromBinIndex","absoluteToBin","controlPointToAbsolute","cp","coverRangeWithPoint","point","createPointOnRangeBoundary","outOfRangePt","inRangePt","rangeRatio","ControlPointGradientDef","id","gradientUnits","spreadMethod","x2","offset","stopColor","stopOpacity","numberFormatter","toFixed","innerWidth","selectedPointIdx","setSelectedPointIdx","draggedPointIdx","_setDraggedPointIdx","_setCPs","setRamp","controlPointsRef","setControlPoints","_useRefWithSetter4","draggedPointIdxRef","setDraggedPointIdx","_useState6","colorPickerPosition","setColorPickerPosition","lastColorRef","svgRef","channelData","typeRange","DTYPE_RANGE","dtype","xScale","useMemo","d3","domain","plotMinU8","plotMaxU8","yScale","mouseEventToControlPointValues","_svgRef$current$getBo","_svgRef$current","svgRect","invert","clientX","clientY","handleDragEnd","currentTarget","releasePointerCapture","pointerId","handleControlPointContextMenu","cpRect","xPosition","yPosition","controlPointsToRender","points","firstPoint","lastPoint","unshift","outOfRangePoint","shift","fitControlPointsToRange","areaPath","_areaGenerator","y0","y1","curve","areaGenerator","sliderHandlePath","_d3$symbol$type$size","xAxisRef","el","ticks","_xScale$domain2","tickValues","tickPadding","yAxisRef","histogramRef","numBins","getNumBins","_getHistogramBinLengt","binLengths","NEGATIVE_INFINITY","binLength","getBin","getHistogramBinLengths","ceil","end","binLengthsToRender","barWidth","binScale","base","selectAll","data","join","attr","len","applyTFGenerator","generator","createTFGeneratorButton","description","controlPointCircles","onPointerDown","onContextMenu","splice","viewerModeString","Checkbox","checked","marginLeft","InputNumber","formatter","controls","abs","newControlPoints","button","_mouseEventToControlP2","setPointerCapture","nativeEvent","onPointerMove","buttons","stopPropagation","_mouseEventToControlP4","draggedIdx","draggedPoint","bisector","idxLeft","idxRight","numPointsToRemove","newIdx","dragControlPoint","Min","dragRampSlider","onPointerUp","transform","strokeDasharray","strokeWidth","Max","saveIsosurface","controlsOpen","setControlsOpen","changeSettingForThisChannel","visibilityControls","rowClass","List","Item","Meta","avatar","ColorPicker","newRGB","_oldRGB","TfEditor","channelDataForChannel","ISOSURFACE_OPACITY_SLIDER_MAX","_ref5","fontStyle","indeterminate","checkedList","allOptions","checkAll","channelGroupedByType","channelDataChannels","filterFunc","createCheckboxHandler","channelArray","showVolumes","showSurfaces","renderVisibilityControls","volChecked","isoChecked","channelSetting","SharedCheckBox","flex","renderChannelRow","thisChannelSettings","ChannelsWidgetRow","firstKey","rows","entries","itemLayout","dataSource","renderItem","extra","Collapse","bordered","defaultActiveKey","items","collapsible","ColorPickerRow","colorPickerRow","colorPicker","padding","borderBottom","marginRight","backgroundColorPicker","boundingBoxColorPicker","createSliderRow","propKey","_strValues","_handle","selectValue","showControls","paddingTop","paddingBottom","alphaMaskSlider","brightnessSlider","densitySlider","levelsSliders","interpolationControl","isCategory","entry","MetadataCategory","collapsed","setCollapsed","collapsedClass","colSpan","RightOutlined","MetadataTable","topLevel","metadataKeys","metadataIsArray","metadataValue","cats","sortCategoriesFirst","ControlTab","ControlTabNames","Channels","Advanced","Metadata","showCustomize","dropDownMenuProps","tab","_setTab","controlPanelContainerRef","getDropdownContainer","hasImage","renderTab","thisTab","metadataViewer","colorPresetsDropdown","PRESET_COLOR_MAP","preset","onApplyColorPresets","Dropdown","menu","getPopupContainer","flexDirection","gap","ChannelsWidget","GlobalVolumeControls","imageName","pixelSize","CustomizeWidget","Flex","vertical","MetadataViewer","getMetadata","IssueLink","bug","href","rel","UNKNOWN_ERROR_DESCRIPTION","ERROR_TYPE_DESCRIPTIONS","VolumeLoadErrorType","UNKNOWN","NOT_FOUND","TOO_LARGE","LOAD_DATA_FAILED","INVALID_METADATA","INVALID_MULTI_SOURCE_ZARR","getErrorTitle","error","_error$toString","ErrorAlert","errors","_ref2$firstErrorCount","firstErrorCount","afterClose","onSkipError","showDetails","setShowDetails","errorsSeenCount","setErrorsSeenCount","errorMessage","_ERROR_TYPE_DESCRIPTI2","getErrorDescription","skipErrorButton","count","Alert","showIcon","message","action","fovDownloadHref","cellDownloadHref","hasFov","viewModes","Radio","onViewModeChange","visuallyHiddenStyle","clip","whiteSpace","borderWidth","containerRef","barRef","leftRef","rightRef","centerRef","scrollMode","setScrollMode","showScrollBtnLeft","setScrollBtnLeft","showScrollBtnRight","setScrollBtnRight","checkScrollBtnVisible","barEl","scrollLeft","scrollWidth","clientWidth","checkSize","debounce","leftRect","centerRect","rightRect","addEventListener","removeEventListener","scrollX","amount","classForToggleBtn","active","twoDMode","renderGroup1","viewModeRadioButtons","resetCameraButton","autoRotateButton","renderGroup4","showAxesButton","showBoundingBoxButton","axesToggleTitle","boundingBoxToggleTitle","turntableToggleTitle","onWheel","deltaY","onScroll","ReloadOutlined","ViewModeRadioButtons","newMode","resetCamera","fovCellSwitchControls","hasCellId","hasParentImage","ImageType","segmentedCell","fullField","Select","popupClassName","Option","canPathTrace","DownloadButton","downloadScreenshot","version","channelStateSelector","useShallow","useImageEffect","effect","deps","setVolumeChannelEnabled","updateLuts","setVolumeChannelOptions","currentImage","isosurfaceOpacity","gradient","controlPointsToLut","createLabelColors","setColorPalette","setColorPaletteAlpha","Sider","Layout","Content","defaultVisibleControls","saveSurfaceButtons","defaultProps","rawData","rawDims","imageUrl","parentImageUrl","viewerSettings","cellId","imageDownloadHref","parentImageDownloadHref","canvasMargin","view3dRef","_props$viewerChannelS","_scenes$length","_scenes2","_image$imageInfo$volu","_image$imageInfo$subr","_image$imageInfo$time","_props$transform2","_props$transform4","resetToSavedState","View3d","errorList","setErrorList","seenErrors","_React$useState8","errorCounts","setErrorCounts","addError","errCount","_useErrorAlert2","Map","_seenErrors$get","console","errorTitle","errorSeenCount","get","errorAlert","showError","setLoadErrorHandler","_vol","imageUrlRef","scenesRef","_props","scenes","_scenes","isEqual","maskChannelName","channelRangesRef","removePreviousImage","onCreateImage","newImage","_removePreviousImage$","getState","addVolume","find","unsubscribeView","setCameraMode","resize","setCameraState","setAutoRotate","setShowAxis","setBackgroundColor","updateExposure","subscribeViewToState","unsubscribeImage","isInitialLoad","currentViewerChannelSettings","getDefaultViewerChannelSettings","thisChannel","getChannel","noLut","_initializeLut","remappedRampControlPoints","remappedControlPoints","onVolumeData","setVolumeChannelAsMask","isLoaded","volume","scenePaths","onErrorRef","onError","onChannelLoadedRef","onCreateImageRef","setImage","loadContext","VolumeLoaderContext","CACHE_MAX_SIZE","QUEUE_MAX_SIZE","QUEUE_MAX_LOW_PRIORITY_SIZE","sceneLoader","isPlaying","AXIS_TO_LOADER_PRIORITY","_image$imageInfo","subregionSize","shouldDownlevel","updateRequiredData","scaleLevelBias","channelVersions","channelVersionsRef","setChannelVersions","_useState8","loadThrewError","setLoadThrewError","inInitialLoadRef","imageLoadStatus","ERROR","_channelVersions$redu","reduce","allLoaded","noneLoaded","setting","loaded","_channelVersions$redu2","REQUESTED","LOADED","LOADING","setIsLoading","_onErrorRef$current","_useState10","setChannelGroupedByType","onChannelDataLoaded","_onChannelLoadedRef$c","newVersions","onImageLoaded","setChannelStateForNewImage","every","_channelSettings$idx","openImage","_onCreateImageRef$cur","requiredLoadSpec","requiredChannelsToLoad","_useViewerState$getSt2","maskChannelIndex","LoadSpec","times","indexOf","subregion","Box3","Vector3","loadScene","setTime","setScene","useVolume","CONTROL_PANEL_CLOSE_WIDTH","controlPanelClosed","setControlPanelClosed","hasAutoClosedControlPanel","setHasAutoClosedControlPanel","setClippingPanelOpen","clippingPanelOpenTimeout","saveChannelIsosurface","saveScreenshot","capture","dataUrl","anchor","document","createElement","click","_props2","metadataFormatter","sceneMeta","_sceneMeta","imageMetadata","Image","hasTime","hasScenes","mode3d","panelOpen","isMode3d","axisY","AXIS_MARGIN_DEFAULT","_SCALE_BAR_MARGIN_DEF","SCALE_BAR_MARGIN_DEFAULT","scaleBarX","scaleBarY","clippingPanelHeight","setShowTimestepIndicator","setAxisPosition","setTimestepIndicatorPosition","setScaleBarPosition","setIndicatorPositions","setShowScaleBar","onResizeDebounced","onControlPanelToggle","dispatchEvent","Event","_initializeLut2","_props$transform","setVolumeTranslation","translation","_props$transform3","setVolumeRotation","rotation","physicalPixelSize","toArray","StyleProvider","ChannelUpdater","defaultCollapsed","collapsedWidth","ControlPanel","Toolbar","hasWebGL2","CellViewerCanvasWrapper","ResetStateProvider","viewerStateRef","savedViewerState","Set","resetToState","setSavedViewerState","setSavedViewerChannelSettings","getChannelsAwaitingReset","getChannelsAwaitingResetOnLoad","getCurrentViewerChannelSettings","_this$ref$current","enabledChannelsAndResetState","_this","isObject","prevSettings","switchToVolumetric","viewerSettingsReducer","ChannelSettingActionType","channelSettingsReducer","Init","ArrayUpdate","newSettings","nullfn","DEFAULT_VIEWER_CONTEXT","DEFAULT_VIEWER_CONTEXT_OUTER","ViewerStateContext","_useReducer2","useReducer","viewerDispatch","_useReducer4","channelDispatch","resetProvider","UniformUpdate","prevViewerSettingsPropsRef","Provider","PrimaryButton","SecondaryButton","styled","_templateObject","HelpDropdown","container","setContainer","showVersionModal","setShowVersionModal","Link","FlexRowAlignCenter","$gap","DropdownSVG","Modal","onCancel","footer","FlexColumnAlignCenter","VOLEAPP_VERSION","VOLECORE_VERSION","useRecentDataUrls","_useLocalStorage2","useLocalStorage","storedRecentEntries","setRecentEntries","recentEntries","url","addRecentEntry","newEntry","datasetIndex","findIndex","MAX_RECENT_URLS","startCharacters","endCharacters","MiddleTruncatedTextContainer","div","_taggedTemplateLiteral","css","_templateObject2","$startChars","$endChars","MiddleTruncatedText","inputProps","startChars","endChars","text","splitIndex","startText","endText","MAX_RECENT_URLS_TO_DISPLAY","ModalContainer","LoadModal","showModal","_setShowModal","urlInput","setUrlInput","errorText","setErrorText","_useRecentDataUrls2","recentDataUrls","addRecentDataUrl","modalContainerRef","setShowModal","show","fuse","Fuse","isCaseSensitive","shouldSort","ignoreLocation","findAllMatches","autoCompleteOptions","search","option","item","getAutoCompletePopupContainer","UploadOutlined","okButtonProps","destroyOnClose","FlexRow","AutoComplete","onSelect","allowClear","placeholder","autoFocus","isValidUrl","appProps","onLoad"],"sourceRoot":""}