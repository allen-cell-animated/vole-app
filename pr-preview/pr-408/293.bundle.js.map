{"version":3,"file":"293.bundle.js","mappings":"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","sources":["webpack://@aics/vole-app/./node_modules/xml-utils/count-substring.js","webpack://@aics/vole-app/./node_modules/xml-utils/find-tag-by-name.js","webpack://@aics/vole-app/./node_modules/xml-utils/find-tags-by-name.js","webpack://@aics/vole-app/./node_modules/xml-utils/get-attribute.js","webpack://@aics/vole-app/./node_modules/xml-utils/index-of-match-end.js","webpack://@aics/vole-app/./node_modules/xml-utils/index-of-match.js","webpack://@aics/vole-app/./node_modules/@petamoriken/float16/src/DataView.mjs","webpack://@aics/vole-app/./node_modules/@petamoriken/float16/src/_util/arrayIterator.mjs","webpack://@aics/vole-app/./node_modules/@petamoriken/float16/src/_util/converter.mjs","webpack://@aics/vole-app/./node_modules/@petamoriken/float16/src/_util/messages.mjs","webpack://@aics/vole-app/./node_modules/@petamoriken/float16/src/_util/primordials.mjs","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/compression/index.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/dataslice.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/dataview64.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/geotiff.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/geotiffimage.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/globals.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/resample.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/rgb.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/basesource.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/blockedsource.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/client/base.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/client/fetch.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/client/http.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/client/xhr.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/httputils.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/source/remote.js","webpack://@aics/vole-app/./node_modules/geotiff/dist-module/utils.js","webpack://@aics/vole-app/./node_modules/quick-lru/index.js","webpack://@aics/vole-app/./node_modules/serialize-error/error-constructors.js","webpack://@aics/vole-app/./node_modules/zarrita/dist/src/errors.js"],"sourcesContent":["function countSubstring(string, substring) {\n  const pattern = new RegExp(substring, \"g\");\n  const match = string.match(pattern);\n  return match ? match.length : 0;\n}\n\nmodule.exports = countSubstring;\nmodule.exports.default = countSubstring;\n","const indexOfMatch = require(\"./index-of-match.js\");\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\nconst countSubstring = require(\"./count-substring.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = (options && options.debug) || false;\n  const nested = !(options && typeof options.nested === false);\n\n  const startIndex = (options && options.startIndex) || 0;\n\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\n\\>\\/]`, startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n\n  const afterStart = xml.slice(start + tagName.length);\n\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      let startIndex = 0;\n      let openings = 1;\n      let closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n\n  const end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return { inner, outer, start, end };\n}\n\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;\n","const findTagByName = require(\"./find-tag-by-name.js\");\n\nfunction findTagsByName(xml, tagName, options) {\n  const tags = [];\n  const debug = (options && options.debug) || false;\n  const nested = options && typeof options.nested === \"boolean\" ? options.nested : true;\n  let startIndex = (options && options.startIndex) || 0;\n  let tag;\n  while ((tag = findTagByName(xml, tagName, { debug, startIndex }))) {\n    if (nested) {\n      startIndex = tag.start + 1 + tagName.length;\n    } else {\n      startIndex = tag.end;\n    }\n    tags.push(tag);\n  }\n  if (debug) console.log(\"findTagsByName found\", tags.length, \"tags\");\n  return tags;\n}\n\nmodule.exports = findTagsByName;\nmodule.exports.default = findTagsByName;\n","function getAttribute(tag, attributeName, options) {\n  const debug = (options && options.debug) || false;\n  if (debug) console.log(\"[xml-utils] getting \" + attributeName + \" in \" + tag);\n\n  const xml = typeof tag === \"object\" ? tag.outer : tag;\n\n  // only search for attributes in the opening tag\n  const opening = xml.slice(0, xml.indexOf(\">\") + 1);\n\n  const quotechars = ['\"', \"'\"];\n  for (let i = 0; i < quotechars.length; i++) {\n    const char = quotechars[i];\n    const pattern = attributeName + \"\\\\=\" + char + \"([^\" + char + \"]*)\" + char;\n    if (debug) console.log(\"[xml-utils] pattern:\", pattern);\n\n    const re = new RegExp(pattern);\n    const match = re.exec(opening);\n    if (debug) console.log(\"[xml-utils] match:\", match);\n    if (match) return match[1];\n  }\n}\n\nmodule.exports = getAttribute;\nmodule.exports.default = getAttribute;\n","function indexOfMatchEnd(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index + match[0].length - 1;\n  else return -1;\n}\n\nmodule.exports = indexOfMatchEnd;\nmodule.exports.default = indexOfMatchEnd;\n","function indexOfMatch(xml, pattern, startIndex) {\n  const re = new RegExp(pattern);\n  const match = re.exec(xml.slice(startIndex));\n  if (match) return startIndex + match.index;\n  else return -1;\n}\n\nmodule.exports = indexOfMatch;\nmodule.exports.default = indexOfMatch;\n","import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  DataViewPrototypeGetUint16,\n  DataViewPrototypeSetUint16,\n} from \"./_util/primordials.mjs\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(\n    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))\n  );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(\n    dataView,\n    byteOffset,\n    roundToFloat16Bits(value),\n    ...safeIfNeeded(opts)\n  );\n}\n","import {\n  ArrayIteratorPrototype,\n  ArrayIteratorPrototypeNext,\n  ArrayPrototypeSymbolIterator,\n  GeneratorPrototypeNext,\n  IteratorPrototype,\n  NativeArrayPrototypeSymbolIterator,\n  NativeWeakMap,\n  ObjectCreate,\n  ObjectDefineProperty,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectOwnKeys,\n  SymbolIterator,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeSet,\n} from \"./primordials.mjs\";\n\n/** @type {WeakMap<{}, IterableIterator<any>>} */\nconst arrayIterators = new NativeWeakMap();\n\nconst SafeIteratorPrototype = ObjectCreate(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\n      return ArrayIteratorPrototypeNext(arrayIterator);\n    },\n  },\n\n  [SymbolIterator]: {\n    value: function values() {\n      return this;\n    },\n  },\n});\n\n/**\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\n * @type {<T>(array: T[]) => Iterable<T>}\n */\nexport function safeIfNeeded(array) {\n  if (\n    array[SymbolIterator] === NativeArrayPrototypeSymbolIterator &&\n    ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext\n  ) {\n    return array;\n  }\n\n  const safe = ObjectCreate(SafeIteratorPrototype);\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\n  return safe;\n}\n\n/** @type {WeakMap<{}, Generator<any>>} */\nconst generators = new NativeWeakMap();\n\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = WeakMapPrototypeGet(generators, this);\n      return GeneratorPrototypeNext(generator);\n    },\n    writable: true,\n    configurable: true,\n  },\n});\n\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\n  // next method has already defined\n  if (key === \"next\") {\n    continue;\n  }\n\n  // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\n}\n\n/**\n * Wrap the Generator around the dummy ArrayIterator\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\n */\nexport function wrap(generator) {\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\n  WeakMapPrototypeSet(generators, dummy, generator);\n  return dummy;\n}\n","import {\n  EPSILON,\n  MathAbs,\n  NativeArrayBuffer,\n  NativeFloat32Array,\n  NativeUint16Array,\n  NativeUint32Array,\n  NativeUint8Array,\n  NumberIsFinite,\n  NumberIsNaN,\n} from \"./primordials.mjs\";\n\nconst INVERSE_OF_EPSILON = 1 / EPSILON;\n\n/**\n * rounds to the nearest value;\n * if the number falls midway, it is rounded to the nearest value with an even least significant digit\n * @param {number} num\n * @returns {number}\n */\nfunction roundTiesToEven(num) {\n  return (num + INVERSE_OF_EPSILON) - INVERSE_OF_EPSILON;\n}\n\nconst FLOAT16_MIN_VALUE = 6.103515625e-05;\nconst FLOAT16_MAX_VALUE = 65504;\nconst FLOAT16_EPSILON = 0.0009765625;\n\nconst FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE;\nconst FLOAT16_EPSILON_DEVIDED_BY_EPSILON = FLOAT16_EPSILON * INVERSE_OF_EPSILON;\n\n/**\n * round a number to a half float number\n * @param {unknown} num - double float\n * @returns {number} half float number\n */\nexport function roundToFloat16(num) {\n  const number = +num;\n\n  // NaN, Infinity, -Infinity, 0, -0\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n\n  // finite except 0, -0\n  const sign = number > 0 ? 1 : -1;\n  const absolute = MathAbs(number);\n\n  // small number\n  if (absolute < FLOAT16_MIN_VALUE) {\n    return sign * roundTiesToEven(absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE) * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;\n  }\n\n  const temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute;\n  const result = temp - (temp - absolute);\n\n  // large number\n  if (result > FLOAT16_MAX_VALUE || NumberIsNaN(result)) {\n    return sign * Infinity;\n  }\n\n  return sign * result;\n}\n\n// base algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\n\nconst baseTable = new NativeUint16Array(512);\nconst shiftTable = new NativeUint8Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -24) {\n    baseTable[i]         = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i]         =  0x0400 >> (-e - 14);\n    baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n    shiftTable[i]         = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n  // normal number\n  } else if (e <= 15) {\n    baseTable[i]         =  (e + 15) << 10;\n    baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n\n  // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = roundToFloat16(num);\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\nconst mantissaTable = new NativeUint32Array(2048);\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13; // zero pad mantissa bits\n  let e = 0; // zero exponent\n\n  // normalized\n  while ((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000; // decrement exponent\n  }\n\n  m &= ~0x00800000; // clear leading 1 bit\n  e += 0x38800000; // adjust bias\n\n  mantissaTable[i] = m | e;\n}\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n}\n\nconst exponentTable = new NativeUint32Array(64);\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n}\nexponentTable[63] = 0xc7800000;\n\nconst offsetTable = new NativeUint16Array(64);\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  const i = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[i] + (float16bits & 0x3ff)] + exponentTable[i];\n  return floatView[0];\n}\n","export const THIS_IS_NOT_AN_OBJECT = \"This is not an object\";\nexport const THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = \"This is not a Float16Array object\";\nexport const THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY =\n  \"This constructor is not a subclass of Float16Array\";\nexport const THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT =\n  \"The constructor property value is not an object\";\nexport const SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT =\n  \"Species constructor didn't return TypedArray object\";\nexport const DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH =\n  \"Derived constructor created TypedArray object which was too small length\";\nexport const ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER =\n  \"Attempting to access detached ArrayBuffer\";\nexport const CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT =\n  \"Cannot convert undefined or null to object\";\nexport const CANNOT_MIX_BIGINT_AND_OTHER_TYPES =\n  \"Cannot mix BigInt and other types, use explicit conversions\";\nexport const ITERATOR_PROPERTY_IS_NOT_CALLABLE = \"@@iterator property is not callable\";\nexport const REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE =\n  \"Reduce of empty array with no initial value\";\nexport const THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED =\n  \"The comparison function must be either a function or undefined\";\nexport const OFFSET_IS_OUT_OF_BOUNDS = \"Offset is out of bounds\";\n","/* eslint-disable no-restricted-globals, no-restricted-syntax */\n/* global SharedArrayBuffer */\n\nimport { CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT } from \"./messages.mjs\";\n\n/** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */\nfunction uncurryThis(target) {\n  return (thisArg, ...args) => {\n    return ReflectApply(target, thisArg, args);\n  };\n}\n\n/** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */\nfunction uncurryThisGetter(target, key) {\n  return uncurryThis(\n    ReflectGetOwnPropertyDescriptor(\n      target,\n      key\n    ).get\n  );\n}\n\n// Reflect\nexport const {\n  apply: ReflectApply,\n  construct: ReflectConstruct,\n  defineProperty: ReflectDefineProperty,\n  get: ReflectGet,\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\n  getPrototypeOf: ReflectGetPrototypeOf,\n  has: ReflectHas,\n  ownKeys: ReflectOwnKeys,\n  set: ReflectSet,\n  setPrototypeOf: ReflectSetPrototypeOf,\n} = Reflect;\n\n// Proxy\nexport const NativeProxy = Proxy;\n\n// Number\nexport const {\n  EPSILON,\n  MAX_SAFE_INTEGER,\n  isFinite: NumberIsFinite,\n  isNaN: NumberIsNaN,\n} = Number;\n\n// Symbol\nexport const {\n  iterator: SymbolIterator,\n  species: SymbolSpecies,\n  toStringTag: SymbolToStringTag,\n  for: SymbolFor,\n} = Symbol;\n\n// Object\nexport const NativeObject = Object;\nexport const {\n  create: ObjectCreate,\n  defineProperty: ObjectDefineProperty,\n  freeze: ObjectFreeze,\n  is: ObjectIs,\n} = NativeObject;\nconst ObjectPrototype = NativeObject.prototype;\n/** @type {(object: object, key: PropertyKey) => Function | undefined} */\nexport const ObjectPrototype__lookupGetter__ = /** @type {any} */ (ObjectPrototype).__lookupGetter__\n  ? uncurryThis(/** @type {any} */ (ObjectPrototype).__lookupGetter__)\n  : (object, key) => {\n    if (object == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    let target = NativeObject(object);\n    do {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      if (descriptor !== undefined) {\n        if (ObjectHasOwn(descriptor, \"get\")) {\n          return descriptor.get;\n        }\n\n        return;\n      }\n    } while ((target = ReflectGetPrototypeOf(target)) !== null);\n  };\n/** @type {(object: object, key: PropertyKey) => boolean} */\nexport const ObjectHasOwn = /** @type {any} */ (NativeObject).hasOwn ||\n  uncurryThis(ObjectPrototype.hasOwnProperty);\n\n// Array\nconst NativeArray = Array;\nexport const ArrayIsArray = NativeArray.isArray;\nconst ArrayPrototype = NativeArray.prototype;\n/** @type {(array: ArrayLike<unknown>, separator?: string) => string} */\nexport const ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\n/** @type {<T>(array: T[], ...items: T[]) => number} */\nexport const ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\n/** @type {(array: ArrayLike<unknown>, ...opts: any[]) => string} */\nexport const ArrayPrototypeToLocaleString = uncurryThis(\n  ArrayPrototype.toLocaleString\n);\nexport const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\n/** @type {<T>(array: T[]) => IterableIterator<T>} */\nexport const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);\n\n// Math\nexport const {\n  abs: MathAbs,\n  trunc: MathTrunc,\n} = Math;\n\n// ArrayBuffer\nexport const NativeArrayBuffer = ArrayBuffer;\nexport const ArrayBufferIsView = NativeArrayBuffer.isView;\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\n/** @type {(buffer: ArrayBuffer, begin?: number, end?: number) => number} */\nexport const ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\n/** @type {(buffer: ArrayBuffer) => ArrayBuffer} */\nexport const ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\");\n\n// SharedArrayBuffer\nexport const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\n/** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */\nexport const SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer\n  && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\");\n\n// TypedArray\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n/** @type {any} */\nexport const TypedArray = ReflectGetPrototypeOf(Uint8Array);\nconst TypedArrayFrom = TypedArray.from;\nexport const TypedArrayPrototype = TypedArray.prototype;\nexport const NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeValues = uncurryThis(\n  TypedArrayPrototype.values\n);\n/** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */\nexport const TypedArrayPrototypeEntries = uncurryThis(\n  TypedArrayPrototype.entries\n);\n/** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */\nexport const TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\n/** @type {<T extends TypedArray>(typedArray: T) => T} */\nexport const TypedArrayPrototypeReverse = uncurryThis(\n  TypedArrayPrototype.reverse\n);\n/** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\n/** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */\nexport const TypedArrayPrototypeCopyWithin = uncurryThis(\n  TypedArrayPrototype.copyWithin\n);\n/** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */\nexport const TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSubarray = uncurryThis(\n  TypedArrayPrototype.subarray\n);\n/** @type {((typedArray: TypedArray) => ArrayBuffer)} */\nexport const TypedArrayPrototypeGetBuffer = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"buffer\"\n);\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetByteOffset = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"byteOffset\"\n);\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetLength = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"length\"\n);\n/** @type {(target: unknown) => string} */\nexport const TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(\n  TypedArrayPrototype,\n  SymbolToStringTag\n);\n\n// Uint8Array\nexport const NativeUint8Array = Uint8Array;\n\n// Uint16Array\nexport const NativeUint16Array = Uint16Array;\n/** @type {Uint16ArrayConstructor[\"from\"]} */\nexport const Uint16ArrayFrom = (...args) => {\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\n};\n\n// Uint32Array\nexport const NativeUint32Array = Uint32Array;\n\n// Float32Array\nexport const NativeFloat32Array = Float32Array;\n\n// ArrayIterator\n/** @type {any} */\nexport const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\n/** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */\nexport const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);\n\n// Generator\n/** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */\nexport const GeneratorPrototypeNext = uncurryThis((function* () {})().next);\n\n// Iterator\nexport const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);\n\n// DataView\nconst DataViewPrototype = DataView.prototype;\n/** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */\nexport const DataViewPrototypeGetUint16 = uncurryThis(\n  DataViewPrototype.getUint16\n);\n/** @type {(dataView: DataView, byteOffset: number, value: number, littleEndian?: boolean) => void} */\nexport const DataViewPrototypeSetUint16 = uncurryThis(\n  DataViewPrototype.setUint16\n);\n\n// Error\nexport const NativeTypeError = TypeError;\nexport const NativeRangeError = RangeError;\n\n// WeakSet\n/**\n * Do not construct with arguments to avoid calling the \"add\" method\n * @type {{new <T extends {}>(): WeakSet<T>}}\n */\nexport const NativeWeakSet = WeakSet;\nconst WeakSetPrototype = NativeWeakSet.prototype;\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => Set<T>} */\nexport const WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => boolean} */\nexport const WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);\n\n// WeakMap\n/**\n * Do not construct with arguments to avoid calling the \"set\" method\n * @type {{new <K extends {}, V>(): WeakMap<K, V>}}\n */\nexport const NativeWeakMap = WeakMap;\nconst WeakMapPrototype = NativeWeakMap.prototype;\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */\nexport const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => boolean} */\nexport const WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */\nexport const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);\n","const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js')\n  .then(async (m) => {\n    await m.zstd.init();\n    return m;\n  })\n  .then((m) => m.default),\n);\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n","export default class DataSlice {\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\n    this._dataView = new DataView(arrayBuffer);\n    this._sliceOffset = sliceOffset;\n    this._littleEndian = littleEndian;\n    this._bigTiff = bigTiff;\n  }\n\n  get sliceOffset() {\n    return this._sliceOffset;\n  }\n\n  get sliceTop() {\n    return this._sliceOffset + this.buffer.byteLength;\n  }\n\n  get littleEndian() {\n    return this._littleEndian;\n  }\n\n  get bigTiff() {\n    return this._bigTiff;\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  covers(offset, length) {\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\n  }\n\n  readUint8(offset) {\n    return this._dataView.getUint8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt8(offset) {\n    return this._dataView.getInt8(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint16(offset) {\n    return this._dataView.getUint16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt16(offset) {\n    return this._dataView.getInt16(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint32(offset) {\n    return this._dataView.getUint32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readInt32(offset) {\n    return this._dataView.getInt32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat32(offset) {\n    return this._dataView.getFloat32(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readFloat64(offset) {\n    return this._dataView.getFloat64(\n      offset - this._sliceOffset, this._littleEndian,\n    );\n  }\n\n  readUint64(offset) {\n    const left = this.readUint32(offset);\n    const right = this.readUint32(offset + 4);\n    let combined;\n    if (this._littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  readInt64(offset) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\n      > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(\n        offset + (this._littleEndian ? i : 7 - i),\n      );\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  readOffset(offset) {\n    if (this._bigTiff) {\n      return this.readUint64(offset);\n    }\n    return this.readUint32(offset);\n  }\n}\n","import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n","/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource, makeCustomSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { BaseClient, BaseResponse } from './source/client/base.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Creates a new GeoTIFF from a custom {@link BaseClient}.\n * @param {BaseClient} client The client.\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromCustomClient(client, options = {}, signal) {\n  return GeoTIFF.fromSource(makeCustomSource(client, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\nexport { BaseClient, BaseResponse };\n","/** @module geotiffimage */\nimport { getFloat16 } from '@petamoriken/float16';\nimport getAttribute from 'xml-utils/get-attribute.js';\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\n\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\nimport { getDecoder } from './compression/index.js';\nimport { resample, resampleInterleaved } from './resample.js';\n\n/**\n * @typedef {Object} ReadRasterOptions\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\n *                                           geographical coordinates.\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\n * @property {boolean} [interleave=false] whether the data shall be read\n *                                             in one single array or separate\n *                                             arrays.\n * @property {Pool} [pool=null] The optional decoder pool to use.\n * @property {number} [width] The desired width of the output. When the width is not the\n *                                 same as the images, resampling will be performed.\n * @property {number} [height] The desired height of the output. When the width is not the\n *                                  same as the images, resampling will be performed.\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                                       to be aborted\n * @property {number|number[]} [fillValue] The value to use for parts of the image\n *                                              outside of the images extent. When multiple\n *                                              samples are requested, an array of fill values\n *                                              can be passed.\n */\n\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\n\nfunction sum(array, start, end) {\n  let s = 0;\n  for (let i = start; i < end; ++i) {\n    s += array[i];\n  }\n  return s;\n}\n\nfunction arrayForType(format, bitsPerSample, size) {\n  switch (format) {\n    case 1: // unsigned integer data\n      if (bitsPerSample <= 8) {\n        return new Uint8Array(size);\n      } else if (bitsPerSample <= 16) {\n        return new Uint16Array(size);\n      } else if (bitsPerSample <= 32) {\n        return new Uint32Array(size);\n      }\n      break;\n    case 2: // twos complement signed integer data\n      if (bitsPerSample === 8) {\n        return new Int8Array(size);\n      } else if (bitsPerSample === 16) {\n        return new Int16Array(size);\n      } else if (bitsPerSample === 32) {\n        return new Int32Array(size);\n      }\n      break;\n    case 3: // floating point data\n      switch (bitsPerSample) {\n        case 16:\n        case 32:\n          return new Float32Array(size);\n        case 64:\n          return new Float64Array(size);\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n  throw Error('Unsupported data format/bitsPerSample');\n}\n\nfunction needsNormalization(format, bitsPerSample) {\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\n    return false;\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\n    return false;\n  }\n  return true;\n}\n\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\n  // const inByteArray = new Uint8Array(inBuffer);\n  const view = new DataView(inBuffer);\n  const outSize = planarConfiguration === 2\n    ? tileHeight * tileWidth\n    : tileHeight * tileWidth * samplesPerPixel;\n  const samplesToTransfer = planarConfiguration === 2\n    ? 1 : samplesPerPixel;\n  const outArray = arrayForType(format, bitsPerSample, outSize);\n  // let pixel = 0;\n\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\n\n  if (format === 1) { // unsigned integer\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\n    let pixelBitSkip;\n    // let sampleBitOffset = 0;\n    if (planarConfiguration === 1) {\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\n    } else {\n      pixelBitSkip = bitsPerSample;\n    }\n\n    // Bits per line rounds up to next byte boundary.\n    let bitsPerLine = tileWidth * pixelBitSkip;\n    if ((bitsPerLine & 7) !== 0) {\n      bitsPerLine = (bitsPerLine + 7) & (~7);\n    }\n\n    for (let y = 0; y < tileHeight; ++y) {\n      const lineBitOffset = y * bitsPerLine;\n      for (let x = 0; x < tileWidth; ++x) {\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\n        for (let i = 0; i < samplesToTransfer; ++i) {\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\n\n          const byteOffset = Math.floor(bitOffset / 8);\n          const innerBitOffset = bitOffset % 8;\n          if (innerBitOffset + bitsPerSample <= 8) {\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 16) {\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else if (innerBitOffset + bitsPerSample <= 24) {\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\n          } else {\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\n          }\n\n          // let outWord = 0;\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\n          //   if (inByteArray[bitOffset >> 3]\n          //     & (0x80 >> (bitOffset & 7))) {\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\n          //   }\n          //   ++bitOffset;\n          // }\n\n          // outArray[outIndex] = outWord;\n          // outArray[pixel] = outWord;\n          // pixel += 1;\n        }\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\n      }\n    }\n  } else if (format === 3) { // floating point\n    // Float16 is handled elsewhere\n    // normalize 16/24 bit floats to 32 bit floats in the array\n    // console.time();\n    // if (bitsPerSample === 16) {\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\n    //     outArray[outIndex] = getFloat16(view, byte);\n    //   }\n    // }\n    // console.timeEnd()\n  }\n\n  return outArray.buffer;\n}\n\n/**\n * GeoTIFF sub-file image.\n */\nclass GeoTIFFImage {\n  /**\n   * @constructor\n   * @param {Object} fileDirectory The parsed file directory\n   * @param {Object} geoKeys The parsed geo-keys\n   * @param {DataView} dataView The DataView for the underlying file.\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\n   */\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeys = geoKeys;\n    this.dataView = dataView;\n    this.littleEndian = littleEndian;\n    this.tiles = cache ? {} : null;\n    this.isTiled = !fileDirectory.StripOffsets;\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\n      throw new Error('Invalid planar configuration.');\n    }\n\n    this.source = source;\n  }\n\n  /**\n   * Returns the associated parsed file directory.\n   * @returns {Object} the parsed file directory\n   */\n  getFileDirectory() {\n    return this.fileDirectory;\n  }\n\n  /**\n   * Returns the associated parsed geo keys.\n   * @returns {Object} the parsed geo keys\n   */\n  getGeoKeys() {\n    return this.geoKeys;\n  }\n\n  /**\n   * Returns the width of the image.\n   * @returns {Number} the width of the image\n   */\n  getWidth() {\n    return this.fileDirectory.ImageWidth;\n  }\n\n  /**\n   * Returns the height of the image.\n   * @returns {Number} the height of the image\n   */\n  getHeight() {\n    return this.fileDirectory.ImageLength;\n  }\n\n  /**\n   * Returns the number of samples per pixel.\n   * @returns {Number} the number of samples per pixel\n   */\n  getSamplesPerPixel() {\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\n      ? this.fileDirectory.SamplesPerPixel : 1;\n  }\n\n  /**\n   * Returns the width of each tile.\n   * @returns {Number} the width of each tile\n   */\n  getTileWidth() {\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\n  }\n\n  /**\n   * Returns the height of each tile.\n   * @returns {Number} the height of each tile\n   */\n  getTileHeight() {\n    if (this.isTiled) {\n      return this.fileDirectory.TileLength;\n    }\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\n    }\n    return this.getHeight();\n  }\n\n  getBlockWidth() {\n    return this.getTileWidth();\n  }\n\n  getBlockHeight(y) {\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\n      return this.getTileHeight();\n    } else {\n      return this.getHeight() - (y * this.getTileHeight());\n    }\n  }\n\n  /**\n   * Calculates the number of bytes for each pixel across all samples. Only full\n   * bytes are supported, an exception is thrown when this is not the case.\n   * @returns {Number} the bytes per pixel\n   */\n  getBytesPerPixel() {\n    let bytes = 0;\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\n      bytes += this.getSampleByteSize(i);\n    }\n    return bytes;\n  }\n\n  getSampleByteSize(i) {\n    if (i >= this.fileDirectory.BitsPerSample.length) {\n      throw new RangeError(`Sample index ${i} is out of range.`);\n    }\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\n  }\n\n  getReaderForSample(sampleIndex) {\n    const format = this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\n    switch (format) {\n      case 1: // unsigned integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getUint8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getUint16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getUint32;\n        }\n        break;\n      case 2: // twos complement signed integer data\n        if (bitsPerSample <= 8) {\n          return DataView.prototype.getInt8;\n        } else if (bitsPerSample <= 16) {\n          return DataView.prototype.getInt16;\n        } else if (bitsPerSample <= 32) {\n          return DataView.prototype.getInt32;\n        }\n        break;\n      case 3:\n        switch (bitsPerSample) {\n          case 16:\n            return function (offset, littleEndian) {\n              return getFloat16(this, offset, littleEndian);\n            };\n          case 32:\n            return DataView.prototype.getFloat32;\n          case 64:\n            return DataView.prototype.getFloat64;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    throw Error('Unsupported data format/bitsPerSample');\n  }\n\n  getSampleFormat(sampleIndex = 0) {\n    return this.fileDirectory.SampleFormat\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\n  }\n\n  getBitsPerSample(sampleIndex = 0) {\n    return this.fileDirectory.BitsPerSample[sampleIndex];\n  }\n\n  getArrayForSample(sampleIndex, size) {\n    const format = this.getSampleFormat(sampleIndex);\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\n    return arrayForType(format, bitsPerSample, size);\n  }\n\n  /**\n   * Returns the decoded strip or tile.\n   * @param {Number} x the strip or tile x-offset\n   * @param {Number} y the tile y-offset (0 for stripped images)\n   * @param {Number} sample the sample to get for separated samples\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise.<ArrayBuffer>}\n   */\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\n    let index;\n    const { tiles } = this;\n    if (this.planarConfiguration === 1) {\n      index = (y * numTilesPerRow) + x;\n    } else if (this.planarConfiguration === 2) {\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\n    }\n\n    let offset;\n    let byteCount;\n    if (this.isTiled) {\n      offset = this.fileDirectory.TileOffsets[index];\n      byteCount = this.fileDirectory.TileByteCounts[index];\n    } else {\n      offset = this.fileDirectory.StripOffsets[index];\n      byteCount = this.fileDirectory.StripByteCounts[index];\n    }\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\n\n    let request;\n    if (tiles === null || !tiles[index]) {\n    // resolve each request by potentially applying array normalization\n      request = (async () => {\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\n        const sampleFormat = this.getSampleFormat();\n        const bitsPerSample = this.getBitsPerSample();\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\n          data = normalizeArray(\n            data,\n            sampleFormat,\n            this.planarConfiguration,\n            this.getSamplesPerPixel(),\n            bitsPerSample,\n            this.getTileWidth(),\n            this.getBlockHeight(y),\n          );\n        }\n        return data;\n      })();\n\n      // set the cache\n      if (tiles !== null) {\n        tiles[index] = request;\n      }\n    } else {\n      // get from the cache\n      request = tiles[index];\n    }\n\n    // cache the tile request\n    return { x, y, sample, data: await request };\n  }\n\n  /**\n   * Internal read function.\n   * @private\n   * @param {Array} imageWindow The image window in pixel coordinates\n   * @param {Array} samples The selected samples (0-based indices)\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\n   * @param {number} width the width of window to be read into\n   * @param {number} height the height of window to be read into\n   * @param {number} resampleMethod the resampling method to be used when interpolating\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   * @returns {Promise<ReadRasterResult>}\n   */\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\n    height, resampleMethod, signal) {\n    const tileWidth = this.getTileWidth();\n    const tileHeight = this.getTileHeight();\n    const imageWidth = this.getWidth();\n    const imageHeight = this.getHeight();\n\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\n    const maxXTile = Math.min(\n      Math.ceil(imageWindow[2] / tileWidth),\n      Math.ceil(imageWidth / tileWidth),\n    );\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\n    const maxYTile = Math.min(\n      Math.ceil(imageWindow[3] / tileHeight),\n      Math.ceil(imageHeight / tileHeight),\n    );\n    const windowWidth = imageWindow[2] - imageWindow[0];\n\n    let bytesPerPixel = this.getBytesPerPixel();\n\n    const srcSampleOffsets = [];\n    const sampleReaders = [];\n    for (let i = 0; i < samples.length; ++i) {\n      if (this.planarConfiguration === 1) {\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\n      } else {\n        srcSampleOffsets.push(0);\n      }\n      sampleReaders.push(this.getReaderForSample(samples[i]));\n    }\n\n    const promises = [];\n    const { littleEndian } = this;\n\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\n        let getPromise;\n        if (this.planarConfiguration === 1) {\n          getPromise = this.getTileOrStrip(xTile, yTile, 0, poolOrDecoder, signal);\n        }\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\n          const si = sampleIndex;\n          const sample = samples[sampleIndex];\n          if (this.planarConfiguration === 2) {\n            bytesPerPixel = this.getSampleByteSize(sample);\n            getPromise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal);\n          }\n          const promise = getPromise.then((tile) => {\n            const buffer = tile.data;\n            const dataView = new DataView(buffer);\n            const blockHeight = this.getBlockHeight(tile.y);\n            const firstLine = tile.y * tileHeight;\n            const firstCol = tile.x * tileWidth;\n            const lastLine = firstLine + blockHeight;\n            const lastCol = (tile.x + 1) * tileWidth;\n            const reader = sampleReaders[si];\n\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\n\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\n                const value = reader.call(\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\n                );\n                let windowCoordinate;\n                if (interleave) {\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\n                    + si;\n                  valueArrays[windowCoordinate] = value;\n                } else {\n                  windowCoordinate = (\n                    (y + firstLine - imageWindow[1]) * windowWidth\n                  ) + x + firstCol - imageWindow[0];\n                  valueArrays[si][windowCoordinate] = value;\n                }\n              }\n            }\n          });\n          promises.push(promise);\n        }\n      }\n    }\n    await Promise.all(promises);\n\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\n      let resampled;\n      if (interleave) {\n        resampled = resampleInterleaved(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          samples.length,\n          resampleMethod,\n        );\n      } else {\n        resampled = resample(\n          valueArrays,\n          imageWindow[2] - imageWindow[0],\n          imageWindow[3] - imageWindow[1],\n          width, height,\n          resampleMethod,\n        );\n      }\n      resampled.width = width;\n      resampled.height = height;\n      return resampled;\n    }\n\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\n\n    return valueArrays;\n  }\n\n  /**\n   * Reads raster data from the image. This function reads all selected samples\n   * into separate arrays of the correct type for that sample or into a single\n   * combined array when `interleave` is set. When provided, only a subset\n   * of the raster is read for each sample.\n   *\n   * @param {ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\n   */\n  async readRasters({\n    window: wnd, samples = [], interleave, pool = null,\n    width, height, resampleMethod, fillValue, signal,\n  } = {}) {\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\n    const numPixels = imageWindowWidth * imageWindowHeight;\n    const samplesPerPixel = this.getSamplesPerPixel();\n\n    if (!samples || !samples.length) {\n      for (let i = 0; i < samplesPerPixel; ++i) {\n        samples.push(i);\n      }\n    } else {\n      for (let i = 0; i < samples.length; ++i) {\n        if (samples[i] >= samplesPerPixel) {\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\n        }\n      }\n    }\n    let valueArrays;\n    if (interleave) {\n      const format = this.fileDirectory.SampleFormat\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\n      if (fillValue) {\n        valueArrays.fill(fillValue);\n      }\n    } else {\n      valueArrays = [];\n      for (let i = 0; i < samples.length; ++i) {\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\n        if (Array.isArray(fillValue) && i < fillValue.length) {\n          valueArray.fill(fillValue[i]);\n        } else if (fillValue && !Array.isArray(fillValue)) {\n          valueArray.fill(fillValue);\n        }\n        valueArrays.push(valueArray);\n      }\n    }\n\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\n\n    const result = await this._readRaster(\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\n    );\n    return result;\n  }\n\n  /**\n   * Reads raster data from the image as RGB. The result is always an\n   * interleaved typed array.\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\n   * When no other method is applicable, the first sample is used to produce a\n   * grayscale image.\n   * When provided, only a subset of the raster is read for each sample.\n   *\n   * @param {Object} [options] optional parameters\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\n   * @param {boolean} [options.interleave=true] whether the data shall be read\n   *                                             in one single array or separate\n   *                                             arrays.\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\n   * @param {number} [options.width] The desired width of the output. When the width is no the\n   *                                 same as the images, resampling will be performed.\n   * @param {number} [options.height] The desired height of the output. When the width is no the\n   *                                  same as the images, resampling will be performed.\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\n   *                                       to be aborted\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\n   */\n  async readRGB({ window, interleave = true, pool = null, width, height,\n    resampleMethod, enableAlpha = false, signal } = {}) {\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\n\n    // check parameters\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\n      throw new Error('Invalid subsets');\n    }\n\n    const pi = this.fileDirectory.PhotometricInterpretation;\n\n    if (pi === photometricInterpretations.RGB) {\n      let s = [0, 1, 2];\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\n        s = [];\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\n          s.push(i);\n        }\n      }\n      return this.readRasters({\n        window,\n        interleave,\n        samples: s,\n        pool,\n        width,\n        height,\n        resampleMethod,\n        signal,\n      });\n    }\n\n    let samples;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n      case photometricInterpretations.BlackIsZero:\n      case photometricInterpretations.Palette:\n        samples = [0];\n        break;\n      case photometricInterpretations.CMYK:\n        samples = [0, 1, 2, 3];\n        break;\n      case photometricInterpretations.YCbCr:\n      case photometricInterpretations.CIELab:\n        samples = [0, 1, 2];\n        break;\n      default:\n        throw new Error('Invalid or unsupported photometric interpretation.');\n    }\n\n    const subOptions = {\n      window: imageWindow,\n      interleave: true,\n      samples,\n      pool,\n      width,\n      height,\n      resampleMethod,\n      signal,\n    };\n    const { fileDirectory } = this;\n    const raster = await this.readRasters(subOptions);\n\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\n    let data;\n    switch (pi) {\n      case photometricInterpretations.WhiteIsZero:\n        data = fromWhiteIsZero(raster, max);\n        break;\n      case photometricInterpretations.BlackIsZero:\n        data = fromBlackIsZero(raster, max);\n        break;\n      case photometricInterpretations.Palette:\n        data = fromPalette(raster, fileDirectory.ColorMap);\n        break;\n      case photometricInterpretations.CMYK:\n        data = fromCMYK(raster);\n        break;\n      case photometricInterpretations.YCbCr:\n        data = fromYCbCr(raster);\n        break;\n      case photometricInterpretations.CIELab:\n        data = fromCIELab(raster);\n        break;\n      default:\n        throw new Error('Unsupported photometric interpretation.');\n    }\n\n    // if non-interleaved data is requested, we must split the channels\n    // into their respective arrays\n    if (!interleave) {\n      const red = new Uint8Array(data.length / 3);\n      const green = new Uint8Array(data.length / 3);\n      const blue = new Uint8Array(data.length / 3);\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\n        red[j] = data[i];\n        green[j] = data[i + 1];\n        blue[j] = data[i + 2];\n      }\n      data = [red, green, blue];\n    }\n\n    data.width = raster.width;\n    data.height = raster.height;\n    return data;\n  }\n\n  /**\n   * Returns an array of tiepoints.\n   * @returns {Object[]}\n   */\n  getTiePoints() {\n    if (!this.fileDirectory.ModelTiepoint) {\n      return [];\n    }\n\n    const tiePoints = [];\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\n      tiePoints.push({\n        i: this.fileDirectory.ModelTiepoint[i],\n        j: this.fileDirectory.ModelTiepoint[i + 1],\n        k: this.fileDirectory.ModelTiepoint[i + 2],\n        x: this.fileDirectory.ModelTiepoint[i + 3],\n        y: this.fileDirectory.ModelTiepoint[i + 4],\n        z: this.fileDirectory.ModelTiepoint[i + 5],\n      });\n    }\n    return tiePoints;\n  }\n\n  /**\n   * Returns the parsed GDAL metadata items.\n   *\n   * If sample is passed to null, dataset-level metadata will be returned.\n   * Otherwise only metadata specific to the provided sample will be returned.\n   *\n   * @param {number} [sample=null] The sample index.\n   * @returns {Object}\n   */\n  getGDALMetadata(sample = null) {\n    const metadata = {};\n    if (!this.fileDirectory.GDAL_METADATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_METADATA;\n\n    let items = findTagsByName(string, 'Item');\n\n    if (sample === null) {\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\n    } else {\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\n    }\n\n    for (let i = 0; i < items.length; ++i) {\n      const item = items[i];\n      metadata[getAttribute(item, 'name')] = item.inner;\n    }\n    return metadata;\n  }\n\n  /**\n   * Returns the GDAL nodata value\n   * @returns {number|null}\n   */\n  getGDALNoData() {\n    if (!this.fileDirectory.GDAL_NODATA) {\n      return null;\n    }\n    const string = this.fileDirectory.GDAL_NODATA;\n    return Number(string.substring(0, string.length - 1));\n  }\n\n  /**\n   * Returns the image origin as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @returns {Array<number>} The origin as a vector\n   */\n  getOrigin() {\n    const tiePoints = this.fileDirectory.ModelTiepoint;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n    if (tiePoints && tiePoints.length === 6) {\n      return [\n        tiePoints[3],\n        tiePoints[4],\n        tiePoints[5],\n      ];\n    }\n    if (modelTransformation) {\n      return [\n        modelTransformation[3],\n        modelTransformation[7],\n        modelTransformation[11],\n      ];\n    }\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\n   * transformation, then an exception is thrown.\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\n   *                                             in cases when the current image does not have the\n   *                                             required tags on its own.\n   * @returns {Array<number>} The resolution as a vector\n   */\n  getResolution(referenceImage = null) {\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\n    const modelTransformation = this.fileDirectory.ModelTransformation;\n\n    if (modelPixelScale) {\n      return [\n        modelPixelScale[0],\n        -modelPixelScale[1],\n        modelPixelScale[2],\n      ];\n    }\n    if (modelTransformation) {\n      if (modelTransformation[1] === 0 && modelTransformation[4] === 0) {\n        return [\n          modelTransformation[0],\n          -modelTransformation[5],\n          modelTransformation[10],\n        ];\n      }\n      return [\n        Math.sqrt((modelTransformation[0] * modelTransformation[0])\n          + (modelTransformation[4] * modelTransformation[4])),\n        -Math.sqrt((modelTransformation[1] * modelTransformation[1])\n          + (modelTransformation[5] * modelTransformation[5])),\n        modelTransformation[10]];\n    }\n\n    if (referenceImage) {\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\n      return [\n        refResX * referenceImage.getWidth() / this.getWidth(),\n        refResY * referenceImage.getHeight() / this.getHeight(),\n        refResZ * referenceImage.getWidth() / this.getWidth(),\n      ];\n    }\n\n    throw new Error('The image does not have an affine transformation.');\n  }\n\n  /**\n   * Returns whether or not the pixels of the image depict an area (or point).\n   * @returns {Boolean} Whether the pixels are a point\n   */\n  pixelIsArea() {\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\n  }\n\n  /**\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\n   * max-x and max-y. When the image has no affine transformation, then an\n   * exception is thrown.\n   * @param {boolean} [tilegrid=false] If true return extent for a tilegrid\n   *                                   without adjustment for ModelTransformation.\n   * @returns {Array<number>} The bounding box\n   */\n  getBoundingBox(tilegrid = false) {\n    const height = this.getHeight();\n    const width = this.getWidth();\n\n    if (this.fileDirectory.ModelTransformation && !tilegrid) {\n      // eslint-disable-next-line no-unused-vars\n      const [a, b, c, d, e, f, g, h] = this.fileDirectory.ModelTransformation;\n\n      const corners = [\n        [0, 0],\n        [0, height],\n        [width, 0],\n        [width, height],\n      ];\n\n      const projected = corners.map(([I, J]) => [\n        d + (a * I) + (b * J),\n        h + (e * I) + (f * J),\n      ]);\n\n      const xs = projected.map((pt) => pt[0]);\n      const ys = projected.map((pt) => pt[1]);\n\n      return [\n        Math.min(...xs),\n        Math.min(...ys),\n        Math.max(...xs),\n        Math.max(...ys),\n      ];\n    } else {\n      const origin = this.getOrigin();\n      const resolution = this.getResolution();\n\n      const x1 = origin[0];\n      const y1 = origin[1];\n\n      const x2 = x1 + (resolution[0] * width);\n      const y2 = y1 + (resolution[1] * height);\n\n      return [\n        Math.min(x1, x2),\n        Math.min(y1, y2),\n        Math.max(x1, x2),\n        Math.max(y1, y2),\n      ];\n    }\n  }\n}\n\nexport default GeoTIFFImage;\n","export const fieldTagNames = {\n  // TIFF Baseline\n  0x013B: 'Artist',\n  0x0102: 'BitsPerSample',\n  0x0109: 'CellLength',\n  0x0108: 'CellWidth',\n  0x0140: 'ColorMap',\n  0x0103: 'Compression',\n  0x8298: 'Copyright',\n  0x0132: 'DateTime',\n  0x0152: 'ExtraSamples',\n  0x010A: 'FillOrder',\n  0x0121: 'FreeByteCounts',\n  0x0120: 'FreeOffsets',\n  0x0123: 'GrayResponseCurve',\n  0x0122: 'GrayResponseUnit',\n  0x013C: 'HostComputer',\n  0x010E: 'ImageDescription',\n  0x0101: 'ImageLength',\n  0x0100: 'ImageWidth',\n  0x010F: 'Make',\n  0x0119: 'MaxSampleValue',\n  0x0118: 'MinSampleValue',\n  0x0110: 'Model',\n  0x00FE: 'NewSubfileType',\n  0x0112: 'Orientation',\n  0x0106: 'PhotometricInterpretation',\n  0x011C: 'PlanarConfiguration',\n  0x0128: 'ResolutionUnit',\n  0x0116: 'RowsPerStrip',\n  0x0115: 'SamplesPerPixel',\n  0x0131: 'Software',\n  0x0117: 'StripByteCounts',\n  0x0111: 'StripOffsets',\n  0x00FF: 'SubfileType',\n  0x0107: 'Threshholding',\n  0x011A: 'XResolution',\n  0x011B: 'YResolution',\n\n  // TIFF Extended\n  0x0146: 'BadFaxLines',\n  0x0147: 'CleanFaxData',\n  0x0157: 'ClipPath',\n  0x0148: 'ConsecutiveBadFaxLines',\n  0x01B1: 'Decode',\n  0x01B2: 'DefaultImageColor',\n  0x010D: 'DocumentName',\n  0x0150: 'DotRange',\n  0x0141: 'HalftoneHints',\n  0x015A: 'Indexed',\n  0x015B: 'JPEGTables',\n  0x011D: 'PageName',\n  0x0129: 'PageNumber',\n  0x013D: 'Predictor',\n  0x013F: 'PrimaryChromaticities',\n  0x0214: 'ReferenceBlackWhite',\n  0x0153: 'SampleFormat',\n  0x0154: 'SMinSampleValue',\n  0x0155: 'SMaxSampleValue',\n  0x022F: 'StripRowCounts',\n  0x014A: 'SubIFDs',\n  0x0124: 'T4Options',\n  0x0125: 'T6Options',\n  0x0145: 'TileByteCounts',\n  0x0143: 'TileLength',\n  0x0144: 'TileOffsets',\n  0x0142: 'TileWidth',\n  0x012D: 'TransferFunction',\n  0x013E: 'WhitePoint',\n  0x0158: 'XClipPathUnits',\n  0x011E: 'XPosition',\n  0x0211: 'YCbCrCoefficients',\n  0x0213: 'YCbCrPositioning',\n  0x0212: 'YCbCrSubSampling',\n  0x0159: 'YClipPathUnits',\n  0x011F: 'YPosition',\n\n  // EXIF\n  0x9202: 'ApertureValue',\n  0xA001: 'ColorSpace',\n  0x9004: 'DateTimeDigitized',\n  0x9003: 'DateTimeOriginal',\n  0x8769: 'Exif IFD',\n  0x9000: 'ExifVersion',\n  0x829A: 'ExposureTime',\n  0xA300: 'FileSource',\n  0x9209: 'Flash',\n  0xA000: 'FlashpixVersion',\n  0x829D: 'FNumber',\n  0xA420: 'ImageUniqueID',\n  0x9208: 'LightSource',\n  0x927C: 'MakerNote',\n  0x9201: 'ShutterSpeedValue',\n  0x9286: 'UserComment',\n\n  // IPTC\n  0x83BB: 'IPTC',\n\n  // ICC\n  0x8773: 'ICC Profile',\n\n  // XMP\n  0x02BC: 'XMP',\n\n  // GDAL\n  0xA480: 'GDAL_METADATA',\n  0xA481: 'GDAL_NODATA',\n\n  // Photoshop\n  0x8649: 'Photoshop',\n\n  // GeoTiff\n  0x830E: 'ModelPixelScale',\n  0x8482: 'ModelTiepoint',\n  0x85D8: 'ModelTransformation',\n  0x87AF: 'GeoKeyDirectory',\n  0x87B0: 'GeoDoubleParams',\n  0x87B1: 'GeoAsciiParams',\n\n  // LERC\n  0xC5F2: 'LercParameters',\n};\n\nexport const fieldTags = {};\nfor (const key in fieldTagNames) {\n  if (fieldTagNames.hasOwnProperty(key)) {\n    fieldTags[fieldTagNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const fieldTagTypes = {\n  256: 'SHORT',\n  257: 'SHORT',\n  258: 'SHORT',\n  259: 'SHORT',\n  262: 'SHORT',\n  273: 'LONG',\n  274: 'SHORT',\n  277: 'SHORT',\n  278: 'LONG',\n  279: 'LONG',\n  282: 'RATIONAL',\n  283: 'RATIONAL',\n  284: 'SHORT',\n  286: 'SHORT',\n  287: 'RATIONAL',\n  296: 'SHORT',\n  297: 'SHORT',\n  305: 'ASCII',\n  306: 'ASCII',\n  338: 'SHORT',\n  339: 'SHORT',\n  513: 'LONG',\n  514: 'LONG',\n  1024: 'SHORT',\n  1025: 'SHORT',\n  2048: 'SHORT',\n  2049: 'ASCII',\n  3072: 'SHORT',\n  3073: 'ASCII',\n  33550: 'DOUBLE',\n  33922: 'DOUBLE',\n  34264: 'DOUBLE',\n  34665: 'LONG',\n  34735: 'SHORT',\n  34736: 'DOUBLE',\n  34737: 'ASCII',\n  42113: 'ASCII',\n};\n\nexport const arrayFields = [\n  fieldTags.BitsPerSample,\n  fieldTags.ExtraSamples,\n  fieldTags.SampleFormat,\n  fieldTags.StripByteCounts,\n  fieldTags.StripOffsets,\n  fieldTags.StripRowCounts,\n  fieldTags.TileByteCounts,\n  fieldTags.TileOffsets,\n  fieldTags.SubIFDs,\n];\n\nexport const fieldTypeNames = {\n  0x0001: 'BYTE',\n  0x0002: 'ASCII',\n  0x0003: 'SHORT',\n  0x0004: 'LONG',\n  0x0005: 'RATIONAL',\n  0x0006: 'SBYTE',\n  0x0007: 'UNDEFINED',\n  0x0008: 'SSHORT',\n  0x0009: 'SLONG',\n  0x000A: 'SRATIONAL',\n  0x000B: 'FLOAT',\n  0x000C: 'DOUBLE',\n  // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html\n  0x000D: 'IFD',\n  // introduced by BigTIFF\n  0x0010: 'LONG8',\n  0x0011: 'SLONG8',\n  0x0012: 'IFD8',\n};\n\nexport const fieldTypes = {};\nfor (const key in fieldTypeNames) {\n  if (fieldTypeNames.hasOwnProperty(key)) {\n    fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);\n  }\n}\n\nexport const photometricInterpretations = {\n  WhiteIsZero: 0,\n  BlackIsZero: 1,\n  RGB: 2,\n  Palette: 3,\n  TransparencyMask: 4,\n  CMYK: 5,\n  YCbCr: 6,\n\n  CIELab: 8,\n  ICCLab: 9,\n};\n\nexport const ExtraSamplesValues = {\n  Unspecified: 0,\n  Assocalpha: 1,\n  Unassalpha: 2,\n};\n\nexport const LercParameters = {\n  Version: 0,\n  AddCompression: 1,\n};\n\nexport const LercAddCompression = {\n  None: 0,\n  Deflate: 1,\n  Zstandard: 2,\n};\n\nexport const geoKeyNames = {\n  1024: 'GTModelTypeGeoKey',\n  1025: 'GTRasterTypeGeoKey',\n  1026: 'GTCitationGeoKey',\n  2048: 'GeographicTypeGeoKey',\n  2049: 'GeogCitationGeoKey',\n  2050: 'GeogGeodeticDatumGeoKey',\n  2051: 'GeogPrimeMeridianGeoKey',\n  2052: 'GeogLinearUnitsGeoKey',\n  2053: 'GeogLinearUnitSizeGeoKey',\n  2054: 'GeogAngularUnitsGeoKey',\n  2055: 'GeogAngularUnitSizeGeoKey',\n  2056: 'GeogEllipsoidGeoKey',\n  2057: 'GeogSemiMajorAxisGeoKey',\n  2058: 'GeogSemiMinorAxisGeoKey',\n  2059: 'GeogInvFlatteningGeoKey',\n  2060: 'GeogAzimuthUnitsGeoKey',\n  2061: 'GeogPrimeMeridianLongGeoKey',\n  2062: 'GeogTOWGS84GeoKey',\n  3072: 'ProjectedCSTypeGeoKey',\n  3073: 'PCSCitationGeoKey',\n  3074: 'ProjectionGeoKey',\n  3075: 'ProjCoordTransGeoKey',\n  3076: 'ProjLinearUnitsGeoKey',\n  3077: 'ProjLinearUnitSizeGeoKey',\n  3078: 'ProjStdParallel1GeoKey',\n  3079: 'ProjStdParallel2GeoKey',\n  3080: 'ProjNatOriginLongGeoKey',\n  3081: 'ProjNatOriginLatGeoKey',\n  3082: 'ProjFalseEastingGeoKey',\n  3083: 'ProjFalseNorthingGeoKey',\n  3084: 'ProjFalseOriginLongGeoKey',\n  3085: 'ProjFalseOriginLatGeoKey',\n  3086: 'ProjFalseOriginEastingGeoKey',\n  3087: 'ProjFalseOriginNorthingGeoKey',\n  3088: 'ProjCenterLongGeoKey',\n  3089: 'ProjCenterLatGeoKey',\n  3090: 'ProjCenterEastingGeoKey',\n  3091: 'ProjCenterNorthingGeoKey',\n  3092: 'ProjScaleAtNatOriginGeoKey',\n  3093: 'ProjScaleAtCenterGeoKey',\n  3094: 'ProjAzimuthAngleGeoKey',\n  3095: 'ProjStraightVertPoleLongGeoKey',\n  3096: 'ProjRectifiedGridAngleGeoKey',\n  4096: 'VerticalCSTypeGeoKey',\n  4097: 'VerticalCitationGeoKey',\n  4098: 'VerticalDatumGeoKey',\n  4099: 'VerticalUnitsGeoKey',\n};\n\nexport const geoKeys = {};\nfor (const key in geoKeyNames) {\n  if (geoKeyNames.hasOwnProperty(key)) {\n    geoKeys[geoKeyNames[key]] = parseInt(key, 10);\n  }\n}\n","/**\n * @module resample\n */\n\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\n}\n\n/**\n * Resample the input arrays using nearest neighbor value selection.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\n      for (let x = 0; x < outWidth; ++x) {\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\n        const value = array[(cy * inWidth) + cx];\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n// simple linear interpolation, code from:\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\nfunction lerp(v0, v1, t) {\n  return ((1 - t) * v0) + (t * v1);\n}\n\n/**\n * Resample the input arrays using bilinear interpolation.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  return valueArrays.map((array) => {\n    const newArray = copyNewSize(array, outWidth, outHeight);\n    for (let y = 0; y < outHeight; ++y) {\n      const rawY = relY * y;\n\n      const yl = Math.floor(rawY);\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n      for (let x = 0; x < outWidth; ++x) {\n        const rawX = relX * x;\n        const tx = rawX % 1;\n\n        const xl = Math.floor(rawX);\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n        const ll = array[(yl * inWidth) + xl];\n        const hl = array[(yl * inWidth) + xh];\n        const lh = array[(yh * inWidth) + xl];\n        const hh = array[(yh * inWidth) + xh];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth) + x] = value;\n      }\n    }\n    return newArray;\n  });\n}\n\n/**\n * Resample the input arrays using the selected resampling method.\n * @param {TypedArray[]} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray[]} The resampled rasters\n */\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n\n/**\n * Resample the pixel interleaved input array using nearest neighbor value selection.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleNearestInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\n    for (let x = 0; x < outWidth; ++x) {\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\n      for (let i = 0; i < samples; ++i) {\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using bilinear interpolation.\n * @param {TypedArray} valueArrays The input arrays to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                         interleaved data\n * @returns {TypedArray} The resampled raster\n */\nexport function resampleBilinearInterleaved(\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\n  const relX = inWidth / outWidth;\n  const relY = inHeight / outHeight;\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\n  for (let y = 0; y < outHeight; ++y) {\n    const rawY = relY * y;\n\n    const yl = Math.floor(rawY);\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\n\n    for (let x = 0; x < outWidth; ++x) {\n      const rawX = relX * x;\n      const tx = rawX % 1;\n\n      const xl = Math.floor(rawX);\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\n\n      for (let i = 0; i < samples; ++i) {\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\n\n        const value = lerp(\n          lerp(ll, hl, tx),\n          lerp(lh, hh, tx),\n          rawY % 1,\n        );\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\n      }\n    }\n  }\n  return newArray;\n}\n\n/**\n * Resample the pixel interleaved input array using the selected resampling method.\n * @param {TypedArray} valueArray The input array to resample\n * @param {number} inWidth The width of the input rasters\n * @param {number} inHeight The height of the input rasters\n * @param {number} outWidth The desired width of the output rasters\n * @param {number} outHeight The desired height of the output rasters\n * @param {number} samples The number of samples per pixel for pixel\n *                                 interleaved data\n * @param {string} [method = 'nearest'] The desired resampling method\n * @returns {TypedArray} The resampled rasters\n */\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\n  switch (method.toLowerCase()) {\n    case 'nearest':\n      return resampleNearestInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    case 'bilinear':\n    case 'linear':\n      return resampleBilinearInterleaved(\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\n      );\n    default:\n      throw new Error(`Unsupported resampling method: '${method}'`);\n  }\n}\n","export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n","/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n","import QuickLRU from 'quick-lru';\nimport { BaseSource } from './basesource.js';\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\n\nclass Block {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {ArrayBuffer} [data]\n   */\n  constructor(offset, length, data = null) {\n    this.offset = offset;\n    this.length = length;\n    this.data = data;\n  }\n\n  /**\n   * @returns {number} the top byte border\n   */\n  get top() {\n    return this.offset + this.length;\n  }\n}\n\nclass BlockGroup {\n  /**\n   *\n   * @param {number} offset\n   * @param {number} length\n   * @param {number[]} blockIds\n   */\n  constructor(offset, length, blockIds) {\n    this.offset = offset;\n    this.length = length;\n    this.blockIds = blockIds;\n  }\n}\n\nexport class BlockedSource extends BaseSource {\n  /**\n   *\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\n   * @param {object} options\n   * @param {number} [options.blockSize]\n   * @param {number} [options.cacheSize]\n   */\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\n    super();\n    this.source = source;\n    this.blockSize = blockSize;\n\n    this.blockCache = new QuickLRU({\n      maxSize: cacheSize,\n      onEviction: (blockId, block) => {\n        this.evictedBlocks.set(blockId, block);\n      },\n    });\n\n    /** @type {Map<number, Block>} */\n    this.evictedBlocks = new Map();\n\n    // mapping blockId -> Block instance\n    this.blockRequests = new Map();\n\n    // set of blockIds missing for the current requests\n    this.blockIdsToFetch = new Set();\n\n    this.abortedBlockIds = new Set();\n  }\n\n  get fileSize() {\n    return this.source.fileSize;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    const blockRequests = [];\n    const missingBlockIds = [];\n    const allBlockIds = [];\n    this.evictedBlocks.clear();\n\n    for (const { offset, length } of slices) {\n      let top = offset + length;\n\n      const { fileSize } = this;\n      if (fileSize !== null) {\n        top = Math.min(top, fileSize);\n      }\n\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\n\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\n        const blockId = Math.floor(current / this.blockSize);\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\n          this.blockIdsToFetch.add(blockId);\n          missingBlockIds.push(blockId);\n        }\n        if (this.blockRequests.has(blockId)) {\n          blockRequests.push(this.blockRequests.get(blockId));\n        }\n        allBlockIds.push(blockId);\n      }\n    }\n\n    // allow additional block requests to accumulate\n    await wait();\n    this.fetchBlocks(signal);\n\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\n    const missingRequests = [];\n    for (const blockId of missingBlockIds) {\n      // The requested missing block could already be in the cache\n      // instead of having its request still be outstanding.\n      if (this.blockRequests.has(blockId)) {\n        missingRequests.push(this.blockRequests.get(blockId));\n      }\n    }\n\n    // Actually await all pending requests that are needed for this `fetch`.\n    await Promise.allSettled(blockRequests);\n    await Promise.allSettled(missingRequests);\n\n    // Perform retries if a block was interrupted by a previous signal\n    const abortedBlockRequests = [];\n    const abortedBlockIds = allBlockIds\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\n    // start the retry of some blocks if required\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\n      this.fetchBlocks(null);\n      for (const blockId of abortedBlockIds) {\n        const block = this.blockRequests.get(blockId);\n        if (!block) {\n          throw new Error(`Block ${blockId} is not in the block requests`);\n        }\n        abortedBlockRequests.push(block);\n      }\n      await Promise.allSettled(abortedBlockRequests);\n    }\n\n    // throw an  abort error\n    if (signal && signal.aborted) {\n      throw new AbortError('Request was aborted');\n    }\n\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\n    const failedBlocks = blocks.filter((i) => !i);\n    if (failedBlocks.length) {\n      throw new AggregateError(failedBlocks, 'Request failed');\n    }\n\n    // create a final Map, with all required blocks for this request to satisfy\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\n\n    // TODO: satisfy each slice\n    return this.readSliceData(slices, requiredBlocks);\n  }\n\n  /**\n   *\n   * @param {AbortSignal} signal\n   */\n  fetchBlocks(signal) {\n    // check if we still need to\n    if (this.blockIdsToFetch.size > 0) {\n      const groups = this.groupBlocks(this.blockIdsToFetch);\n\n      // start requesting slices of data\n      const groupRequests = this.source.fetch(groups, signal);\n\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\n        const group = groups[groupIndex];\n\n        for (const blockId of group.blockIds) {\n          // make an async IIFE for each block\n          this.blockRequests.set(blockId, (async () => {\n            try {\n              const response = (await groupRequests)[groupIndex];\n              const blockOffset = blockId * this.blockSize;\n              const o = blockOffset - response.offset;\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\n              const data = response.data.slice(o, t);\n              const block = new Block(\n                blockOffset,\n                data.byteLength,\n                data,\n                blockId,\n              );\n              this.blockCache.set(blockId, block);\n              this.abortedBlockIds.delete(blockId);\n            } catch (err) {\n              if (err.name === 'AbortError') {\n                // store the signal here, we need it to determine later if an\n                // error was caused by this signal\n                err.signal = signal;\n                this.blockCache.delete(blockId);\n                this.abortedBlockIds.add(blockId);\n              } else {\n                throw err;\n              }\n            } finally {\n              this.blockRequests.delete(blockId);\n            }\n          })());\n        }\n      }\n      this.blockIdsToFetch.clear();\n    }\n  }\n\n  /**\n   *\n   * @param {Set} blockIds\n   * @returns {BlockGroup[]}\n   */\n  groupBlocks(blockIds) {\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\n    if (sortedBlockIds.length === 0) {\n      return [];\n    }\n    let current = [];\n    let lastBlockId = null;\n    const groups = [];\n\n    for (const blockId of sortedBlockIds) {\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\n        current.push(blockId);\n        lastBlockId = blockId;\n      } else {\n        groups.push(new BlockGroup(\n          current[0] * this.blockSize,\n          current.length * this.blockSize,\n          current,\n        ));\n        current = [blockId];\n        lastBlockId = blockId;\n      }\n    }\n\n    groups.push(new BlockGroup(\n      current[0] * this.blockSize,\n      current.length * this.blockSize,\n      current,\n    ));\n\n    return groups;\n  }\n\n  /**\n   *\n   * @param {import(\"./basesource\").Slice[]} slices\n   * @param {Map} blocks\n   */\n  readSliceData(slices, blocks) {\n    return slices.map((slice) => {\n      let top = slice.offset + slice.length;\n      if (this.fileSize !== null) {\n        top = Math.min(this.fileSize, top);\n      }\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\n      const blockIdHigh = Math.floor(top / this.blockSize);\n      const sliceData = new ArrayBuffer(slice.length);\n      const sliceView = new Uint8Array(sliceData);\n\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\n        const block = blocks.get(blockId);\n        const delta = block.offset - slice.offset;\n        const topDelta = block.top - top;\n        let blockInnerOffset = 0;\n        let rangeInnerOffset = 0;\n        let usedBlockLength;\n\n        if (delta < 0) {\n          blockInnerOffset = -delta;\n        } else if (delta > 0) {\n          rangeInnerOffset = delta;\n        }\n\n        if (topDelta < 0) {\n          usedBlockLength = block.length - blockInnerOffset;\n        } else {\n          usedBlockLength = top - block.offset - blockInnerOffset;\n        }\n\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\n        sliceView.set(blockView, rangeInnerOffset);\n      }\n\n      return sliceData;\n    });\n  }\n}\n","export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<BaseResponse>}\n   */\n  async request({ headers, signal } = {}) { // eslint-disable-line no-unused-vars\n    throw new Error('request is not implemented');\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  /**\n   * @param {{headers: HeadersInit, signal: AbortSignal}} [options={}]\n   * @returns {Promise<FetchResponse>}\n   */\n  async request({ headers, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials: this.credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n","import http from 'http';\nimport https from 'https';\nimport urlMod from 'url';\n\nimport { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass HttpResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for node HTTP/HTTPS API Response\n   * @param {http.ServerResponse} response\n   */\n  constructor(response, dataPromise) {\n    super();\n    this.response = response;\n    this.dataPromise = dataPromise;\n  }\n\n  get status() {\n    return this.response.statusCode;\n  }\n\n  getHeader(name) {\n    return this.response.headers[name];\n  }\n\n  async getData() {\n    const data = await this.dataPromise;\n    return data;\n  }\n}\n\nexport class HttpClient extends BaseClient {\n  constructor(url) {\n    super(url);\n    this.parsedUrl = urlMod.parse(this.url);\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\n  }\n\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const request = this.httpApi.get(\n        {\n          ...this.parsedUrl,\n          headers,\n        },\n        (response) => {\n          const dataPromise = new Promise((resolveData) => {\n            const chunks = [];\n\n            // collect chunks\n            response.on('data', (chunk) => {\n              chunks.push(chunk);\n            });\n\n            // concatenate all chunks and resolve the promise with the resulting buffer\n            response.on('end', () => {\n              const data = Buffer.concat(chunks).buffer;\n              resolveData(data);\n            });\n            response.on('error', reject);\n          });\n          resolve(new HttpResponse(response, dataPromise));\n        },\n      );\n      request.on('error', reject);\n\n      if (signal) {\n        if (signal.aborted) {\n          request.destroy(new AbortError('Request aborted'));\n        }\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n","const CRLFCRLF = '\\r\\n\\r\\n';\n\n/*\n * Shim for 'Object.fromEntries'\n */\nfunction itemsToObject(items) {\n  if (typeof Object.fromEntries !== 'undefined') {\n    return Object.fromEntries(items);\n  }\n  const obj = {};\n  for (const [key, value] of items) {\n    obj[key.toLowerCase()] = value;\n  }\n  return obj;\n}\n\n/**\n * Parse HTTP headers from a given string.\n * @param {String} text the text to parse the headers from\n * @returns {Object} the parsed headers with lowercase keys\n */\nfunction parseHeaders(text) {\n  const items = text\n    .split('\\r\\n')\n    .map((line) => {\n      const kv = line.split(':').map((str) => str.trim());\n      kv[0] = kv[0].toLowerCase();\n      return kv;\n    });\n\n  return itemsToObject(items);\n}\n\n/**\n * Parse a 'Content-Type' header value to the content-type and parameters\n * @param {String} rawContentType the raw string to parse from\n * @returns {Object} the parsed content type with the fields: type and params\n */\nexport function parseContentType(rawContentType) {\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\n  const paramsItems = rawParams.map((param) => param.split('='));\n  return { type, params: itemsToObject(paramsItems) };\n}\n\n/**\n * Parse a 'Content-Range' header value to its start, end, and total parts\n * @param {String} rawContentRange the raw string to parse from\n * @returns {Object} the parsed parts\n */\nexport function parseContentRange(rawContentRange) {\n  let start;\n  let end;\n  let total;\n\n  if (rawContentRange) {\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\n    start = parseInt(start, 10);\n    end = parseInt(end, 10);\n    total = parseInt(total, 10);\n  }\n\n  return { start, end, total };\n}\n\n/**\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\n * Each item in the list has the following properties:\n * - headers: the HTTP headers\n * - data: the sliced ArrayBuffer for that specific part\n * - offset: the offset of the byterange within its originating file\n * - length: the length of the byterange\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\n * @param {String} boundary the boundary string used to split the sections\n * @returns {Object[]} the parsed byteranges\n */\nexport function parseByteRanges(responseArrayBuffer, boundary) {\n  let offset = null;\n  const decoder = new TextDecoder('ascii');\n  const out = [];\n\n  const startBoundary = `--${boundary}`;\n  const endBoundary = `${startBoundary}--`;\n\n  // search for the initial boundary, may be offset by some bytes\n  // TODO: more efficient to check for `--` in bytes directly\n  for (let i = 0; i < 10; ++i) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\n    );\n    if (text === startBoundary) {\n      offset = i;\n    }\n  }\n\n  if (offset === null) {\n    throw new Error('Could not find initial boundary');\n  }\n\n  while (offset < responseArrayBuffer.byteLength) {\n    const text = decoder.decode(\n      new Uint8Array(responseArrayBuffer, offset,\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\n      ),\n    );\n\n    // break if we arrived at the end\n    if (text.length === 0 || text.startsWith(endBoundary)) {\n      break;\n    }\n\n    // assert that we are actually dealing with a byterange and are at the correct offset\n    if (!text.startsWith(startBoundary)) {\n      throw new Error('Part does not start with boundary');\n    }\n\n    // get a substring from where we read the headers\n    const innerText = text.substr(startBoundary.length + 2);\n\n    if (innerText.length === 0) {\n      break;\n    }\n\n    // find the double linebreak that denotes the end of the headers\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\n\n    // parse the headers to get the content range size\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\n    const { start, end, total } = parseContentRange(headers['content-range']);\n\n    // calculate the length of the slice and the next offset\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\n    out.push({\n      headers,\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\n      offset: start,\n      length,\n      fileSize: total,\n    });\n\n    offset = startOfData + length + 4;\n  }\n\n  return out;\n}\n","import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\nimport { BaseSource } from './basesource.js';\nimport { BlockedSource } from './blockedsource.js';\n\nimport { FetchClient } from './client/fetch.js';\nimport { XHRClient } from './client/xhr.js';\nimport { HttpClient } from './client/http.js';\n\nclass RemoteSource extends BaseSource {\n  /**\n   *\n   * @param {BaseClient} client\n   * @param {object} headers\n   * @param {numbers} maxRanges\n   * @param {boolean} allowFullFile\n   */\n  constructor(client, headers, maxRanges, allowFullFile) {\n    super();\n    this.client = client;\n    this.headers = headers;\n    this.maxRanges = maxRanges;\n    this.allowFullFile = allowFullFile;\n    this._fileSize = null;\n  }\n\n  /**\n   *\n   * @param {Slice[]} slices\n   */\n  async fetch(slices, signal) {\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\n    // and join them afterwards\n    if (this.maxRanges >= slices.length) {\n      return this.fetchSlices(slices, signal);\n    } else if (this.maxRanges > 0 && slices.length > 1) {\n      // TODO: split into multiple multi-range requests\n\n      // const subSlicesRequests = [];\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\n      //   subSlicesRequests.push(\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\n      //   );\n      // }\n      // return (await Promise.all(subSlicesRequests)).flat();\n    }\n\n    // otherwise make a single request for each slice\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  async fetchSlices(slices, signal) {\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${slices\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\n          .join(',')\n        }`,\n      },\n      signal,\n    });\n\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const { type, params } = parseContentType(response.getHeader('content-type'));\n      if (type === 'multipart/byteranges') {\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\n        this._fileSize = byteRanges[0].fileSize || null;\n        return byteRanges;\n      }\n\n      const data = await response.getData();\n\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      const first = [{\n        data,\n        offset: start,\n        length: end - start,\n      }];\n\n      if (slices.length > 1) {\n        // we requested more than one slice, but got only the first\n        // unfortunately, some HTTP Servers don't support multi-ranges\n        // and return only the first\n\n        // get the rest of the slices and fetch them iteratively\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\n        return first.concat(others);\n      }\n      return first;\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n      const data = await response.getData();\n      this._fileSize = data.byteLength;\n      return [{\n        data,\n        offset: 0,\n        length: data.byteLength,\n      }];\n    }\n  }\n\n  async fetchSlice(slice, signal) {\n    const { offset, length } = slice;\n    const response = await this.client.request({\n      headers: {\n        ...this.headers,\n        Range: `bytes=${offset}-${offset + length}`,\n      },\n      signal,\n    });\n\n    // check the response was okay and if the server actually understands range requests\n    if (!response.ok) {\n      throw new Error('Error fetching data.');\n    } else if (response.status === 206) {\n      const data = await response.getData();\n\n      const { total } = parseContentRange(response.getHeader('content-range'));\n      this._fileSize = total || null;\n      return {\n        data,\n        offset,\n        length,\n      };\n    } else {\n      if (!this.allowFullFile) {\n        throw new Error('Server responded with full file');\n      }\n\n      const data = await response.getData();\n\n      this._fileSize = data.byteLength;\n      return {\n        data,\n        offset: 0,\n        length: data.byteLength,\n      };\n    }\n  }\n\n  get fileSize() {\n    return this._fileSize;\n  }\n}\n\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\n  if (blockSize === null) {\n    return source;\n  }\n  return new BlockedSource(source, { blockSize, cacheSize });\n}\n\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new FetchClient(url, credentials);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new XHRClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const client = new HttpClient(url);\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\nexport function makeCustomSource(client, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\n  return maybeWrapInBlockedSource(source, blockOptions);\n}\n\n/**\n *\n * @param {string} url\n * @param {object} options\n */\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\n  if (typeof fetch === 'function' && !forceXHR) {\n    return makeFetchSource(url, clientOptions);\n  }\n  if (typeof XMLHttpRequest !== 'undefined') {\n    return makeXHRSource(url, clientOptions);\n  }\n  return makeHttpSource(url, clientOptions);\n}\n","export function assign(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nexport function chunk(iterable, length) {\n  const results = [];\n  const lengthOfIterable = iterable.length;\n  for (let i = 0; i < lengthOfIterable; i += length) {\n    const chunked = [];\n    for (let ci = i; ci < i + length; ci++) {\n      chunked.push(iterable[ci]);\n    }\n    results.push(chunked);\n  }\n  return results;\n}\n\nexport function endsWith(string, expectedEnding) {\n  if (string.length < expectedEnding.length) {\n    return false;\n  }\n  const actualEnding = string.substr(string.length - expectedEnding.length);\n  return actualEnding === expectedEnding;\n}\n\nexport function forEach(iterable, func) {\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    func(iterable[i], i);\n  }\n}\n\nexport function invert(oldObj) {\n  const newObj = {};\n  for (const key in oldObj) {\n    if (oldObj.hasOwnProperty(key)) {\n      const value = oldObj[key];\n      newObj[value] = key;\n    }\n  }\n  return newObj;\n}\n\nexport function range(n) {\n  const results = [];\n  for (let i = 0; i < n; i++) {\n    results.push(i);\n  }\n  return results;\n}\n\nexport function times(numTimes, func) {\n  const results = [];\n  for (let i = 0; i < numTimes; i++) {\n    results.push(func(i));\n  }\n  return results;\n}\n\nexport function toArray(iterable) {\n  const results = [];\n  const { length } = iterable;\n  for (let i = 0; i < length; i++) {\n    results.push(iterable[i]);\n  }\n  return results;\n}\n\nexport function toArrayRecursively(input) {\n  if (input.length) {\n    return toArray(input).map(toArrayRecursively);\n  }\n  return input;\n}\n\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\nexport function parseContentRange(headerValue) {\n  if (!headerValue) {\n    return null;\n  }\n\n  if (typeof headerValue !== 'string') {\n    throw new Error('invalid argument');\n  }\n\n  const parseInt = (number) => Number.parseInt(number, 10);\n\n  // Check for presence of unit\n  let matches = headerValue.match(/^(\\w*) /);\n  const unit = matches && matches[1];\n\n  // check for start-end/size header format\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: parseInt(matches[1]),\n      last: parseInt(matches[2]),\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\n    };\n  }\n\n  // check for size header format\n  matches = headerValue.match(/(\\d+|\\*)/);\n  if (matches) {\n    return {\n      unit,\n      first: null,\n      last: null,\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\n    };\n  }\n\n  return null;\n}\n\n/*\n * Promisified wrapper around 'setTimeout' to allow 'await'\n */\nexport async function wait(milliseconds) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n\nexport function zip(a, b) {\n  const A = Array.isArray(a) ? a : Array.from(a);\n  const B = Array.isArray(b) ? b : Array.from(b);\n  return A.map((k, i) => [k, B[i]]);\n}\n\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class AbortError extends Error {\n  constructor(params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AbortError);\n    }\n\n    this.name = 'AbortError';\n  }\n}\n\nexport class CustomAggregateError extends Error {\n  constructor(errors, message) {\n    super(message);\n    this.errors = errors;\n    this.message = message;\n    this.name = 'AggregateError';\n  }\n}\n\nexport const AggregateError = CustomAggregateError;\n","export default class QuickLRU extends Map {\n\tconstructor(options = {}) {\n\t\tsuper();\n\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\n\t\t}\n\n\t\t// TODO: Use private class fields when ESLint supports them.\n\t\tthis.maxSize = options.maxSize;\n\t\tthis.maxAge = options.maxAge || Number.POSITIVE_INFINITY;\n\t\tthis.onEviction = options.onEviction;\n\t\tthis.cache = new Map();\n\t\tthis.oldCache = new Map();\n\t\tthis._size = 0;\n\t}\n\n\t// TODO: Use private class methods when targeting Node.js 16.\n\t_emitEvictions(cache) {\n\t\tif (typeof this.onEviction !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const [key, item] of cache) {\n\t\t\tthis.onEviction(key, item.value);\n\t\t}\n\t}\n\n\t_deleteIfExpired(key, item) {\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\n\t\t\tif (typeof this.onEviction === 'function') {\n\t\t\t\tthis.onEviction(key, item.value);\n\t\t\t}\n\n\t\t\treturn this.delete(key);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t_getOrDeleteIfExpired(key, item) {\n\t\tconst deleted = this._deleteIfExpired(key, item);\n\t\tif (deleted === false) {\n\t\t\treturn item.value;\n\t\t}\n\t}\n\n\t_getItemValue(key, item) {\n\t\treturn item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\n\t}\n\n\t_peek(key, cache) {\n\t\tconst item = cache.get(key);\n\n\t\treturn this._getItemValue(key, item);\n\t}\n\n\t_set(key, value) {\n\t\tthis.cache.set(key, value);\n\t\tthis._size++;\n\n\t\tif (this._size >= this.maxSize) {\n\t\t\tthis._size = 0;\n\t\t\tthis._emitEvictions(this.oldCache);\n\t\t\tthis.oldCache = this.cache;\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\t_moveToRecent(key, item) {\n\t\tthis.oldCache.delete(key);\n\t\tthis._set(key, item);\n\t}\n\n\t* _entriesAscending() {\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\tconst item = this.cache.get(key);\n\n\t\t\treturn this._getItemValue(key, item);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\tconst item = this.oldCache.get(key);\n\t\t\tif (this._deleteIfExpired(key, item) === false) {\n\t\t\t\tthis._moveToRecent(key, item);\n\t\t\t\treturn item.value;\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key, value, {maxAge = this.maxAge} = {}) {\n\t\tconst expiry =\n\t\t\ttypeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY ?\n\t\t\t\tDate.now() + maxAge :\n\t\t\t\tundefined;\n\t\tif (this.cache.has(key)) {\n\t\t\tthis.cache.set(key, {\n\t\t\t\tvalue,\n\t\t\t\texpiry\n\t\t\t});\n\t\t} else {\n\t\t\tthis._set(key, {value, expiry});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\thas(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.cache.get(key));\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn !this._deleteIfExpired(key, this.oldCache.get(key));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpeek(key) {\n\t\tif (this.cache.has(key)) {\n\t\t\treturn this._peek(key, this.cache);\n\t\t}\n\n\t\tif (this.oldCache.has(key)) {\n\t\t\treturn this._peek(key, this.oldCache);\n\t\t}\n\t}\n\n\tdelete(key) {\n\t\tconst deleted = this.cache.delete(key);\n\t\tif (deleted) {\n\t\t\tthis._size--;\n\t\t}\n\n\t\treturn this.oldCache.delete(key) || deleted;\n\t}\n\n\tclear() {\n\t\tthis.cache.clear();\n\t\tthis.oldCache.clear();\n\t\tthis._size = 0;\n\t}\n\n\tresize(newSize) {\n\t\tif (!(newSize && newSize > 0)) {\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\n\t\t}\n\n\t\tconst items = [...this._entriesAscending()];\n\t\tconst removeCount = items.length - newSize;\n\t\tif (removeCount < 0) {\n\t\t\tthis.cache = new Map(items);\n\t\t\tthis.oldCache = new Map();\n\t\t\tthis._size = items.length;\n\t\t} else {\n\t\t\tif (removeCount > 0) {\n\t\t\t\tthis._emitEvictions(items.slice(0, removeCount));\n\t\t\t}\n\n\t\t\tthis.oldCache = new Map(items.slice(removeCount));\n\t\t\tthis.cache = new Map();\n\t\t\tthis._size = 0;\n\t\t}\n\n\t\tthis.maxSize = newSize;\n\t}\n\n\t* keys() {\n\t\tfor (const [key] of this) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const [, value] of this) {\n\t\t\tyield value;\n\t\t}\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const item of this.cache) {\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\tfor (const item of this.oldCache) {\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesDescending() {\n\t\tlet items = [...this.cache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\tif (deleted === false) {\n\t\t\t\tyield [key, value.value];\n\t\t\t}\n\t\t}\n\n\t\titems = [...this.oldCache];\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\n\t\t\tconst item = items[i];\n\t\t\tconst [key, value] = item;\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\n\t\t\t\tif (deleted === false) {\n\t\t\t\t\tyield [key, value.value];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t* entriesAscending() {\n\t\tfor (const [key, value] of this._entriesAscending()) {\n\t\t\tyield [key, value.value];\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (!this._size) {\n\t\t\treturn this.oldCache.size;\n\t\t}\n\n\t\tlet oldCacheSize = 0;\n\t\tfor (const key of this.oldCache.keys()) {\n\t\t\tif (!this.cache.has(key)) {\n\t\t\t\toldCacheSize++;\n\t\t\t}\n\t\t}\n\n\t\treturn Math.min(this._size + oldCacheSize, this.maxSize);\n\t}\n\n\tentries() {\n\t\treturn this.entriesAscending();\n\t}\n\n\tforEach(callbackFunction, thisArgument = this) {\n\t\tfor (const [key, value] of this.entriesAscending()) {\n\t\t\tcallbackFunction.call(thisArgument, value, key, this);\n\t\t}\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn JSON.stringify([...this.entriesAscending()]);\n\t}\n}\n","const list = [\n\t// Native ES errors https://262.ecma-international.org/12.0/#sec-well-known-intrinsic-objects\n\tEvalError,\n\tRangeError,\n\tReferenceError,\n\tSyntaxError,\n\tTypeError,\n\tURIError,\n\n\t// Built-in errors\n\tglobalThis.DOMException,\n\n\t// Node-specific errors\n\t// https://nodejs.org/api/errors.html\n\tglobalThis.AssertionError,\n\tglobalThis.SystemError,\n]\n\t// Non-native Errors are used with `globalThis` because they might be missing. This filter drops them when undefined.\n\t.filter(Boolean)\n\t.map(\n\t\tconstructor => [constructor.name, constructor],\n\t);\n\nconst errorConstructors = new Map(list);\n\nexport default errorConstructors;\n","export class NodeNotFoundError extends Error {\n    constructor(context, options = {}) {\n        super(`Node not found: ${context}`, options);\n        this.name = \"NodeNotFoundError\";\n    }\n}\nexport class KeyError extends Error {\n    constructor(path) {\n        super(`Missing key: ${path}`);\n        this.name = \"KeyError\";\n    }\n}\n//# sourceMappingURL=errors.js.map"],"names":["countSubstring","string","substring","pattern","RegExp","match","length","module","exports","indexOfMatch","indexOfMatchEnd","findTagByName","xml","tagName","options","debug","nested","startIndex","console","log","start","afterStart","slice","relativeEnd","selfClosing","openings","closings","clip","end","outer","inner","indexOf","lastIndexOf","findTagsByName","tags","tag","push","getAttribute","attributeName","opening","quotechars","i","char","exec","index","getFloat16","dataView","byteOffset","opts","arrayIterators","SafeIteratorPrototype","next","value","arrayIterator","this","safeIfNeeded","array","safe","generators","DummyArrayIteratorPrototype","generator","writable","configurable","key","buffer","floatView","uint32View","baseTable","shiftTable","e","mantissaTable","m","exponentTable","offsetTable","convertToNumber","float16bits","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","uncurryThis","target","thisArg","args","ReflectApply","uncurryThisGetter","ReflectGetOwnPropertyDescriptor","get","apply","construct","ReflectConstruct","defineProperty","ReflectDefineProperty","ReflectGet","getOwnPropertyDescriptor","getPrototypeOf","ReflectGetPrototypeOf","has","ReflectHas","ownKeys","ReflectOwnKeys","set","ReflectSet","setPrototypeOf","ReflectSetPrototypeOf","Reflect","EPSILON","MAX_SAFE_INTEGER","isFinite","NumberIsFinite","isNaN","NumberIsNaN","Number","iterator","SymbolIterator","species","SymbolSpecies","toStringTag","SymbolToStringTag","for","SymbolFor","Symbol","NativeObject","Object","create","ObjectCreate","ObjectDefineProperty","freeze","ObjectFreeze","is","ObjectIs","ObjectPrototype","prototype","NativeArray","__lookupGetter__","hasOwn","hasOwnProperty","Array","ArrayPrototype","isArray","NativeArrayPrototypeSymbolIterator","join","toLocaleString","ArrayPrototypeSymbolIterator","abs","MathAbs","trunc","MathTrunc","Math","NativeArrayBuffer","ArrayBuffer","ArrayBufferPrototype","isView","NativeSharedArrayBuffer","SharedArrayBuffer","TypedArray","Uint8Array","TypedArrayPrototype","from","NativeUint8Array","keys","values","entries","reverse","fill","copyWithin","sort","subarray","NativeUint16Array","Uint16Array","NativeUint32Array","Uint32Array","NativeFloat32Array","Float32Array","ArrayIteratorPrototype","ArrayIteratorPrototypeNext","GeneratorPrototypeNext","IteratorPrototype","DataViewPrototype","DataView","DataViewPrototypeGetUint16","getUint16","WeakSetPrototype","setUint16","TypeError","WeakSet","NativeWeakMap","add","WeakMap","WeakMapPrototype","WeakMapPrototypeGet","WeakMapPrototypeSet","registry","Map","addDecoder","cases","importFn","forEach","c","async","getDecoder","fileDirectory","Compression","Error","undefined","then","default","zstd","init","DataSlice","constructor","arrayBuffer","sliceOffset","littleEndian","bigTiff","_dataView","_sliceOffset","_littleEndian","_bigTiff","sliceTop","byteLength","covers","offset","readUint8","getUint8","readInt8","getInt8","readUint16","readInt16","getInt16","readUint32","getUint32","readInt32","getInt32","readFloat32","getFloat32","readFloat64","getFloat64","readUint64","left","right","combined","isSafeInteger","readInt64","isNegative","carrying","byte","readOffset","DataView64","getUint64","getInt64","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","getValues","dataSlice","count","readMethod","fieldTypeLength","Int8Array","Int16Array","Int32Array","Float64Array","call","TextDecoder","decode","ImageFileDirectory","geoKeyDirectory","nextIFDByteOffset","GeoTIFFImageIndexError","super","GeoTIFFBase","readRasters","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","a","b","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","round","min","max","GeoTIFF","source","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","size","fallbackSize","fetch","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","rawGeoKeyDirectory","GeoKeyDirectory","location","parseGeoKeyDirectory","requestIFD","previousIfd","ifd","hasNext","getGhostValues","detectionString","firstLine","split","metadataSize","fullString","filter","line","map","fromSource","signal","headerData","BOM","magicNumber","close","fromUrl","url","sum","s","arrayForType","format","bitsPerSample","geoKeys","tiles","isTiled","StripOffsets","planarConfiguration","PlanarConfiguration","getFileDirectory","getGeoKeys","ImageWidth","ImageLength","getSamplesPerPixel","SamplesPerPixel","getTileWidth","TileWidth","getTileHeight","TileLength","RowsPerStrip","getBlockWidth","getBlockHeight","y","getBytesPerPixel","bytes","BitsPerSample","getSampleByteSize","ceil","getReaderForSample","sampleIndex","SampleFormat","getSampleFormat","getBitsPerSample","getArrayForSample","getTileOrStrip","x","sample","poolOrDecoder","numTilesPerRow","numTilesPerCol","byteCount","TileOffsets","TileByteCounts","StripByteCounts","request","data","sampleFormat","needsNormalization","inBuffer","samplesPerPixel","tileWidth","tileHeight","view","samplesToTransfer","outArray","bitMask","parseInt","repeat","pixelBitSkip","bitsPerLine","lineBitOffset","pixelBitOffset","bitOffset","outIndex","floor","innerBitOffset","raw","normalizeArray","_readRaster","samples","valueArrays","interleave","resampleMethod","imageWidth","imageHeight","minXTile","maxXTile","minYTile","maxYTile","windowWidth","bytesPerPixel","srcSampleOffsets","sampleReaders","promises","yTile","xTile","getPromise","si","promise","tile","blockHeight","firstCol","lastLine","lastCol","reader","ymax","xmax","pixelOffset","windowCoordinate","Promise","all","resampled","pool","fillValue","numPixels","reject","valueArray","readRGB","enableAlpha","pi","PhotometricInterpretation","RGB","ExtraSamples","Unspecified","WhiteIsZero","BlackIsZero","Palette","CMYK","YCbCr","CIELab","subOptions","raster","ColorMap","red","green","blue","j","getTiePoints","ModelTiepoint","tiePoints","k","z","getGDALMetadata","metadata","GDAL_METADATA","items","item","getGDALNoData","GDAL_NODATA","modelTransformation","ModelTransformation","referenceImage","modelPixelScale","ModelPixelScale","sqrt","refResX","refResY","refResZ","pixelIsArea","GTRasterTypeGeoKey","tilegrid","d","f","g","h","projected","I","J","xs","pt","ys","origin","resolution","x1","y1","x2","y2","fieldTagNames","fieldTags","arrayFields","StripRowCounts","SubIFDs","fieldTypeNames","fieldTypes","photometricInterpretations","TransparencyMask","ICCLab","ExtraSamplesValues","Assocalpha","Unassalpha","LercParameters","Version","AddCompression","LercAddCompression","None","Deflate","Zstandard","geoKeyNames","copyNewSize","lerp","v0","v1","t","resample","inWidth","inHeight","outWidth","outHeight","method","toLowerCase","relX","relY","newArray","cy","cx","resampleNearest","rawY","yl","yh","rawX","tx","xl","xh","ll","hl","lh","hh","resampleBilinear","resampleInterleaved","resampleNearestInterleaved","resampleBilinearInterleaved","fromWhiteIsZero","rgbRaster","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","r","BaseSource","slices","fetchSlice","fileSize","Block","top","BlockGroup","blockIds","BlockedSource","blockSize","cacheSize","blockCache","maxSize","onEviction","blockId","block","evictedBlocks","blockRequests","blockIdsToFetch","Set","abortedBlockIds","missingBlockIds","allBlockIds","clear","current","fetchBlocks","missingRequests","allSettled","abortedBlockRequests","id","aborted","blocks","failedBlocks","requiredBlocks","readSliceData","groups","groupBlocks","groupRequests","groupIndex","group","response","blockOffset","o","delete","err","name","sortedBlockIds","lastBlockId","blockIdLow","blockIdHigh","sliceData","sliceView","delta","usedBlockLength","blockInnerOffset","rangeInnerOffset","blockView","BaseResponse","ok","status","getHeader","headerName","getData","BaseClient","headers","FetchResponse","FetchClient","credentials","HttpResponse","dataPromise","statusCode","HttpClient","parsedUrl","httpApi","protocol","constructRequest","resolve","resolveData","chunks","on","chunk","Buffer","concat","destroy","addEventListener","XHRResponse","xhr","getResponseHeader","XHRClient","XMLHttpRequest","open","responseType","setRequestHeader","onload","onerror","onabort","send","abort","CRLFCRLF","itemsToObject","fromEntries","obj","parseHeaders","text","kv","str","trim","parseContentType","rawContentType","type","rawParams","params","param","parseContentRange","rawContentRange","total","parseByteRanges","responseArrayBuffer","boundary","decoder","out","startBoundary","endBoundary","startsWith","innerText","substr","endOfHeaders","startOfData","RemoteSource","client","maxRanges","allowFullFile","_fileSize","fetchSlices","Range","byteRanges","first","others","maybeWrapInBlockedSource","makeRemoteSource","forceXHR","clientOptions","blockOptions","makeXHRSource","makeHttpSource","makeFetchSource","wait","milliseconds","setTimeout","zip","A","B","AbortError","captureStackTrace","CustomAggregateError","errors","message","AggregateError","QuickLRU","maxAge","POSITIVE_INFINITY","oldCache","_size","_emitEvictions","_deleteIfExpired","expiry","Date","now","_getOrDeleteIfExpired","_getItemValue","_peek","_set","_moveToRecent","_entriesAscending","peek","deleted","resize","newSize","removeCount","entriesDescending","entriesAscending","oldCacheSize","callbackFunction","thisArgument","JSON","stringify","list","EvalError","ReferenceError","SyntaxError","URIError","globalThis","DOMException","AssertionError","SystemError","Boolean","NodeNotFoundError","context","KeyError","path"],"sourceRoot":""}